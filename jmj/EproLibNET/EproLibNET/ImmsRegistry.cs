//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace EproLibNET {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class ImmsRegistry : DataSet {
        
        private PatientDataTable tablePatient;
        
        private treatmentDataTable tabletreatment;
        
        private DataRelation relationPatient_treatment;
        
        public ImmsRegistry() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected ImmsRegistry(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Patient"] != null)) {
                    this.Tables.Add(new PatientDataTable(ds.Tables["Patient"]));
                }
                if ((ds.Tables["treatment"] != null)) {
                    this.Tables.Add(new treatmentDataTable(ds.Tables["treatment"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PatientDataTable Patient {
            get {
                return this.tablePatient;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public treatmentDataTable treatment {
            get {
                return this.tabletreatment;
            }
        }
        
        public override DataSet Clone() {
            ImmsRegistry cln = ((ImmsRegistry)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Patient"] != null)) {
                this.Tables.Add(new PatientDataTable(ds.Tables["Patient"]));
            }
            if ((ds.Tables["treatment"] != null)) {
                this.Tables.Add(new treatmentDataTable(ds.Tables["treatment"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tablePatient = ((PatientDataTable)(this.Tables["Patient"]));
            if ((this.tablePatient != null)) {
                this.tablePatient.InitVars();
            }
            this.tabletreatment = ((treatmentDataTable)(this.Tables["treatment"]));
            if ((this.tabletreatment != null)) {
                this.tabletreatment.InitVars();
            }
            this.relationPatient_treatment = this.Relations["Patient_treatment"];
        }
        
        private void InitClass() {
            this.DataSetName = "ImmsRegistry";
            this.Prefix = "";
            this.Namespace = "";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tablePatient = new PatientDataTable();
            this.Tables.Add(this.tablePatient);
            this.tabletreatment = new treatmentDataTable();
            this.Tables.Add(this.tabletreatment);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("Patient_treatment", new DataColumn[] {
                        this.tablePatient.Patient_IdColumn}, new DataColumn[] {
                        this.tabletreatment.Patient_IdColumn});
            this.tabletreatment.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationPatient_treatment = new DataRelation("Patient_treatment", new DataColumn[] {
                        this.tablePatient.Patient_IdColumn}, new DataColumn[] {
                        this.tabletreatment.Patient_IdColumn}, false);
            this.relationPatient_treatment.Nested = true;
            this.Relations.Add(this.relationPatient_treatment);
        }
        
        private bool ShouldSerializePatient() {
            return false;
        }
        
        private bool ShouldSerializetreatment() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void PatientRowChangeEventHandler(object sender, PatientRowChangeEvent e);
        
        public delegate void treatmentRowChangeEventHandler(object sender, treatmentRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PatientDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columncpr_id;
            
            private DataColumn columnlast_name;
            
            private DataColumn columnfirst_name;
            
            private DataColumn columnmiddle_name;
            
            private DataColumn columndate_of_birth;
            
            private DataColumn columnsex;
            
            private DataColumn columnPatient_Id;
            
            internal PatientDataTable() : 
                    base("Patient") {
                this.InitClass();
            }
            
            internal PatientDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn cpr_idColumn {
                get {
                    return this.columncpr_id;
                }
            }
            
            internal DataColumn last_nameColumn {
                get {
                    return this.columnlast_name;
                }
            }
            
            internal DataColumn first_nameColumn {
                get {
                    return this.columnfirst_name;
                }
            }
            
            internal DataColumn middle_nameColumn {
                get {
                    return this.columnmiddle_name;
                }
            }
            
            internal DataColumn date_of_birthColumn {
                get {
                    return this.columndate_of_birth;
                }
            }
            
            internal DataColumn sexColumn {
                get {
                    return this.columnsex;
                }
            }
            
            internal DataColumn Patient_IdColumn {
                get {
                    return this.columnPatient_Id;
                }
            }
            
            public PatientRow this[int index] {
                get {
                    return ((PatientRow)(this.Rows[index]));
                }
            }
            
            public event PatientRowChangeEventHandler PatientRowChanged;
            
            public event PatientRowChangeEventHandler PatientRowChanging;
            
            public event PatientRowChangeEventHandler PatientRowDeleted;
            
            public event PatientRowChangeEventHandler PatientRowDeleting;
            
            public void AddPatientRow(PatientRow row) {
                this.Rows.Add(row);
            }
            
            public PatientRow AddPatientRow(string cpr_id, string last_name, string first_name, string middle_name, string date_of_birth, string sex) {
                PatientRow rowPatientRow = ((PatientRow)(this.NewRow()));
                rowPatientRow.ItemArray = new object[] {
                        cpr_id,
                        last_name,
                        first_name,
                        middle_name,
                        date_of_birth,
                        sex,
                        null};
                this.Rows.Add(rowPatientRow);
                return rowPatientRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                PatientDataTable cln = ((PatientDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new PatientDataTable();
            }
            
            internal void InitVars() {
                this.columncpr_id = this.Columns["cpr_id"];
                this.columnlast_name = this.Columns["last_name"];
                this.columnfirst_name = this.Columns["first_name"];
                this.columnmiddle_name = this.Columns["middle_name"];
                this.columndate_of_birth = this.Columns["date_of_birth"];
                this.columnsex = this.Columns["sex"];
                this.columnPatient_Id = this.Columns["Patient_Id"];
            }
            
            private void InitClass() {
                this.columncpr_id = new DataColumn("cpr_id", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncpr_id);
                this.columnlast_name = new DataColumn("last_name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlast_name);
                this.columnfirst_name = new DataColumn("first_name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnfirst_name);
                this.columnmiddle_name = new DataColumn("middle_name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnmiddle_name);
                this.columndate_of_birth = new DataColumn("date_of_birth", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndate_of_birth);
                this.columnsex = new DataColumn("sex", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnsex);
                this.columnPatient_Id = new DataColumn("Patient_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnPatient_Id);
                this.Constraints.Add(new UniqueConstraint("ImmsRegistryKey1", new DataColumn[] {
                                this.columncpr_id}, false));
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnPatient_Id}, true));
                this.columncpr_id.AllowDBNull = false;
                this.columncpr_id.Unique = true;
                this.columnPatient_Id.AutoIncrement = true;
                this.columnPatient_Id.AllowDBNull = false;
                this.columnPatient_Id.Unique = true;
            }
            
            public PatientRow NewPatientRow() {
                return ((PatientRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new PatientRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(PatientRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PatientRowChanged != null)) {
                    this.PatientRowChanged(this, new PatientRowChangeEvent(((PatientRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PatientRowChanging != null)) {
                    this.PatientRowChanging(this, new PatientRowChangeEvent(((PatientRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PatientRowDeleted != null)) {
                    this.PatientRowDeleted(this, new PatientRowChangeEvent(((PatientRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PatientRowDeleting != null)) {
                    this.PatientRowDeleting(this, new PatientRowChangeEvent(((PatientRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovePatientRow(PatientRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PatientRow : DataRow {
            
            private PatientDataTable tablePatient;
            
            internal PatientRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablePatient = ((PatientDataTable)(this.Table));
            }
            
            public string cpr_id {
                get {
                    return ((string)(this[this.tablePatient.cpr_idColumn]));
                }
                set {
                    this[this.tablePatient.cpr_idColumn] = value;
                }
            }
            
            public string last_name {
                get {
                    try {
                        return ((string)(this[this.tablePatient.last_nameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatient.last_nameColumn] = value;
                }
            }
            
            public string first_name {
                get {
                    try {
                        return ((string)(this[this.tablePatient.first_nameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatient.first_nameColumn] = value;
                }
            }
            
            public string middle_name {
                get {
                    try {
                        return ((string)(this[this.tablePatient.middle_nameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatient.middle_nameColumn] = value;
                }
            }
            
            public string date_of_birth {
                get {
                    try {
                        return ((string)(this[this.tablePatient.date_of_birthColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatient.date_of_birthColumn] = value;
                }
            }
            
            public string sex {
                get {
                    try {
                        return ((string)(this[this.tablePatient.sexColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatient.sexColumn] = value;
                }
            }
            
            public bool Islast_nameNull() {
                return this.IsNull(this.tablePatient.last_nameColumn);
            }
            
            public void Setlast_nameNull() {
                this[this.tablePatient.last_nameColumn] = System.Convert.DBNull;
            }
            
            public bool Isfirst_nameNull() {
                return this.IsNull(this.tablePatient.first_nameColumn);
            }
            
            public void Setfirst_nameNull() {
                this[this.tablePatient.first_nameColumn] = System.Convert.DBNull;
            }
            
            public bool Ismiddle_nameNull() {
                return this.IsNull(this.tablePatient.middle_nameColumn);
            }
            
            public void Setmiddle_nameNull() {
                this[this.tablePatient.middle_nameColumn] = System.Convert.DBNull;
            }
            
            public bool Isdate_of_birthNull() {
                return this.IsNull(this.tablePatient.date_of_birthColumn);
            }
            
            public void Setdate_of_birthNull() {
                this[this.tablePatient.date_of_birthColumn] = System.Convert.DBNull;
            }
            
            public bool IssexNull() {
                return this.IsNull(this.tablePatient.sexColumn);
            }
            
            public void SetsexNull() {
                this[this.tablePatient.sexColumn] = System.Convert.DBNull;
            }
            
            public treatmentRow[] GettreatmentRows() {
                return ((treatmentRow[])(this.GetChildRows(this.Table.ChildRelations["Patient_treatment"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PatientRowChangeEvent : EventArgs {
            
            private PatientRow eventRow;
            
            private DataRowAction eventAction;
            
            public PatientRowChangeEvent(PatientRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public PatientRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class treatmentDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columntreatmenttype;
            
            private DataColumn columnvaccinecode;
            
            private DataColumn columnvaccinename;
            
            private DataColumn columnadmindate;
            
            private DataColumn columndoseamount;
            
            private DataColumn columndoseunit;
            
            private DataColumn columnlotnumber;
            
            private DataColumn columnmanufacturer;
            
            private DataColumn columnadminister_id;
            
            private DataColumn columnadminister_name;
            
            private DataColumn columnPatient_Id;
            
            internal treatmentDataTable() : 
                    base("treatment") {
                this.InitClass();
            }
            
            internal treatmentDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn treatmenttypeColumn {
                get {
                    return this.columntreatmenttype;
                }
            }
            
            internal DataColumn vaccinecodeColumn {
                get {
                    return this.columnvaccinecode;
                }
            }
            
            internal DataColumn vaccinenameColumn {
                get {
                    return this.columnvaccinename;
                }
            }
            
            internal DataColumn admindateColumn {
                get {
                    return this.columnadmindate;
                }
            }
            
            internal DataColumn doseamountColumn {
                get {
                    return this.columndoseamount;
                }
            }
            
            internal DataColumn doseunitColumn {
                get {
                    return this.columndoseunit;
                }
            }
            
            internal DataColumn lotnumberColumn {
                get {
                    return this.columnlotnumber;
                }
            }
            
            internal DataColumn manufacturerColumn {
                get {
                    return this.columnmanufacturer;
                }
            }
            
            internal DataColumn administer_idColumn {
                get {
                    return this.columnadminister_id;
                }
            }
            
            internal DataColumn administer_nameColumn {
                get {
                    return this.columnadminister_name;
                }
            }
            
            internal DataColumn Patient_IdColumn {
                get {
                    return this.columnPatient_Id;
                }
            }
            
            public treatmentRow this[int index] {
                get {
                    return ((treatmentRow)(this.Rows[index]));
                }
            }
            
            public event treatmentRowChangeEventHandler treatmentRowChanged;
            
            public event treatmentRowChangeEventHandler treatmentRowChanging;
            
            public event treatmentRowChangeEventHandler treatmentRowDeleted;
            
            public event treatmentRowChangeEventHandler treatmentRowDeleting;
            
            public void AddtreatmentRow(treatmentRow row) {
                this.Rows.Add(row);
            }
            
            public treatmentRow AddtreatmentRow(string treatmenttype, string vaccinecode, string vaccinename, string admindate, string doseamount, string doseunit, string lotnumber, string manufacturer, string administer_id, string administer_name, PatientRow parentPatientRowByPatient_treatment) {
                treatmentRow rowtreatmentRow = ((treatmentRow)(this.NewRow()));
                rowtreatmentRow.ItemArray = new object[] {
                        treatmenttype,
                        vaccinecode,
                        vaccinename,
                        admindate,
                        doseamount,
                        doseunit,
                        lotnumber,
                        manufacturer,
                        administer_id,
                        administer_name,
                        parentPatientRowByPatient_treatment[6]};
                this.Rows.Add(rowtreatmentRow);
                return rowtreatmentRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                treatmentDataTable cln = ((treatmentDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new treatmentDataTable();
            }
            
            internal void InitVars() {
                this.columntreatmenttype = this.Columns["treatmenttype"];
                this.columnvaccinecode = this.Columns["vaccinecode"];
                this.columnvaccinename = this.Columns["vaccinename"];
                this.columnadmindate = this.Columns["admindate"];
                this.columndoseamount = this.Columns["doseamount"];
                this.columndoseunit = this.Columns["doseunit"];
                this.columnlotnumber = this.Columns["lotnumber"];
                this.columnmanufacturer = this.Columns["manufacturer"];
                this.columnadminister_id = this.Columns["administer_id"];
                this.columnadminister_name = this.Columns["administer_name"];
                this.columnPatient_Id = this.Columns["Patient_Id"];
            }
            
            private void InitClass() {
                this.columntreatmenttype = new DataColumn("treatmenttype", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntreatmenttype);
                this.columnvaccinecode = new DataColumn("vaccinecode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnvaccinecode);
                this.columnvaccinename = new DataColumn("vaccinename", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnvaccinename);
                this.columnadmindate = new DataColumn("admindate", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnadmindate);
                this.columndoseamount = new DataColumn("doseamount", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndoseamount);
                this.columndoseunit = new DataColumn("doseunit", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndoseunit);
                this.columnlotnumber = new DataColumn("lotnumber", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlotnumber);
                this.columnmanufacturer = new DataColumn("manufacturer", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnmanufacturer);
                this.columnadminister_id = new DataColumn("administer_id", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnadminister_id);
                this.columnadminister_name = new DataColumn("administer_name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnadminister_name);
                this.columnPatient_Id = new DataColumn("Patient_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnPatient_Id);
                this.columntreatmenttype.AllowDBNull = false;
                this.columnvaccinecode.AllowDBNull = false;
                this.columnvaccinename.AllowDBNull = false;
                this.columnadmindate.AllowDBNull = false;
                this.columndoseamount.AllowDBNull = false;
                this.columndoseunit.AllowDBNull = false;
                this.columnlotnumber.AllowDBNull = false;
                this.columnmanufacturer.AllowDBNull = false;
            }
            
            public treatmentRow NewtreatmentRow() {
                return ((treatmentRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new treatmentRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(treatmentRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.treatmentRowChanged != null)) {
                    this.treatmentRowChanged(this, new treatmentRowChangeEvent(((treatmentRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.treatmentRowChanging != null)) {
                    this.treatmentRowChanging(this, new treatmentRowChangeEvent(((treatmentRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.treatmentRowDeleted != null)) {
                    this.treatmentRowDeleted(this, new treatmentRowChangeEvent(((treatmentRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.treatmentRowDeleting != null)) {
                    this.treatmentRowDeleting(this, new treatmentRowChangeEvent(((treatmentRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovetreatmentRow(treatmentRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class treatmentRow : DataRow {
            
            private treatmentDataTable tabletreatment;
            
            internal treatmentRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tabletreatment = ((treatmentDataTable)(this.Table));
            }
            
            public string treatmenttype {
                get {
                    return ((string)(this[this.tabletreatment.treatmenttypeColumn]));
                }
                set {
                    this[this.tabletreatment.treatmenttypeColumn] = value;
                }
            }
            
            public string vaccinecode {
                get {
                    return ((string)(this[this.tabletreatment.vaccinecodeColumn]));
                }
                set {
                    this[this.tabletreatment.vaccinecodeColumn] = value;
                }
            }
            
            public string vaccinename {
                get {
                    return ((string)(this[this.tabletreatment.vaccinenameColumn]));
                }
                set {
                    this[this.tabletreatment.vaccinenameColumn] = value;
                }
            }
            
            public string admindate {
                get {
                    return ((string)(this[this.tabletreatment.admindateColumn]));
                }
                set {
                    this[this.tabletreatment.admindateColumn] = value;
                }
            }
            
            public string doseamount {
                get {
                    return ((string)(this[this.tabletreatment.doseamountColumn]));
                }
                set {
                    this[this.tabletreatment.doseamountColumn] = value;
                }
            }
            
            public string doseunit {
                get {
                    return ((string)(this[this.tabletreatment.doseunitColumn]));
                }
                set {
                    this[this.tabletreatment.doseunitColumn] = value;
                }
            }
            
            public string lotnumber {
                get {
                    return ((string)(this[this.tabletreatment.lotnumberColumn]));
                }
                set {
                    this[this.tabletreatment.lotnumberColumn] = value;
                }
            }
            
            public string manufacturer {
                get {
                    return ((string)(this[this.tabletreatment.manufacturerColumn]));
                }
                set {
                    this[this.tabletreatment.manufacturerColumn] = value;
                }
            }
            
            public string administer_id {
                get {
                    try {
                        return ((string)(this[this.tabletreatment.administer_idColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletreatment.administer_idColumn] = value;
                }
            }
            
            public string administer_name {
                get {
                    try {
                        return ((string)(this[this.tabletreatment.administer_nameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletreatment.administer_nameColumn] = value;
                }
            }
            
            public PatientRow PatientRow {
                get {
                    return ((PatientRow)(this.GetParentRow(this.Table.ParentRelations["Patient_treatment"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Patient_treatment"]);
                }
            }
            
            public bool Isadminister_idNull() {
                return this.IsNull(this.tabletreatment.administer_idColumn);
            }
            
            public void Setadminister_idNull() {
                this[this.tabletreatment.administer_idColumn] = System.Convert.DBNull;
            }
            
            public bool Isadminister_nameNull() {
                return this.IsNull(this.tabletreatment.administer_nameColumn);
            }
            
            public void Setadminister_nameNull() {
                this[this.tabletreatment.administer_nameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class treatmentRowChangeEvent : EventArgs {
            
            private treatmentRow eventRow;
            
            private DataRowAction eventAction;
            
            public treatmentRowChangeEvent(treatmentRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public treatmentRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
