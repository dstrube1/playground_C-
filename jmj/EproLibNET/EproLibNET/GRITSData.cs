//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace EproLibNET {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class GRITSData : DataSet {
        
        private CLIENTDataTable tableCLIENT;
        
        private ENCOUNTERDataTable tableENCOUNTER;
        
        private VACCINEDataTable tableVACCINE;
        
        private DataRelation relationCLIENTENCOUNTER;
        
        private DataRelation relationENCOUNTERVACCINE;
        
        public GRITSData() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected GRITSData(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["CLIENT"] != null)) {
                    this.Tables.Add(new CLIENTDataTable(ds.Tables["CLIENT"]));
                }
                if ((ds.Tables["ENCOUNTER"] != null)) {
                    this.Tables.Add(new ENCOUNTERDataTable(ds.Tables["ENCOUNTER"]));
                }
                if ((ds.Tables["VACCINE"] != null)) {
                    this.Tables.Add(new VACCINEDataTable(ds.Tables["VACCINE"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CLIENTDataTable CLIENT {
            get {
                return this.tableCLIENT;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ENCOUNTERDataTable ENCOUNTER {
            get {
                return this.tableENCOUNTER;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public VACCINEDataTable VACCINE {
            get {
                return this.tableVACCINE;
            }
        }
        
        public override DataSet Clone() {
            GRITSData cln = ((GRITSData)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["CLIENT"] != null)) {
                this.Tables.Add(new CLIENTDataTable(ds.Tables["CLIENT"]));
            }
            if ((ds.Tables["ENCOUNTER"] != null)) {
                this.Tables.Add(new ENCOUNTERDataTable(ds.Tables["ENCOUNTER"]));
            }
            if ((ds.Tables["VACCINE"] != null)) {
                this.Tables.Add(new VACCINEDataTable(ds.Tables["VACCINE"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableCLIENT = ((CLIENTDataTable)(this.Tables["CLIENT"]));
            if ((this.tableCLIENT != null)) {
                this.tableCLIENT.InitVars();
            }
            this.tableENCOUNTER = ((ENCOUNTERDataTable)(this.Tables["ENCOUNTER"]));
            if ((this.tableENCOUNTER != null)) {
                this.tableENCOUNTER.InitVars();
            }
            this.tableVACCINE = ((VACCINEDataTable)(this.Tables["VACCINE"]));
            if ((this.tableVACCINE != null)) {
                this.tableVACCINE.InitVars();
            }
            this.relationCLIENTENCOUNTER = this.Relations["CLIENTENCOUNTER"];
            this.relationENCOUNTERVACCINE = this.Relations["ENCOUNTERVACCINE"];
        }
        
        private void InitClass() {
            this.DataSetName = "GRITSData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/GRITSData.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableCLIENT = new CLIENTDataTable();
            this.Tables.Add(this.tableCLIENT);
            this.tableENCOUNTER = new ENCOUNTERDataTable();
            this.Tables.Add(this.tableENCOUNTER);
            this.tableVACCINE = new VACCINEDataTable();
            this.Tables.Add(this.tableVACCINE);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("CLIENTENCOUNTER", new DataColumn[] {
                        this.tableCLIENT.CPR_IDColumn}, new DataColumn[] {
                        this.tableENCOUNTER.CPR_IDColumn});
            this.tableENCOUNTER.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.Cascade;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("ENCOUNTERVACCINE", new DataColumn[] {
                        this.tableENCOUNTER.CPR_IDColumn,
                        this.tableENCOUNTER.ENCOUNTER_IDColumn}, new DataColumn[] {
                        this.tableVACCINE.CPR_IDColumn,
                        this.tableVACCINE.ENCOUNTER_IDColumn});
            this.tableVACCINE.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.Cascade;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationCLIENTENCOUNTER = new DataRelation("CLIENTENCOUNTER", new DataColumn[] {
                        this.tableCLIENT.CPR_IDColumn}, new DataColumn[] {
                        this.tableENCOUNTER.CPR_IDColumn}, false);
            this.Relations.Add(this.relationCLIENTENCOUNTER);
            this.relationENCOUNTERVACCINE = new DataRelation("ENCOUNTERVACCINE", new DataColumn[] {
                        this.tableENCOUNTER.CPR_IDColumn,
                        this.tableENCOUNTER.ENCOUNTER_IDColumn}, new DataColumn[] {
                        this.tableVACCINE.CPR_IDColumn,
                        this.tableVACCINE.ENCOUNTER_IDColumn}, false);
            this.Relations.Add(this.relationENCOUNTERVACCINE);
        }
        
        private bool ShouldSerializeCLIENT() {
            return false;
        }
        
        private bool ShouldSerializeENCOUNTER() {
            return false;
        }
        
        private bool ShouldSerializeVACCINE() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void CLIENTRowChangeEventHandler(object sender, CLIENTRowChangeEvent e);
        
        public delegate void ENCOUNTERRowChangeEventHandler(object sender, ENCOUNTERRowChangeEvent e);
        
        public delegate void VACCINERowChangeEventHandler(object sender, VACCINERowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CLIENTDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnCPR_ID;
            
            private DataColumn columnFIRSTNAME;
            
            private DataColumn columnLASTNAME;
            
            private DataColumn columnBIRTHDATE;
            
            private DataColumn columnELIGIBILITY;
            
            private DataColumn columnSEX;
            
            private DataColumn columnSSN;
            
            private DataColumn columnPHONE;
            
            private DataColumn columnADDRESS;
            
            private DataColumn columnCITY;
            
            private DataColumn columnSTATE;
            
            private DataColumn columnZIP;
            
            internal CLIENTDataTable() : 
                    base("CLIENT") {
                this.InitClass();
            }
            
            internal CLIENTDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn CPR_IDColumn {
                get {
                    return this.columnCPR_ID;
                }
            }
            
            internal DataColumn FIRSTNAMEColumn {
                get {
                    return this.columnFIRSTNAME;
                }
            }
            
            internal DataColumn LASTNAMEColumn {
                get {
                    return this.columnLASTNAME;
                }
            }
            
            internal DataColumn BIRTHDATEColumn {
                get {
                    return this.columnBIRTHDATE;
                }
            }
            
            internal DataColumn ELIGIBILITYColumn {
                get {
                    return this.columnELIGIBILITY;
                }
            }
            
            internal DataColumn SEXColumn {
                get {
                    return this.columnSEX;
                }
            }
            
            internal DataColumn SSNColumn {
                get {
                    return this.columnSSN;
                }
            }
            
            internal DataColumn PHONEColumn {
                get {
                    return this.columnPHONE;
                }
            }
            
            internal DataColumn ADDRESSColumn {
                get {
                    return this.columnADDRESS;
                }
            }
            
            internal DataColumn CITYColumn {
                get {
                    return this.columnCITY;
                }
            }
            
            internal DataColumn STATEColumn {
                get {
                    return this.columnSTATE;
                }
            }
            
            internal DataColumn ZIPColumn {
                get {
                    return this.columnZIP;
                }
            }
            
            public CLIENTRow this[int index] {
                get {
                    return ((CLIENTRow)(this.Rows[index]));
                }
            }
            
            public event CLIENTRowChangeEventHandler CLIENTRowChanged;
            
            public event CLIENTRowChangeEventHandler CLIENTRowChanging;
            
            public event CLIENTRowChangeEventHandler CLIENTRowDeleted;
            
            public event CLIENTRowChangeEventHandler CLIENTRowDeleting;
            
            public void AddCLIENTRow(CLIENTRow row) {
                this.Rows.Add(row);
            }
            
            public CLIENTRow AddCLIENTRow(string CPR_ID, string FIRSTNAME, string LASTNAME, System.DateTime BIRTHDATE, string ELIGIBILITY, string SEX, string SSN, string PHONE, string ADDRESS, string CITY, string STATE, string ZIP) {
                CLIENTRow rowCLIENTRow = ((CLIENTRow)(this.NewRow()));
                rowCLIENTRow.ItemArray = new object[] {
                        CPR_ID,
                        FIRSTNAME,
                        LASTNAME,
                        BIRTHDATE,
                        ELIGIBILITY,
                        SEX,
                        SSN,
                        PHONE,
                        ADDRESS,
                        CITY,
                        STATE,
                        ZIP};
                this.Rows.Add(rowCLIENTRow);
                return rowCLIENTRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                CLIENTDataTable cln = ((CLIENTDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new CLIENTDataTable();
            }
            
            internal void InitVars() {
                this.columnCPR_ID = this.Columns["CPR_ID"];
                this.columnFIRSTNAME = this.Columns["FIRSTNAME"];
                this.columnLASTNAME = this.Columns["LASTNAME"];
                this.columnBIRTHDATE = this.Columns["BIRTHDATE"];
                this.columnELIGIBILITY = this.Columns["ELIGIBILITY"];
                this.columnSEX = this.Columns["SEX"];
                this.columnSSN = this.Columns["SSN"];
                this.columnPHONE = this.Columns["PHONE"];
                this.columnADDRESS = this.Columns["ADDRESS"];
                this.columnCITY = this.Columns["CITY"];
                this.columnSTATE = this.Columns["STATE"];
                this.columnZIP = this.Columns["ZIP"];
            }
            
            private void InitClass() {
                this.columnCPR_ID = new DataColumn("CPR_ID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCPR_ID);
                this.columnFIRSTNAME = new DataColumn("FIRSTNAME", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFIRSTNAME);
                this.columnLASTNAME = new DataColumn("LASTNAME", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLASTNAME);
                this.columnBIRTHDATE = new DataColumn("BIRTHDATE", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBIRTHDATE);
                this.columnELIGIBILITY = new DataColumn("ELIGIBILITY", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnELIGIBILITY);
                this.columnSEX = new DataColumn("SEX", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSEX);
                this.columnSSN = new DataColumn("SSN", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSSN);
                this.columnPHONE = new DataColumn("PHONE", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPHONE);
                this.columnADDRESS = new DataColumn("ADDRESS", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnADDRESS);
                this.columnCITY = new DataColumn("CITY", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCITY);
                this.columnSTATE = new DataColumn("STATE", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSTATE);
                this.columnZIP = new DataColumn("ZIP", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnZIP);
                this.Constraints.Add(new UniqueConstraint("GRITSDataKey1", new DataColumn[] {
                                this.columnCPR_ID}, false));
                this.columnCPR_ID.AllowDBNull = false;
                this.columnCPR_ID.Unique = true;
            }
            
            public CLIENTRow NewCLIENTRow() {
                return ((CLIENTRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new CLIENTRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(CLIENTRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CLIENTRowChanged != null)) {
                    this.CLIENTRowChanged(this, new CLIENTRowChangeEvent(((CLIENTRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CLIENTRowChanging != null)) {
                    this.CLIENTRowChanging(this, new CLIENTRowChangeEvent(((CLIENTRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CLIENTRowDeleted != null)) {
                    this.CLIENTRowDeleted(this, new CLIENTRowChangeEvent(((CLIENTRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CLIENTRowDeleting != null)) {
                    this.CLIENTRowDeleting(this, new CLIENTRowChangeEvent(((CLIENTRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCLIENTRow(CLIENTRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CLIENTRow : DataRow {
            
            private CLIENTDataTable tableCLIENT;
            
            internal CLIENTRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableCLIENT = ((CLIENTDataTable)(this.Table));
            }
            
            public string CPR_ID {
                get {
                    return ((string)(this[this.tableCLIENT.CPR_IDColumn]));
                }
                set {
                    this[this.tableCLIENT.CPR_IDColumn] = value;
                }
            }
            
            public string FIRSTNAME {
                get {
                    try {
                        return ((string)(this[this.tableCLIENT.FIRSTNAMEColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCLIENT.FIRSTNAMEColumn] = value;
                }
            }
            
            public string LASTNAME {
                get {
                    try {
                        return ((string)(this[this.tableCLIENT.LASTNAMEColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCLIENT.LASTNAMEColumn] = value;
                }
            }
            
            public System.DateTime BIRTHDATE {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableCLIENT.BIRTHDATEColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCLIENT.BIRTHDATEColumn] = value;
                }
            }
            
            public string ELIGIBILITY {
                get {
                    try {
                        return ((string)(this[this.tableCLIENT.ELIGIBILITYColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCLIENT.ELIGIBILITYColumn] = value;
                }
            }
            
            public string SEX {
                get {
                    try {
                        return ((string)(this[this.tableCLIENT.SEXColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCLIENT.SEXColumn] = value;
                }
            }
            
            public string SSN {
                get {
                    try {
                        return ((string)(this[this.tableCLIENT.SSNColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCLIENT.SSNColumn] = value;
                }
            }
            
            public string PHONE {
                get {
                    try {
                        return ((string)(this[this.tableCLIENT.PHONEColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCLIENT.PHONEColumn] = value;
                }
            }
            
            public string ADDRESS {
                get {
                    try {
                        return ((string)(this[this.tableCLIENT.ADDRESSColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCLIENT.ADDRESSColumn] = value;
                }
            }
            
            public string CITY {
                get {
                    try {
                        return ((string)(this[this.tableCLIENT.CITYColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCLIENT.CITYColumn] = value;
                }
            }
            
            public string STATE {
                get {
                    try {
                        return ((string)(this[this.tableCLIENT.STATEColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCLIENT.STATEColumn] = value;
                }
            }
            
            public string ZIP {
                get {
                    try {
                        return ((string)(this[this.tableCLIENT.ZIPColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCLIENT.ZIPColumn] = value;
                }
            }
            
            public bool IsFIRSTNAMENull() {
                return this.IsNull(this.tableCLIENT.FIRSTNAMEColumn);
            }
            
            public void SetFIRSTNAMENull() {
                this[this.tableCLIENT.FIRSTNAMEColumn] = System.Convert.DBNull;
            }
            
            public bool IsLASTNAMENull() {
                return this.IsNull(this.tableCLIENT.LASTNAMEColumn);
            }
            
            public void SetLASTNAMENull() {
                this[this.tableCLIENT.LASTNAMEColumn] = System.Convert.DBNull;
            }
            
            public bool IsBIRTHDATENull() {
                return this.IsNull(this.tableCLIENT.BIRTHDATEColumn);
            }
            
            public void SetBIRTHDATENull() {
                this[this.tableCLIENT.BIRTHDATEColumn] = System.Convert.DBNull;
            }
            
            public bool IsELIGIBILITYNull() {
                return this.IsNull(this.tableCLIENT.ELIGIBILITYColumn);
            }
            
            public void SetELIGIBILITYNull() {
                this[this.tableCLIENT.ELIGIBILITYColumn] = System.Convert.DBNull;
            }
            
            public bool IsSEXNull() {
                return this.IsNull(this.tableCLIENT.SEXColumn);
            }
            
            public void SetSEXNull() {
                this[this.tableCLIENT.SEXColumn] = System.Convert.DBNull;
            }
            
            public bool IsSSNNull() {
                return this.IsNull(this.tableCLIENT.SSNColumn);
            }
            
            public void SetSSNNull() {
                this[this.tableCLIENT.SSNColumn] = System.Convert.DBNull;
            }
            
            public bool IsPHONENull() {
                return this.IsNull(this.tableCLIENT.PHONEColumn);
            }
            
            public void SetPHONENull() {
                this[this.tableCLIENT.PHONEColumn] = System.Convert.DBNull;
            }
            
            public bool IsADDRESSNull() {
                return this.IsNull(this.tableCLIENT.ADDRESSColumn);
            }
            
            public void SetADDRESSNull() {
                this[this.tableCLIENT.ADDRESSColumn] = System.Convert.DBNull;
            }
            
            public bool IsCITYNull() {
                return this.IsNull(this.tableCLIENT.CITYColumn);
            }
            
            public void SetCITYNull() {
                this[this.tableCLIENT.CITYColumn] = System.Convert.DBNull;
            }
            
            public bool IsSTATENull() {
                return this.IsNull(this.tableCLIENT.STATEColumn);
            }
            
            public void SetSTATENull() {
                this[this.tableCLIENT.STATEColumn] = System.Convert.DBNull;
            }
            
            public bool IsZIPNull() {
                return this.IsNull(this.tableCLIENT.ZIPColumn);
            }
            
            public void SetZIPNull() {
                this[this.tableCLIENT.ZIPColumn] = System.Convert.DBNull;
            }
            
            public ENCOUNTERRow[] GetENCOUNTERRows() {
                return ((ENCOUNTERRow[])(this.GetChildRows(this.Table.ChildRelations["CLIENTENCOUNTER"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CLIENTRowChangeEvent : EventArgs {
            
            private CLIENTRow eventRow;
            
            private DataRowAction eventAction;
            
            public CLIENTRowChangeEvent(CLIENTRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public CLIENTRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ENCOUNTERDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnCPR_ID;
            
            private DataColumn columnENCOUNTER_ID;
            
            internal ENCOUNTERDataTable() : 
                    base("ENCOUNTER") {
                this.InitClass();
            }
            
            internal ENCOUNTERDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn CPR_IDColumn {
                get {
                    return this.columnCPR_ID;
                }
            }
            
            internal DataColumn ENCOUNTER_IDColumn {
                get {
                    return this.columnENCOUNTER_ID;
                }
            }
            
            public ENCOUNTERRow this[int index] {
                get {
                    return ((ENCOUNTERRow)(this.Rows[index]));
                }
            }
            
            public event ENCOUNTERRowChangeEventHandler ENCOUNTERRowChanged;
            
            public event ENCOUNTERRowChangeEventHandler ENCOUNTERRowChanging;
            
            public event ENCOUNTERRowChangeEventHandler ENCOUNTERRowDeleted;
            
            public event ENCOUNTERRowChangeEventHandler ENCOUNTERRowDeleting;
            
            public void AddENCOUNTERRow(ENCOUNTERRow row) {
                this.Rows.Add(row);
            }
            
            public ENCOUNTERRow AddENCOUNTERRow(CLIENTRow parentCLIENTRowByCLIENTENCOUNTER, int ENCOUNTER_ID) {
                ENCOUNTERRow rowENCOUNTERRow = ((ENCOUNTERRow)(this.NewRow()));
                rowENCOUNTERRow.ItemArray = new object[] {
                        parentCLIENTRowByCLIENTENCOUNTER[0],
                        ENCOUNTER_ID};
                this.Rows.Add(rowENCOUNTERRow);
                return rowENCOUNTERRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ENCOUNTERDataTable cln = ((ENCOUNTERDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ENCOUNTERDataTable();
            }
            
            internal void InitVars() {
                this.columnCPR_ID = this.Columns["CPR_ID"];
                this.columnENCOUNTER_ID = this.Columns["ENCOUNTER_ID"];
            }
            
            private void InitClass() {
                this.columnCPR_ID = new DataColumn("CPR_ID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCPR_ID);
                this.columnENCOUNTER_ID = new DataColumn("ENCOUNTER_ID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnENCOUNTER_ID);
                this.Constraints.Add(new UniqueConstraint("GRITSDataKey2", new DataColumn[] {
                                this.columnCPR_ID,
                                this.columnENCOUNTER_ID}, false));
                this.columnCPR_ID.AllowDBNull = false;
                this.columnENCOUNTER_ID.AllowDBNull = false;
            }
            
            public ENCOUNTERRow NewENCOUNTERRow() {
                return ((ENCOUNTERRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ENCOUNTERRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ENCOUNTERRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ENCOUNTERRowChanged != null)) {
                    this.ENCOUNTERRowChanged(this, new ENCOUNTERRowChangeEvent(((ENCOUNTERRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ENCOUNTERRowChanging != null)) {
                    this.ENCOUNTERRowChanging(this, new ENCOUNTERRowChangeEvent(((ENCOUNTERRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ENCOUNTERRowDeleted != null)) {
                    this.ENCOUNTERRowDeleted(this, new ENCOUNTERRowChangeEvent(((ENCOUNTERRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ENCOUNTERRowDeleting != null)) {
                    this.ENCOUNTERRowDeleting(this, new ENCOUNTERRowChangeEvent(((ENCOUNTERRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveENCOUNTERRow(ENCOUNTERRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ENCOUNTERRow : DataRow {
            
            private ENCOUNTERDataTable tableENCOUNTER;
            
            internal ENCOUNTERRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableENCOUNTER = ((ENCOUNTERDataTable)(this.Table));
            }
            
            public string CPR_ID {
                get {
                    return ((string)(this[this.tableENCOUNTER.CPR_IDColumn]));
                }
                set {
                    this[this.tableENCOUNTER.CPR_IDColumn] = value;
                }
            }
            
            public int ENCOUNTER_ID {
                get {
                    return ((int)(this[this.tableENCOUNTER.ENCOUNTER_IDColumn]));
                }
                set {
                    this[this.tableENCOUNTER.ENCOUNTER_IDColumn] = value;
                }
            }
            
            public CLIENTRow CLIENTRow {
                get {
                    return ((CLIENTRow)(this.GetParentRow(this.Table.ParentRelations["CLIENTENCOUNTER"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CLIENTENCOUNTER"]);
                }
            }
            
            public VACCINERow[] GetVACCINERows() {
                return ((VACCINERow[])(this.GetChildRows(this.Table.ChildRelations["ENCOUNTERVACCINE"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ENCOUNTERRowChangeEvent : EventArgs {
            
            private ENCOUNTERRow eventRow;
            
            private DataRowAction eventAction;
            
            public ENCOUNTERRowChangeEvent(ENCOUNTERRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ENCOUNTERRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class VACCINEDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnCPR_ID;
            
            private DataColumn columnENCOUNTER_ID;
            
            private DataColumn columnTREATMENT_ID;
            
            private DataColumn columnVACCINE_DATE;
            
            private DataColumn columnCPT_CODE;
            
            private DataColumn columnPROVIDER;
            
            private DataColumn columnCLINIC;
            
            private DataColumn columnLOTNUMBER;
            
            private DataColumn columnCOMMON_NAME;
            
            internal VACCINEDataTable() : 
                    base("VACCINE") {
                this.InitClass();
            }
            
            internal VACCINEDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn CPR_IDColumn {
                get {
                    return this.columnCPR_ID;
                }
            }
            
            internal DataColumn ENCOUNTER_IDColumn {
                get {
                    return this.columnENCOUNTER_ID;
                }
            }
            
            internal DataColumn TREATMENT_IDColumn {
                get {
                    return this.columnTREATMENT_ID;
                }
            }
            
            internal DataColumn VACCINE_DATEColumn {
                get {
                    return this.columnVACCINE_DATE;
                }
            }
            
            internal DataColumn CPT_CODEColumn {
                get {
                    return this.columnCPT_CODE;
                }
            }
            
            internal DataColumn PROVIDERColumn {
                get {
                    return this.columnPROVIDER;
                }
            }
            
            internal DataColumn CLINICColumn {
                get {
                    return this.columnCLINIC;
                }
            }
            
            internal DataColumn LOTNUMBERColumn {
                get {
                    return this.columnLOTNUMBER;
                }
            }
            
            internal DataColumn COMMON_NAMEColumn {
                get {
                    return this.columnCOMMON_NAME;
                }
            }
            
            public VACCINERow this[int index] {
                get {
                    return ((VACCINERow)(this.Rows[index]));
                }
            }
            
            public event VACCINERowChangeEventHandler VACCINERowChanged;
            
            public event VACCINERowChangeEventHandler VACCINERowChanging;
            
            public event VACCINERowChangeEventHandler VACCINERowDeleted;
            
            public event VACCINERowChangeEventHandler VACCINERowDeleting;
            
            public void AddVACCINERow(VACCINERow row) {
                this.Rows.Add(row);
            }
            
            public VACCINERow AddVACCINERow(string CPR_ID, int ENCOUNTER_ID, int TREATMENT_ID, System.DateTime VACCINE_DATE, string CPT_CODE, string PROVIDER, string CLINIC, string LOTNUMBER, string COMMON_NAME) {
                VACCINERow rowVACCINERow = ((VACCINERow)(this.NewRow()));
                rowVACCINERow.ItemArray = new object[] {
                        CPR_ID,
                        ENCOUNTER_ID,
                        TREATMENT_ID,
                        VACCINE_DATE,
                        CPT_CODE,
                        PROVIDER,
                        CLINIC,
                        LOTNUMBER,
                        COMMON_NAME};
                this.Rows.Add(rowVACCINERow);
                return rowVACCINERow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                VACCINEDataTable cln = ((VACCINEDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new VACCINEDataTable();
            }
            
            internal void InitVars() {
                this.columnCPR_ID = this.Columns["CPR_ID"];
                this.columnENCOUNTER_ID = this.Columns["ENCOUNTER_ID"];
                this.columnTREATMENT_ID = this.Columns["TREATMENT_ID"];
                this.columnVACCINE_DATE = this.Columns["VACCINE_DATE"];
                this.columnCPT_CODE = this.Columns["CPT_CODE"];
                this.columnPROVIDER = this.Columns["PROVIDER"];
                this.columnCLINIC = this.Columns["CLINIC"];
                this.columnLOTNUMBER = this.Columns["LOTNUMBER"];
                this.columnCOMMON_NAME = this.Columns["COMMON_NAME"];
            }
            
            private void InitClass() {
                this.columnCPR_ID = new DataColumn("CPR_ID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCPR_ID);
                this.columnENCOUNTER_ID = new DataColumn("ENCOUNTER_ID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnENCOUNTER_ID);
                this.columnTREATMENT_ID = new DataColumn("TREATMENT_ID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTREATMENT_ID);
                this.columnVACCINE_DATE = new DataColumn("VACCINE_DATE", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnVACCINE_DATE);
                this.columnCPT_CODE = new DataColumn("CPT_CODE", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCPT_CODE);
                this.columnPROVIDER = new DataColumn("PROVIDER", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPROVIDER);
                this.columnCLINIC = new DataColumn("CLINIC", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCLINIC);
                this.columnLOTNUMBER = new DataColumn("LOTNUMBER", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLOTNUMBER);
                this.columnCOMMON_NAME = new DataColumn("COMMON_NAME", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCOMMON_NAME);
                this.Constraints.Add(new UniqueConstraint("GRITSDataKey3", new DataColumn[] {
                                this.columnCPR_ID,
                                this.columnENCOUNTER_ID,
                                this.columnTREATMENT_ID}, false));
                this.columnCPR_ID.AllowDBNull = false;
                this.columnENCOUNTER_ID.AllowDBNull = false;
                this.columnTREATMENT_ID.AllowDBNull = false;
            }
            
            public VACCINERow NewVACCINERow() {
                return ((VACCINERow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new VACCINERow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(VACCINERow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.VACCINERowChanged != null)) {
                    this.VACCINERowChanged(this, new VACCINERowChangeEvent(((VACCINERow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.VACCINERowChanging != null)) {
                    this.VACCINERowChanging(this, new VACCINERowChangeEvent(((VACCINERow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.VACCINERowDeleted != null)) {
                    this.VACCINERowDeleted(this, new VACCINERowChangeEvent(((VACCINERow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.VACCINERowDeleting != null)) {
                    this.VACCINERowDeleting(this, new VACCINERowChangeEvent(((VACCINERow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveVACCINERow(VACCINERow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class VACCINERow : DataRow {
            
            private VACCINEDataTable tableVACCINE;
            
            internal VACCINERow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableVACCINE = ((VACCINEDataTable)(this.Table));
            }
            
            public string CPR_ID {
                get {
                    return ((string)(this[this.tableVACCINE.CPR_IDColumn]));
                }
                set {
                    this[this.tableVACCINE.CPR_IDColumn] = value;
                }
            }
            
            public int ENCOUNTER_ID {
                get {
                    return ((int)(this[this.tableVACCINE.ENCOUNTER_IDColumn]));
                }
                set {
                    this[this.tableVACCINE.ENCOUNTER_IDColumn] = value;
                }
            }
            
            public int TREATMENT_ID {
                get {
                    return ((int)(this[this.tableVACCINE.TREATMENT_IDColumn]));
                }
                set {
                    this[this.tableVACCINE.TREATMENT_IDColumn] = value;
                }
            }
            
            public System.DateTime VACCINE_DATE {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableVACCINE.VACCINE_DATEColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVACCINE.VACCINE_DATEColumn] = value;
                }
            }
            
            public string CPT_CODE {
                get {
                    try {
                        return ((string)(this[this.tableVACCINE.CPT_CODEColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVACCINE.CPT_CODEColumn] = value;
                }
            }
            
            public string PROVIDER {
                get {
                    try {
                        return ((string)(this[this.tableVACCINE.PROVIDERColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVACCINE.PROVIDERColumn] = value;
                }
            }
            
            public string CLINIC {
                get {
                    try {
                        return ((string)(this[this.tableVACCINE.CLINICColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVACCINE.CLINICColumn] = value;
                }
            }
            
            public string LOTNUMBER {
                get {
                    try {
                        return ((string)(this[this.tableVACCINE.LOTNUMBERColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVACCINE.LOTNUMBERColumn] = value;
                }
            }
            
            public string COMMON_NAME {
                get {
                    try {
                        return ((string)(this[this.tableVACCINE.COMMON_NAMEColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVACCINE.COMMON_NAMEColumn] = value;
                }
            }
            
            public ENCOUNTERRow ENCOUNTERRowParent {
                get {
                    return ((ENCOUNTERRow)(this.GetParentRow(this.Table.ParentRelations["ENCOUNTERVACCINE"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ENCOUNTERVACCINE"]);
                }
            }
            
            public bool IsVACCINE_DATENull() {
                return this.IsNull(this.tableVACCINE.VACCINE_DATEColumn);
            }
            
            public void SetVACCINE_DATENull() {
                this[this.tableVACCINE.VACCINE_DATEColumn] = System.Convert.DBNull;
            }
            
            public bool IsCPT_CODENull() {
                return this.IsNull(this.tableVACCINE.CPT_CODEColumn);
            }
            
            public void SetCPT_CODENull() {
                this[this.tableVACCINE.CPT_CODEColumn] = System.Convert.DBNull;
            }
            
            public bool IsPROVIDERNull() {
                return this.IsNull(this.tableVACCINE.PROVIDERColumn);
            }
            
            public void SetPROVIDERNull() {
                this[this.tableVACCINE.PROVIDERColumn] = System.Convert.DBNull;
            }
            
            public bool IsCLINICNull() {
                return this.IsNull(this.tableVACCINE.CLINICColumn);
            }
            
            public void SetCLINICNull() {
                this[this.tableVACCINE.CLINICColumn] = System.Convert.DBNull;
            }
            
            public bool IsLOTNUMBERNull() {
                return this.IsNull(this.tableVACCINE.LOTNUMBERColumn);
            }
            
            public void SetLOTNUMBERNull() {
                this[this.tableVACCINE.LOTNUMBERColumn] = System.Convert.DBNull;
            }
            
            public bool IsCOMMON_NAMENull() {
                return this.IsNull(this.tableVACCINE.COMMON_NAMEColumn);
            }
            
            public void SetCOMMON_NAMENull() {
                this[this.tableVACCINE.COMMON_NAMEColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class VACCINERowChangeEvent : EventArgs {
            
            private VACCINERow eventRow;
            
            private DataRowAction eventAction;
            
            public VACCINERowChangeEvent(VACCINERow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public VACCINERow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
