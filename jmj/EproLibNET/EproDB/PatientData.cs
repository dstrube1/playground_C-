//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace EproDB {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class PatientData : DataSet {
        
        private PatientDataTable tablePatient;
        
        public PatientData() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected PatientData(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Patient"] != null)) {
                    this.Tables.Add(new PatientDataTable(ds.Tables["Patient"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PatientDataTable Patient {
            get {
                return this.tablePatient;
            }
        }
        
        public override DataSet Clone() {
            PatientData cln = ((PatientData)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Patient"] != null)) {
                this.Tables.Add(new PatientDataTable(ds.Tables["Patient"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tablePatient = ((PatientDataTable)(this.Tables["Patient"]));
            if ((this.tablePatient != null)) {
                this.tablePatient.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "PatientData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/PatientData.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tablePatient = new PatientDataTable();
            this.Tables.Add(this.tablePatient);
        }
        
        private bool ShouldSerializePatient() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void PatientRowChangeEventHandler(object sender, PatientRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PatientDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columncpr_id;
            
            private DataColumn columnbilling_id;
            
            private DataColumn columnlast_name;
            
            private DataColumn columnmiddle_name;
            
            private DataColumn columnfirst_name;
            
            private DataColumn columndate_of_birth;
            
            private DataColumn columnphone_number;
            
            private DataColumn columnaddress_line_1;
            
            private DataColumn columnaddress_line_2;
            
            private DataColumn columncity;
            
            private DataColumn columnstate;
            
            private DataColumn columnzip;
            
            private DataColumn columnprimary_provider_id;
            
            private DataColumn columnuser_full_name;
            
            internal PatientDataTable() : 
                    base("Patient") {
                this.InitClass();
            }
            
            internal PatientDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn cpr_idColumn {
                get {
                    return this.columncpr_id;
                }
            }
            
            internal DataColumn billing_idColumn {
                get {
                    return this.columnbilling_id;
                }
            }
            
            internal DataColumn last_nameColumn {
                get {
                    return this.columnlast_name;
                }
            }
            
            internal DataColumn middle_nameColumn {
                get {
                    return this.columnmiddle_name;
                }
            }
            
            internal DataColumn first_nameColumn {
                get {
                    return this.columnfirst_name;
                }
            }
            
            internal DataColumn date_of_birthColumn {
                get {
                    return this.columndate_of_birth;
                }
            }
            
            internal DataColumn phone_numberColumn {
                get {
                    return this.columnphone_number;
                }
            }
            
            internal DataColumn address_line_1Column {
                get {
                    return this.columnaddress_line_1;
                }
            }
            
            internal DataColumn address_line_2Column {
                get {
                    return this.columnaddress_line_2;
                }
            }
            
            internal DataColumn cityColumn {
                get {
                    return this.columncity;
                }
            }
            
            internal DataColumn stateColumn {
                get {
                    return this.columnstate;
                }
            }
            
            internal DataColumn zipColumn {
                get {
                    return this.columnzip;
                }
            }
            
            internal DataColumn primary_provider_idColumn {
                get {
                    return this.columnprimary_provider_id;
                }
            }
            
            internal DataColumn user_full_nameColumn {
                get {
                    return this.columnuser_full_name;
                }
            }
            
            public PatientRow this[int index] {
                get {
                    return ((PatientRow)(this.Rows[index]));
                }
            }
            
            public event PatientRowChangeEventHandler PatientRowChanged;
            
            public event PatientRowChangeEventHandler PatientRowChanging;
            
            public event PatientRowChangeEventHandler PatientRowDeleted;
            
            public event PatientRowChangeEventHandler PatientRowDeleting;
            
            public void AddPatientRow(PatientRow row) {
                this.Rows.Add(row);
            }
            
            public PatientRow AddPatientRow(string cpr_id, string billing_id, string last_name, string middle_name, string first_name, System.DateTime date_of_birth, string phone_number, string address_line_1, string address_line_2, string city, string state, string zip, string primary_provider_id, string user_full_name) {
                PatientRow rowPatientRow = ((PatientRow)(this.NewRow()));
                rowPatientRow.ItemArray = new object[] {
                        cpr_id,
                        billing_id,
                        last_name,
                        middle_name,
                        first_name,
                        date_of_birth,
                        phone_number,
                        address_line_1,
                        address_line_2,
                        city,
                        state,
                        zip,
                        primary_provider_id,
                        user_full_name};
                this.Rows.Add(rowPatientRow);
                return rowPatientRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                PatientDataTable cln = ((PatientDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new PatientDataTable();
            }
            
            internal void InitVars() {
                this.columncpr_id = this.Columns["cpr_id"];
                this.columnbilling_id = this.Columns["billing_id"];
                this.columnlast_name = this.Columns["last_name"];
                this.columnmiddle_name = this.Columns["middle_name"];
                this.columnfirst_name = this.Columns["first_name"];
                this.columndate_of_birth = this.Columns["date_of_birth"];
                this.columnphone_number = this.Columns["phone_number"];
                this.columnaddress_line_1 = this.Columns["address_line_1"];
                this.columnaddress_line_2 = this.Columns["address_line_2"];
                this.columncity = this.Columns["city"];
                this.columnstate = this.Columns["state"];
                this.columnzip = this.Columns["zip"];
                this.columnprimary_provider_id = this.Columns["primary_provider_id"];
                this.columnuser_full_name = this.Columns["user_full_name"];
            }
            
            private void InitClass() {
                this.columncpr_id = new DataColumn("cpr_id", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncpr_id);
                this.columnbilling_id = new DataColumn("billing_id", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnbilling_id);
                this.columnlast_name = new DataColumn("last_name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlast_name);
                this.columnmiddle_name = new DataColumn("middle_name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnmiddle_name);
                this.columnfirst_name = new DataColumn("first_name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnfirst_name);
                this.columndate_of_birth = new DataColumn("date_of_birth", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndate_of_birth);
                this.columnphone_number = new DataColumn("phone_number", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnphone_number);
                this.columnaddress_line_1 = new DataColumn("address_line_1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnaddress_line_1);
                this.columnaddress_line_2 = new DataColumn("address_line_2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnaddress_line_2);
                this.columncity = new DataColumn("city", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncity);
                this.columnstate = new DataColumn("state", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnstate);
                this.columnzip = new DataColumn("zip", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnzip);
                this.columnprimary_provider_id = new DataColumn("primary_provider_id", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnprimary_provider_id);
                this.columnuser_full_name = new DataColumn("user_full_name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnuser_full_name);
            }
            
            public PatientRow NewPatientRow() {
                return ((PatientRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new PatientRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(PatientRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PatientRowChanged != null)) {
                    this.PatientRowChanged(this, new PatientRowChangeEvent(((PatientRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PatientRowChanging != null)) {
                    this.PatientRowChanging(this, new PatientRowChangeEvent(((PatientRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PatientRowDeleted != null)) {
                    this.PatientRowDeleted(this, new PatientRowChangeEvent(((PatientRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PatientRowDeleting != null)) {
                    this.PatientRowDeleting(this, new PatientRowChangeEvent(((PatientRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovePatientRow(PatientRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PatientRow : DataRow {
            
            private PatientDataTable tablePatient;
            
            internal PatientRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablePatient = ((PatientDataTable)(this.Table));
            }
            
            public string cpr_id {
                get {
                    try {
                        return ((string)(this[this.tablePatient.cpr_idColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatient.cpr_idColumn] = value;
                }
            }
            
            public string billing_id {
                get {
                    try {
                        return ((string)(this[this.tablePatient.billing_idColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatient.billing_idColumn] = value;
                }
            }
            
            public string last_name {
                get {
                    try {
                        return ((string)(this[this.tablePatient.last_nameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatient.last_nameColumn] = value;
                }
            }
            
            public string middle_name {
                get {
                    try {
                        return ((string)(this[this.tablePatient.middle_nameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatient.middle_nameColumn] = value;
                }
            }
            
            public string first_name {
                get {
                    try {
                        return ((string)(this[this.tablePatient.first_nameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatient.first_nameColumn] = value;
                }
            }
            
            public System.DateTime date_of_birth {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablePatient.date_of_birthColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatient.date_of_birthColumn] = value;
                }
            }
            
            public string phone_number {
                get {
                    try {
                        return ((string)(this[this.tablePatient.phone_numberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatient.phone_numberColumn] = value;
                }
            }
            
            public string address_line_1 {
                get {
                    try {
                        return ((string)(this[this.tablePatient.address_line_1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatient.address_line_1Column] = value;
                }
            }
            
            public string address_line_2 {
                get {
                    try {
                        return ((string)(this[this.tablePatient.address_line_2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatient.address_line_2Column] = value;
                }
            }
            
            public string city {
                get {
                    try {
                        return ((string)(this[this.tablePatient.cityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatient.cityColumn] = value;
                }
            }
            
            public string state {
                get {
                    try {
                        return ((string)(this[this.tablePatient.stateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatient.stateColumn] = value;
                }
            }
            
            public string zip {
                get {
                    try {
                        return ((string)(this[this.tablePatient.zipColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatient.zipColumn] = value;
                }
            }
            
            public string primary_provider_id {
                get {
                    try {
                        return ((string)(this[this.tablePatient.primary_provider_idColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatient.primary_provider_idColumn] = value;
                }
            }
            
            public string user_full_name {
                get {
                    try {
                        return ((string)(this[this.tablePatient.user_full_nameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatient.user_full_nameColumn] = value;
                }
            }
            
            public bool Iscpr_idNull() {
                return this.IsNull(this.tablePatient.cpr_idColumn);
            }
            
            public void Setcpr_idNull() {
                this[this.tablePatient.cpr_idColumn] = System.Convert.DBNull;
            }
            
            public bool Isbilling_idNull() {
                return this.IsNull(this.tablePatient.billing_idColumn);
            }
            
            public void Setbilling_idNull() {
                this[this.tablePatient.billing_idColumn] = System.Convert.DBNull;
            }
            
            public bool Islast_nameNull() {
                return this.IsNull(this.tablePatient.last_nameColumn);
            }
            
            public void Setlast_nameNull() {
                this[this.tablePatient.last_nameColumn] = System.Convert.DBNull;
            }
            
            public bool Ismiddle_nameNull() {
                return this.IsNull(this.tablePatient.middle_nameColumn);
            }
            
            public void Setmiddle_nameNull() {
                this[this.tablePatient.middle_nameColumn] = System.Convert.DBNull;
            }
            
            public bool Isfirst_nameNull() {
                return this.IsNull(this.tablePatient.first_nameColumn);
            }
            
            public void Setfirst_nameNull() {
                this[this.tablePatient.first_nameColumn] = System.Convert.DBNull;
            }
            
            public bool Isdate_of_birthNull() {
                return this.IsNull(this.tablePatient.date_of_birthColumn);
            }
            
            public void Setdate_of_birthNull() {
                this[this.tablePatient.date_of_birthColumn] = System.Convert.DBNull;
            }
            
            public bool Isphone_numberNull() {
                return this.IsNull(this.tablePatient.phone_numberColumn);
            }
            
            public void Setphone_numberNull() {
                this[this.tablePatient.phone_numberColumn] = System.Convert.DBNull;
            }
            
            public bool Isaddress_line_1Null() {
                return this.IsNull(this.tablePatient.address_line_1Column);
            }
            
            public void Setaddress_line_1Null() {
                this[this.tablePatient.address_line_1Column] = System.Convert.DBNull;
            }
            
            public bool Isaddress_line_2Null() {
                return this.IsNull(this.tablePatient.address_line_2Column);
            }
            
            public void Setaddress_line_2Null() {
                this[this.tablePatient.address_line_2Column] = System.Convert.DBNull;
            }
            
            public bool IscityNull() {
                return this.IsNull(this.tablePatient.cityColumn);
            }
            
            public void SetcityNull() {
                this[this.tablePatient.cityColumn] = System.Convert.DBNull;
            }
            
            public bool IsstateNull() {
                return this.IsNull(this.tablePatient.stateColumn);
            }
            
            public void SetstateNull() {
                this[this.tablePatient.stateColumn] = System.Convert.DBNull;
            }
            
            public bool IszipNull() {
                return this.IsNull(this.tablePatient.zipColumn);
            }
            
            public void SetzipNull() {
                this[this.tablePatient.zipColumn] = System.Convert.DBNull;
            }
            
            public bool Isprimary_provider_idNull() {
                return this.IsNull(this.tablePatient.primary_provider_idColumn);
            }
            
            public void Setprimary_provider_idNull() {
                this[this.tablePatient.primary_provider_idColumn] = System.Convert.DBNull;
            }
            
            public bool Isuser_full_nameNull() {
                return this.IsNull(this.tablePatient.user_full_nameColumn);
            }
            
            public void Setuser_full_nameNull() {
                this[this.tablePatient.user_full_nameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PatientRowChangeEvent : EventArgs {
            
            private PatientRow eventRow;
            
            private DataRowAction eventAction;
            
            public PatientRowChangeEvent(PatientRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public PatientRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
