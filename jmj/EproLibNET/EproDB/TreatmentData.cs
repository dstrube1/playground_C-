//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace EproDB {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class TreatmentData : DataSet {
        
        private TreatmentDataTable tableTreatment;
        
        public TreatmentData() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected TreatmentData(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Treatment"] != null)) {
                    this.Tables.Add(new TreatmentDataTable(ds.Tables["Treatment"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TreatmentDataTable Treatment {
            get {
                return this.tableTreatment;
            }
        }
        
        public override DataSet Clone() {
            TreatmentData cln = ((TreatmentData)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Treatment"] != null)) {
                this.Tables.Add(new TreatmentDataTable(ds.Tables["Treatment"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableTreatment = ((TreatmentDataTable)(this.Tables["Treatment"]));
            if ((this.tableTreatment != null)) {
                this.tableTreatment.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "TreatmentData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/TreatmentData.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableTreatment = new TreatmentDataTable();
            this.Tables.Add(this.tableTreatment);
        }
        
        private bool ShouldSerializeTreatment() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void TreatmentRowChangeEventHandler(object sender, TreatmentRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TreatmentDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columncpr_id;
            
            private DataColumn columnencounter_id;
            
            private DataColumn columntreatment_id;
            
            private DataColumn columntreatment_date;
            
            private DataColumn columntreatment_type;
            
            private DataColumn columntreatment_description;
            
            private DataColumn columndose_amount;
            
            private DataColumn columndose_unit;
            
            private DataColumn columnvaccine_name;
            
            private DataColumn columnvaccine_cpt_code;
            
            private DataColumn columnmaker_id;
            
            private DataColumn columnvaccine_administer_code;
            
            private DataColumn columnvaccine_administer_name;
            
            internal TreatmentDataTable() : 
                    base("Treatment") {
                this.InitClass();
            }
            
            internal TreatmentDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn cpr_idColumn {
                get {
                    return this.columncpr_id;
                }
            }
            
            internal DataColumn encounter_idColumn {
                get {
                    return this.columnencounter_id;
                }
            }
            
            internal DataColumn treatment_idColumn {
                get {
                    return this.columntreatment_id;
                }
            }
            
            internal DataColumn treatment_dateColumn {
                get {
                    return this.columntreatment_date;
                }
            }
            
            internal DataColumn treatment_typeColumn {
                get {
                    return this.columntreatment_type;
                }
            }
            
            internal DataColumn treatment_descriptionColumn {
                get {
                    return this.columntreatment_description;
                }
            }
            
            internal DataColumn dose_amountColumn {
                get {
                    return this.columndose_amount;
                }
            }
            
            internal DataColumn dose_unitColumn {
                get {
                    return this.columndose_unit;
                }
            }
            
            internal DataColumn vaccine_nameColumn {
                get {
                    return this.columnvaccine_name;
                }
            }
            
            internal DataColumn vaccine_cpt_codeColumn {
                get {
                    return this.columnvaccine_cpt_code;
                }
            }
            
            internal DataColumn maker_idColumn {
                get {
                    return this.columnmaker_id;
                }
            }
            
            internal DataColumn vaccine_administer_codeColumn {
                get {
                    return this.columnvaccine_administer_code;
                }
            }
            
            internal DataColumn vaccine_administer_nameColumn {
                get {
                    return this.columnvaccine_administer_name;
                }
            }
            
            public TreatmentRow this[int index] {
                get {
                    return ((TreatmentRow)(this.Rows[index]));
                }
            }
            
            public event TreatmentRowChangeEventHandler TreatmentRowChanged;
            
            public event TreatmentRowChangeEventHandler TreatmentRowChanging;
            
            public event TreatmentRowChangeEventHandler TreatmentRowDeleted;
            
            public event TreatmentRowChangeEventHandler TreatmentRowDeleting;
            
            public void AddTreatmentRow(TreatmentRow row) {
                this.Rows.Add(row);
            }
            
            public TreatmentRow AddTreatmentRow(string cpr_id, int encounter_id, int treatment_id, System.DateTime treatment_date, string treatment_type, string treatment_description, System.Single dose_amount, string dose_unit, string vaccine_name, string vaccine_cpt_code, string maker_id, string vaccine_administer_code, string vaccine_administer_name) {
                TreatmentRow rowTreatmentRow = ((TreatmentRow)(this.NewRow()));
                rowTreatmentRow.ItemArray = new object[] {
                        cpr_id,
                        encounter_id,
                        treatment_id,
                        treatment_date,
                        treatment_type,
                        treatment_description,
                        dose_amount,
                        dose_unit,
                        vaccine_name,
                        vaccine_cpt_code,
                        maker_id,
                        vaccine_administer_code,
                        vaccine_administer_name};
                this.Rows.Add(rowTreatmentRow);
                return rowTreatmentRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                TreatmentDataTable cln = ((TreatmentDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new TreatmentDataTable();
            }
            
            internal void InitVars() {
                this.columncpr_id = this.Columns["cpr_id"];
                this.columnencounter_id = this.Columns["encounter_id"];
                this.columntreatment_id = this.Columns["treatment_id"];
                this.columntreatment_date = this.Columns["treatment_date"];
                this.columntreatment_type = this.Columns["treatment_type"];
                this.columntreatment_description = this.Columns["treatment_description"];
                this.columndose_amount = this.Columns["dose_amount"];
                this.columndose_unit = this.Columns["dose_unit"];
                this.columnvaccine_name = this.Columns["vaccine_name"];
                this.columnvaccine_cpt_code = this.Columns["vaccine_cpt_code"];
                this.columnmaker_id = this.Columns["maker_id"];
                this.columnvaccine_administer_code = this.Columns["vaccine_administer_code"];
                this.columnvaccine_administer_name = this.Columns["vaccine_administer_name"];
            }
            
            private void InitClass() {
                this.columncpr_id = new DataColumn("cpr_id", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncpr_id);
                this.columnencounter_id = new DataColumn("encounter_id", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnencounter_id);
                this.columntreatment_id = new DataColumn("treatment_id", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntreatment_id);
                this.columntreatment_date = new DataColumn("treatment_date", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntreatment_date);
                this.columntreatment_type = new DataColumn("treatment_type", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntreatment_type);
                this.columntreatment_description = new DataColumn("treatment_description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntreatment_description);
                this.columndose_amount = new DataColumn("dose_amount", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndose_amount);
                this.columndose_unit = new DataColumn("dose_unit", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndose_unit);
                this.columnvaccine_name = new DataColumn("vaccine_name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnvaccine_name);
                this.columnvaccine_cpt_code = new DataColumn("vaccine_cpt_code", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnvaccine_cpt_code);
                this.columnmaker_id = new DataColumn("maker_id", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnmaker_id);
                this.columnvaccine_administer_code = new DataColumn("vaccine_administer_code", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnvaccine_administer_code);
                this.columnvaccine_administer_name = new DataColumn("vaccine_administer_name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnvaccine_administer_name);
            }
            
            public TreatmentRow NewTreatmentRow() {
                return ((TreatmentRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new TreatmentRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(TreatmentRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TreatmentRowChanged != null)) {
                    this.TreatmentRowChanged(this, new TreatmentRowChangeEvent(((TreatmentRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TreatmentRowChanging != null)) {
                    this.TreatmentRowChanging(this, new TreatmentRowChangeEvent(((TreatmentRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TreatmentRowDeleted != null)) {
                    this.TreatmentRowDeleted(this, new TreatmentRowChangeEvent(((TreatmentRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TreatmentRowDeleting != null)) {
                    this.TreatmentRowDeleting(this, new TreatmentRowChangeEvent(((TreatmentRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTreatmentRow(TreatmentRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TreatmentRow : DataRow {
            
            private TreatmentDataTable tableTreatment;
            
            internal TreatmentRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableTreatment = ((TreatmentDataTable)(this.Table));
            }
            
            public string cpr_id {
                get {
                    try {
                        return ((string)(this[this.tableTreatment.cpr_idColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTreatment.cpr_idColumn] = value;
                }
            }
            
            public int encounter_id {
                get {
                    try {
                        return ((int)(this[this.tableTreatment.encounter_idColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTreatment.encounter_idColumn] = value;
                }
            }
            
            public int treatment_id {
                get {
                    try {
                        return ((int)(this[this.tableTreatment.treatment_idColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTreatment.treatment_idColumn] = value;
                }
            }
            
            public System.DateTime treatment_date {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableTreatment.treatment_dateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTreatment.treatment_dateColumn] = value;
                }
            }
            
            public string treatment_type {
                get {
                    try {
                        return ((string)(this[this.tableTreatment.treatment_typeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTreatment.treatment_typeColumn] = value;
                }
            }
            
            public string treatment_description {
                get {
                    try {
                        return ((string)(this[this.tableTreatment.treatment_descriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTreatment.treatment_descriptionColumn] = value;
                }
            }
            
            public System.Single dose_amount {
                get {
                    try {
                        return ((System.Single)(this[this.tableTreatment.dose_amountColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTreatment.dose_amountColumn] = value;
                }
            }
            
            public string dose_unit {
                get {
                    try {
                        return ((string)(this[this.tableTreatment.dose_unitColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTreatment.dose_unitColumn] = value;
                }
            }
            
            public string vaccine_name {
                get {
                    try {
                        return ((string)(this[this.tableTreatment.vaccine_nameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTreatment.vaccine_nameColumn] = value;
                }
            }
            
            public string vaccine_cpt_code {
                get {
                    try {
                        return ((string)(this[this.tableTreatment.vaccine_cpt_codeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTreatment.vaccine_cpt_codeColumn] = value;
                }
            }
            
            public string maker_id {
                get {
                    try {
                        return ((string)(this[this.tableTreatment.maker_idColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTreatment.maker_idColumn] = value;
                }
            }
            
            public string vaccine_administer_code {
                get {
                    try {
                        return ((string)(this[this.tableTreatment.vaccine_administer_codeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTreatment.vaccine_administer_codeColumn] = value;
                }
            }
            
            public string vaccine_administer_name {
                get {
                    try {
                        return ((string)(this[this.tableTreatment.vaccine_administer_nameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTreatment.vaccine_administer_nameColumn] = value;
                }
            }
            
            public bool Iscpr_idNull() {
                return this.IsNull(this.tableTreatment.cpr_idColumn);
            }
            
            public void Setcpr_idNull() {
                this[this.tableTreatment.cpr_idColumn] = System.Convert.DBNull;
            }
            
            public bool Isencounter_idNull() {
                return this.IsNull(this.tableTreatment.encounter_idColumn);
            }
            
            public void Setencounter_idNull() {
                this[this.tableTreatment.encounter_idColumn] = System.Convert.DBNull;
            }
            
            public bool Istreatment_idNull() {
                return this.IsNull(this.tableTreatment.treatment_idColumn);
            }
            
            public void Settreatment_idNull() {
                this[this.tableTreatment.treatment_idColumn] = System.Convert.DBNull;
            }
            
            public bool Istreatment_dateNull() {
                return this.IsNull(this.tableTreatment.treatment_dateColumn);
            }
            
            public void Settreatment_dateNull() {
                this[this.tableTreatment.treatment_dateColumn] = System.Convert.DBNull;
            }
            
            public bool Istreatment_typeNull() {
                return this.IsNull(this.tableTreatment.treatment_typeColumn);
            }
            
            public void Settreatment_typeNull() {
                this[this.tableTreatment.treatment_typeColumn] = System.Convert.DBNull;
            }
            
            public bool Istreatment_descriptionNull() {
                return this.IsNull(this.tableTreatment.treatment_descriptionColumn);
            }
            
            public void Settreatment_descriptionNull() {
                this[this.tableTreatment.treatment_descriptionColumn] = System.Convert.DBNull;
            }
            
            public bool Isdose_amountNull() {
                return this.IsNull(this.tableTreatment.dose_amountColumn);
            }
            
            public void Setdose_amountNull() {
                this[this.tableTreatment.dose_amountColumn] = System.Convert.DBNull;
            }
            
            public bool Isdose_unitNull() {
                return this.IsNull(this.tableTreatment.dose_unitColumn);
            }
            
            public void Setdose_unitNull() {
                this[this.tableTreatment.dose_unitColumn] = System.Convert.DBNull;
            }
            
            public bool Isvaccine_nameNull() {
                return this.IsNull(this.tableTreatment.vaccine_nameColumn);
            }
            
            public void Setvaccine_nameNull() {
                this[this.tableTreatment.vaccine_nameColumn] = System.Convert.DBNull;
            }
            
            public bool Isvaccine_cpt_codeNull() {
                return this.IsNull(this.tableTreatment.vaccine_cpt_codeColumn);
            }
            
            public void Setvaccine_cpt_codeNull() {
                this[this.tableTreatment.vaccine_cpt_codeColumn] = System.Convert.DBNull;
            }
            
            public bool Ismaker_idNull() {
                return this.IsNull(this.tableTreatment.maker_idColumn);
            }
            
            public void Setmaker_idNull() {
                this[this.tableTreatment.maker_idColumn] = System.Convert.DBNull;
            }
            
            public bool Isvaccine_administer_codeNull() {
                return this.IsNull(this.tableTreatment.vaccine_administer_codeColumn);
            }
            
            public void Setvaccine_administer_codeNull() {
                this[this.tableTreatment.vaccine_administer_codeColumn] = System.Convert.DBNull;
            }
            
            public bool Isvaccine_administer_nameNull() {
                return this.IsNull(this.tableTreatment.vaccine_administer_nameColumn);
            }
            
            public void Setvaccine_administer_nameNull() {
                this[this.tableTreatment.vaccine_administer_nameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TreatmentRowChangeEvent : EventArgs {
            
            private TreatmentRow eventRow;
            
            private DataRowAction eventAction;
            
            public TreatmentRowChangeEvent(TreatmentRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TreatmentRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
