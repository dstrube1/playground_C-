<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<doc>
    <assembly>
        <name>Atalasoft.dotImage</name>
    </assembly>
    <members>
        <member name="N:Atalasoft.Imaging">
            <summary>The Atalasoft.Imaging namespace contains
general classes, exceptions, and enumerations that deal with image
data and workspaces and is the root namespace for all dotImage
classes.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.IImageReloader">
            <summary>IImageReloader provides a mechanism to bring unloaded images
back into memory. This interface is used by ImageSource.</summary>
            <remarks>Typically, an IImageReloader is created at the same time that
an image is first loaded into memory. That way the IImageReloader
can encapsulate all the information needed to bring that image back
into memory at a later time.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.IImageReloader.Reload">
            <summary>Reload an image into memory.</summary>
            <returns>An AtalaImage representing a previously loaded image.</returns>
        </member>
        <member name="T:Atalasoft.Imaging.FlipDirection">
            <summary>Specifies the flip direction.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.FlipDirection.Vertical">
            <summary>Flip Vertically.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.FlipDirection.Horizontal">
            <summary>Flip Horizontally.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.LicenseEdition">
            <summary>This enumeration indicates the type of license found by
DotImage.</summary>
            <remarks>Use the static AtalaImage.Edition property to get the license
edition.</remarks>
        </member>
        <member name="F:Atalasoft.Imaging.LicenseEdition.Standard">
            <summary>DotImage Standard Edition</summary>
        </member>
        <member name="F:Atalasoft.Imaging.LicenseEdition.Professional">
            <summary>DotImage Photo Professional</summary>
        </member>
        <member name="F:Atalasoft.Imaging.LicenseEdition.Document">
            <summary>DotImage Document Imaging</summary>
        </member>
        <member name="T:Atalasoft.Imaging.PaletteType">
            <summary>Contains the standard palette types that a palette can be set
to.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.PaletteType.Grayscale">
            <summary>The standard grayscale palette with gray colors. Entry 0
corresponds to Black and entry 255 corresponds with white, with
gray shades between.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.PaletteType.Web">
            <summary>A palette where each primitive is a multiple of 51. (0, 51,
102, 153, 204, 255). With six possible values per primitive and 3
primitives (red, green and blue) the maximum colors are 216.
(6^3=216)</summary>
        </member>
        <member name="F:Atalasoft.Imaging.PaletteType.SixteenColor">
            <summary>Standard windows 16 color palette.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.PaletteType.BlackAndWhite">
            <summary>Two color black and white palette</summary>
        </member>
        <member name="T:Atalasoft.Imaging.PixelFormat">
            <summary>Specifies the format of the color data for each pixel in the
image.</summary>
            <remarks>    The pixel format defines the number of bits of memory
    associated with one pixel of data. The format also defines the
    order of the color components within a single pixel of
    data.
    Many of the pixel formats are identical to the GDI+
    System.Drawing.PixelFormat types. DotImage is
    compatible with some of the GDI+ formats as well as including a
    few others not compatible with GDI+.</remarks>
        </member>
        <member name="F:Atalasoft.Imaging.PixelFormat.Pixel1bppIndexed">
            <summary>One bit per pixel. A two color palette defines the colors
associated with bit values of 0 and 1.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.PixelFormat.Pixel4bppIndexed">
            <summary>Four bits per pixel. A 16 color palette defines the colors
associated with each pixel.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.PixelFormat.Pixel8bppIndexed">
            <summary>Eight bits per pixel. A palette of up to 256 colors may be
used. Can contain alpha palette values.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.PixelFormat.Pixel24bppBgr">
            <summary>Twenty-four bits per pixel with pixel channels containing
Blue, Green, and Red values in that order. This is also called an
RGB image despite the order of the channels.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.PixelFormat.Pixel32bppBgra">
            <summary>Thirty-two bits per pixel with pixel channels containing
Blue, Green, Red, and Alpha values in that order. This is also
called an RGBA image despite the order of the channels.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.PixelFormat.Pixel32bppBgr">
            <summary>Thirty-two bits per pixel with pixel channels containing
Blue, Green, and Red values in that order. This is also called an
RGB image despite the order of the channels. The last channel is
unused.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.PixelFormat.Pixel8bppGrayscale">
            <summary>Eight bits per pixel. Each pixel is a shade of gray, from 0
(black) to 255 (white).</summary>
        </member>
        <member name="F:Atalasoft.Imaging.PixelFormat.Pixel16bppGrayscaleAlpha">
            <summary>Sixteen bits per pixel. A standard grayscale palette is used
where pal(0)=RGB(0,0,0) up to pal(255)=RGB(255,255,255). The second
channel contains an alpha (transparency) value for each
pixel.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.PixelFormat.Pixel32bppCmyk">
            <summary>Thirty-Two bits per pixel with pixels containing the colors
Cyan, Magenta, Yellow, and Black. This is a subtractive colorspace
with 0, 0, 0, 0 corresponding to pure white and 255, 255, 255, 255
corresponding to pure black.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.PixelFormat.Pixel16bppGrayscale">
            <summary>Sixteen bits per component. This format allows for greater
detailed grayscale images. Each pixel can have a value from 0
(black) to 65535 (white).</summary>
        </member>
        <member name="F:Atalasoft.Imaging.PixelFormat.Pixel48bppBgr">
            <summary>Fourty-Eight bits per pixel with pixel channels containing
Blue, Green and Red. This is a two byte per component image with
values ranging from 0 to 65535 for each color component.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.PixelFormat.Pixel64bppBgra">
            <summary>Sixty-Four bits per pixel with pixel channels containing
Blue, Green, Red and Alpha values in that order. This is a two byte
per component image with values ranging from 0 to 65535 for each
color component.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ResolutionUnit">
            <summary>Defines the units associated with Resolution, or Dpi.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ResolutionUnit.Undefined">
            <summary>Units are not defined.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ResolutionUnit.DotsPerInch">
            <summary>Units are expressed in inches.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ResolutionUnit.DotsPerCentimeters">
            <summary>Units are expressed in centimeters.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128._ctor(System.String,System.Int32)">
            <summary>Constructor</summary>
            <param name="value">input string</param>
            <param name="radix">base</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.IntValue">
            <summary>Returns the lowest 4 bytes of the BigInteger as an
Integer.</summary>
            <returns/>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.LongValue">
            <summary>Returns the lowest 8 bytes of the BigInteger as a
Long.</summary>
            <returns/>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.op_Addition(Atalasoft.Imaging.AtalaInt128,Atalasoft.Imaging.AtalaInt128)">
            <summary>operator overloading +</summary>
            <returns>AtalaInt128</returns>
            <param name="bi1">AtalaInt128</param>
            <param name="bi2">AtalaInt128</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.ToHexString">
            <summary>Returns a hex string with the contents of the
AtalaInt128.</summary>
            <returns/>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.ToString">
            <summary>Returns a string representing the Atala128 in base 10.</summary>
            <returns/>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.ToString(System.Int32)">
            <summary>Returns a string representing the AtalaInt128 in
sign-and-magnitude format in the specified radix.</summary>
            <returns/>
        </member>
        <member name="T:Atalasoft.Imaging.Dpi">
            <summary>Holds the Resolution information.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Dpi._ctor(System.Int32,System.Int32,Atalasoft.Imaging.ResolutionUnit)">
            <summary>Create a new Dpi structure at a specified resolution.</summary>
            <param name="x">Horizontal Resolution.</param>
            <param name="y">Vertical Resolution.</param>
            <param name="units">Resolution Units.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Dpi.Units">
            <summary>Gets or sets the resolution Units.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Dpi.X">
            <summary>Gets or sets the horizontal resolution.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Dpi.Y">
            <summary>Gets or sets the vertical resolution.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.AtalaFileStream">
            <summary>A custom Stream object that is used to read and write images
to a file. This is the default stream object used when specifying
filenames for images.</summary>
            <remarks>This File Stream object is approximately 20 faster than the
System.IO.FileStream object for loading
images.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaFileStream._ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>Initializes a new instance of
AtalaFileStream.</summary>
            <param name="fileName">The file name that this stream will write to or read
from.</param>
            <param name="fileMode">Specifies how the operating system should open the file to
read or write.</param>
            <param name="fileAccess">Specified if the file is read, write, or read/write.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaFileStream.Close">
            <summary>Closes the stream.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaFileStream.Dispose">
            <summary>This will dispose of any resources used by the stream.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaFileStream.Flush">
            <summary>Forces any unwritten data to be committed.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaFileStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>Reads data from the stream into a byte array.</summary>
            <returns>The number of bytes read.</returns>
            <param name="buffer">The byte array that will hold the image data.</param>
            <param name="offset">The starting position in the byte array to begin storing
data.</param>
            <param name="count">The number of bytes to read.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaFileStream.Seek">
            <summary>Moves the file pointer for an open stream.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaFileStream.Seek">
            <summary>Moves the file pointer to the beginning of the stream.</summary>
            <returns>The new position within the file.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaFileStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>Moves the file pointer to a specific position within the
stream.</summary>
            <returns>The new position within the file.</returns>
            <param name="offset">The number of bytes to move the pointer.</param>
            <param name="origin">Specifies whether the offset is from the beginning,
end or current position.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaFileStream.SetLength(System.Int64)">
            <summary>Sets the size of the stream.</summary>
            <remarks>If the length is less than the current stream size,
data on the end of the stream will be truncated.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaFileStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>Writes data to the stream.</summary>
            <param name="buffer">A byte array containing the data to write.</param>
            <param name="offset">The starting position within the buffer to begin writing
from.</param>
            <param name="count">The number of bytes to write.</param>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaFileStream.CanRead">
            <summary>Gets a value indicating if the stream can be read.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaFileStream.CanSeek">
            <summary>Gets a value indicating if the steam is seekable.</summary>
            <remarks>This property also indicates whether the Length and Position
properties can be used.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaFileStream.CanWrite">
            <summary>Gets a value indicating if the stream can be written
to.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaFileStream.Handle">
            <summary>Gets or sets the unmanaged handle to the file stream.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaFileStream.Length">
            <summary>Gets the length of the stream in bytes.</summary>
            <remarks>The CanSeek property must return true before you can get the
length of the stream.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaFileStream.Name">
            <summary>Gets the name of the file for this stream.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaFileStream.Position">
            <summary>Gets the current position of the stream pointer.</summary>
            <remarks>The CanSeek property must return true before you can access
the Position of the stream.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.AtalaImage">
            <summary>The AtalaImage object holds the raw image
data, a Palette, and methods used to access this
data.</summary>
            <remarks>    Image data is stored in a 32-bit row aligned buffer. See
    ToDib and FromDib for methods that will export or import from a
    DIB (Device Independent Bitmap).
    The AtalaImage is used throughout
    Atalasoft dotImage and is similar to the
    Bitmap object in .NET.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage._ctor">
            <summary>    Initializes a new instance of the AtalaImage
    class.Creates a new instance of AtalaImage.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage._ctor">
            <summary>    Initializes a new instance of the AtalaImage
    class.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage._ctor(System.Int32,System.Int32,Atalasoft.Imaging.PixelFormat)">
            <summary>Initialize a new instance of the AtalaImage class specifying
the Width, Height, and PixelFormat.</summary>
            <remarks>The image data is not set to a particular color and might end
up with some noise in the image. See the overload with a specific
color or palette index to fill the background with a specified
color.</remarks>
            <param name="width">Width of the image.</param>
            <param name="height">Height of the image.</param>
            <param name="pixelFormat">PixelFormat of the image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage._ctor(System.Int32,System.Int32,Atalasoft.Imaging.PixelFormat,System.Byte)">
            <summary>Initialize a new instance of the AtalaImage
class specifying the Width, Height, PixelFormat, and palette index
to initialize the image background to.</summary>
            <param name="width">Width of the image.</param>
            <param name="height">Height of the image.</param>
            <param name="pixelFormat">PixelFormat of the image.</param>
            <param name="fillPaletteIndex">The palette index to fill the image with.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage._ctor(System.Int32,System.Int32,Atalasoft.Imaging.PixelFormat,System.Drawing.Color)">
            <summary>Initialize a new instance of the AtalaImage class specifying
the Width, Height, PixelFormat, and Color to initialize the image
background to.</summary>
            <param name="width">Width of the image.</param>
            <param name="height">Height of the image.</param>
            <param name="pixelFormat">PixelFormat of the image.</param>
            <param name="fillColor">The color to fill the image with.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage._ctor(System.IntPtr,System.Int32,System.Int32,Atalasoft.Imaging.PixelFormat)">
            <summary>Initialize a new instance of the AtalaImage class specifying
the image pointer, Width, Height, and PixelFormat.</summary>
            <remarks>    This constructor can be used to create an
    AtalaImage object from existing image data.
    The memory pointer will be managed by the
    AtalaImage object, so do not free the memory
    once the pointer is assigned to this object.
    The RowStride of the image data must be 32-bit (DWORD)
    aligned.</remarks>
            <param name="imageData">The memory pointer of the image bits of an unpacked DIB
(Device Independent Bitmap).</param>
            <param name="width">Width of the image.</param>
            <param name="height">Height of the image.</param>
            <param name="pixelFormat">PixelFormat of the image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage._ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates an instance of an AtalaImage, with
serialization info.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage._ctor(System.IO.Stream)">
            <summary>Initialize a new instance of a AtalaImage
class specifying a Stream.</summary>
            <remarks>The stream passed in can be a FileStream,
MemoryStream, or other seekable stream. The
appropriate ImageDecoder will be used to read the
image.</remarks>
            <param name="stream">A stream containing the encoded image data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage._ctor(System.IO.Stream,System.Int32,Atalasoft.Imaging.Codec.ImageDecoder,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Initialize a new instance of an AtalaImage
class specifying a Stream,
ImageDecoder to use for decoding the image, and a
progress delegate.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
            <param name="frameIndex">If the image contains multiple frames, this is the zero based
index to load.</param>
            <param name="decoder">The ImageDecoder to use for loading the
specified encoded image.</param>
            <param name="progress">The progress delegate. Can be set to null
(Nothing in Visual Basic).</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage._ctor(System.IO.Stream,System.Int32,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Initialize a new instance of an AtalaImage
class specifying an image Stream and a page index
to decode.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
            <param name="frameIndex">If the image contains multiple frames, this is the zero based
index to load.</param>
            <param name="progress">The progress delegate. Can be set to null
(Nothing in Visual Basic).</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage._ctor(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Initialize a new instance of a AtalaImage class specifying a
Stream and a progress delegate.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
            <param name="progress">The progress delegate. Can be set to null
(Nothing in VB).</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage._ctor(System.String)">
            <summary>Initialize a new instance of a AtalaImage class specifying
the file of the image to open.</summary>
            <remarks>A URL formatted string can be passed to download a file. If
the address is pointing to an FTP site, you may need to include the
username and password in the URL to allow access to the file. The
format for this would be
"ftp://username:password@ftp.mysite.com".</remarks>
            <param name="fileName">The path of the file to open.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage._ctor(System.String,System.Int32,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Initialize a new instance of an AtalaImage
class specifying an image file and a page index to decode.</summary>
            <param name="fileName">The path of the file to open.</param>
            <param name="frameIndex">If the image contains multiple frames, this is the zero based
index to load.</param>
            <param name="progress">The progress delegate. Can be set to null
(Nothing in Visual Basic).</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage._ctor(System.String,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Initialize a new instance of a AtalaImage class specifying
the file of the image to open and a progress delegate.</summary>
            <remarks>A URL formatted string can be passed to download a file. If
the address is pointing to an FTP site, you may need to include the
username and password in the URL to allow access to the file. The
format for this would be
"ftp://username:password@ftp.mysite.com".</remarks>
            <param name="fileName">The path of the file to open.</param>
            <param name="progress">The progress delegate. Can be set to null
(Nothing in Visual Basic).</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.Clone">
            <summary>Creates a copy of this AtalaImage.</summary>
            <returns>A deep copy of this AtalaImage.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.CombineChannels(Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.AtalaImage[])">
            <summary>Creates an AtalaImage by combining multiple 8-bit grayscale
or 16-bit grayscale images into one image.</summary>
            <remarks>    Pass in the images in the order that the final image will
    end up. The number of image channels must match the channels in
    the desired pixel format.
    If you are creating a 48-bit or
    64-bit image, the channels parameter must contain 16-bit
    grayscale images, otherwise 8-bit grayscale images should be
    used.</remarks>
            <returns>An AtalaImage consisting of the combined channels.</returns>
            <param name="desiredPixelFormat">The PixelFormat of the output image.</param>
            <param name="channels">A parameter array of each channel to be combined.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.CopyToClipboard(System.IntPtr)">
            <summary>Copies the image data onto the clipboard.</summary>
            <param name="ownerHandle">    Handle to a window which will act as the clipboard
    parent.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.CountColors">
            <summary>Count the number of unique colors in this
AtalaImage.</summary>
            <returns>The number of unique colors in this
AtalaImage.</returns>
            <remarks>For colormapped images, this method can return a different
number of colors than what's stored in the Palette.Colors property.
That is because this method actually loops through each pixel in
the image to count the unique number of unique colors.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.Dispose">
            <summary>Call this method to destroy this AtalaImage
data and free memory.</summary>
            <remarks>    The garbage collector will eventually free this memory if
    dispose is not called. By calling Dispose the memory
    is freed immediately, important for images occupying many
    kilobytes of memory.
    After the image is disposed, any function calls that
    access the
    
    ImageData will result in an
    ObjectIsDisposedException.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.Draw">
            <summary>Draws the specified portion of this AtalaImage onto a
specified System.Drawing.Graphics object at the
specified location and with the specified size. Draws this
AtalaImage to a graphics object.</summary>
            <remarks>Unlike GDI+, this Draw method will not convert the
image to 32-bit when drawing to a Graphics object.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.Draw(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>Draws this AtalaImage onto a
System.Drawing.Graphics object at a specified
location and size.</summary>
            <param name="graphics">The Graphics object to draw on.</param>
            <param name="destRect">The rectangular area of the Graphics object to draw
on.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.Draw(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>Draws a specified area of this AtalaImage
onto a System.Drawing.Graphics object at the
specified location and size.</summary>
            <param name="graphics">The Graphics object to draw on.</param>
            <param name="destRect">The rectangular area of the Graphics object to draw
on.</param>
            <param name="srcRect">The rectangular area of the source image to draw.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.Draw(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Boolean)">
            <summary>Draws a specified area of this AtalaImage
onto a System.Drawing.Graphics object at the
specified location and size.</summary>
            <remarks>This method will draw the image onto a graphics object and
convert to a bottom-top Bitmap if necessary. Some devices such as
printers will fail when drawing a top-bottom image such as those
internally stored in DotImage and .NET.</remarks>
            <param name="graphics">The Graphics object to draw on.</param>
            <param name="destRect">The rectangular area of the Graphics object to draw
on.</param>
            <param name="srcRect">The rectangular area of the source image to draw.</param>
            <param name="renderBottomTop">When true, the image will be forced to draw bottom to
top.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.FillRectangle">
            <summary>Fills a specified rectangle in this image with a specified
solid color.Fills a rectangular area of an
AtalaImage with a solid color.</summary>
            <remarks>This method is faster then using the Drawing namespace to
draw a simple solid rectangle.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.FillRectangle(System.Drawing.Rectangle,System.Drawing.Color)">
            <summary>Fills a specified rectangle in this image with a specified
solid color.</summary>
            <param name="rect">The rectangular area to fill.</param>
            <param name="fillColor">The color of the fill area.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.FillRectangle(System.Drawing.Rectangle,System.Int32)">
            <summary>Fills a specified rectangle in this image with a specified
index.</summary>
            <param name="rect">The rectangular area to fill.</param>
            <param name="fillIndex">The palette index or grayscale value to fill.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.Finalize">
            <summary>The Destructor that will automatically be called by the
garbage collector</summary>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.Flip(Atalasoft.Imaging.FlipDirection)">
            <summary>Flips the image vertically or horizontally.</summary>
            <remarks>See

FlipCommand for an equivalent function that can be applied as a
Command.</remarks>
            <param name="direction">The direction of the flip.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.FromBitmap(System.Drawing.Bitmap)">
            <summary>Returns a copy of a GDI+
System.Drawing.Bitmap object in the form of an
AtalaImage object.</summary>
            <returns>A copy of a GDI+ System.Drawing.Bitmap
object in the form of an AtalaImage object.</returns>
            <param name="bitmap">The bitmap to create a copy from.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.FromBitmapData(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.ColorPalette)">
            <summary>Returns an AtalaImage that contains the same image pointer
that's in the specified BitmapData object.</summary>
            <returns>An AtalaImage that contains the same image pointer that's in
the specified BitmapData object.</returns>
            <remarks>Use this method to set an existing Bitmap
object to an AtalaImage without copying the data.
This method should be used with care as the source
Bitmap will always control the image memory, and
can be disposed by the garbage collector if all references are
removed.</remarks>
            <param name="bd">The BitmapData created from a Bitmap by
locking the bits.</param>
            <param name="palette">The palette of the Bitmap. Set to null
(Nothing in Visual Basic) if the Bitmap doesn't
contain a palette.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.FromByteArray">
            <summary>Creates a new AtalaImage from
a byte array containing an encoded image. Creates a new
AtalaImage from an image stored in a byte
array.</summary>
            <remarks>Another method of accomplishing the same thing would be to
create a MemoryStream from the byte array, and
passing it into the AtalaImage constructor with a
stream. This method was added for convenience.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.FromByteArray(System.Byte[])">
            <summary>Creates a new AtalaImage from
a byte array containing an encoded image.</summary>
            <param name="buffer">A byte array containing the encoded image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.FromByteArray(System.Byte[],Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Creates a new AtalaImage from a byte array containing an
encoded image.</summary>
            <param name="buffer">A byte array containing the encoded image.</param>
            <param name="progress">The progress delegate. Can be set to null
(Nothing in Visual Basic).</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.FromDib(System.IntPtr,System.Boolean)">
            <summary>Returns an AtalaImage from
a DIB (Device Independent Bitmap) pointer.</summary>
            <returns>An AtalaImage from a DIB (Device
Independent Bitmap) pointer.</returns>
            <remarks>The memory will be handled and disposed by the returned
AtalaImage object if copy is set to
true.</remarks>
            <param name="dibPointer">The DIB (device independent bitmap) pointer.</param>
            <param name="copy">Indicates if the DIB data is copied into the
      AtalaImage.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.FromHBitmap(System.IntPtr)">
            <summary>Returns an AtalaImage from an hBitmap
handle.</summary>
            <returns>An AtalaImage from an hBitmap handle.</returns>
            <param name="hBitmap">The hBitmap handle</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.GetBitmap">
            <summary>Returns a System.Drawing.Bitmap object
copied from this AtalaImage.</summary>
            <returns>A System.Drawing.Bitmap object copied from
this AtalaImage.</returns>
            <remarks>This method will always copy the image data into a new
Bitmap object.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.GetChangedPixelFormat">
            <summary>Returns a new AtalaImage object with a different PixelFormat
from this AtalaImage. This function converts an
AtalaImage from one PixelFormat
to another.</summary>
            <returns>A new AtalaImage object with a different PixelFormat from
this AtalaImage.</returns>
            <remarks>The

ChangePixelFormatCommand can also be used to change the
pixelformat, using a Command.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.GetChangedPixelFormat(Atalasoft.Imaging.PixelFormat)">
            <summary>Returns a new AtalaImage object with a different PixelFormat
from this AtalaImage.</summary>
            <returns>An
AtalaImage
object from a Bitmap object.</returns>
            <param name="newPixelFormat">The PixelFormat that the new AtalaImage will contain.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.GetChangedPixelFormat(Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.ColorManagement.ColorProfile)">
            <summary>Returns a new AtalaImage object with a different PixelFormat
from this AtalaImage specifying a
Atalasoft.Imaging.ColorManagement.ColorProfile.</summary>
            <returns>An
AtalaImage
object with a different
PixelFormat
from this AtalaImage.</returns>
            <param name="newPixelFormat">The PixelFormat that the new AtalaImage will contain.</param>
            <param name="destProfile">The color profile to use when converting to and from the CMYK
colorspace.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.GetChangedPixelFormat(Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.ColorManagement.ColorProfile,System.Boolean)">
            <summary>Returns a new AtalaImage object with a different PixelFormat
from this AtalaImage specifying a
Atalasoft.Imaging.ColorManagement.ColorProfile and if the
ChangedPixelFormat event should fire.</summary>
            <param name="newPixelFormat">The PixelFormat that the new AtalaImage will contain.</param>
            <param name="destProfile">The color profile to use when converting to and from the CMYK
colorspace.</param>
            <param name="fireChangedPixelFormatEvent">Speicifies if the ChangedPixelFormat should fire.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.GetGraphics">
            <summary>Returns a System.Drawing.Graphics object
allowing GDI+ operations to draw onto this
AtalaImage.</summary>
            <returns>A System.Drawing.Graphics object allowing
GDI+ operations to draw onto this
AtalaImage.</returns>
            <remarks>A Graphics object can only be obtained with
PixelFormats that support GDI+ drawing such as 24-bit RGB and
32-bit RGBA.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Used to serialize this AtalaImage.</summary>
            <remarks>AtalaImage objects are serialized as PNG
images.</remarks>
            <param name="info">The SerializationInfo object used to store this
AtalaImage.</param>
            <param name="context">The StreamingContext for this
serialization.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.GetPackedBuffer(Atalasoft.Imaging.AtalaImage)">
            <summary>Returns an AtalaImage without rowstride and
with pixels in RGB order.</summary>
            <remarks>This method is used to obtain an image buffer compatible with
other applications that do not work directly with DIB
images.</remarks>
            <returns>A new AtalaImage containing the image buffer.</returns>
            <param name="image">The source image to create the image buffer from.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.GetPixelColor(System.Int32,System.Int32)">
            <summary>Returns the System.Drawing.Color of the
specified pixel in this AtalaImage.</summary>
            <returns>The System.Drawing.Color of the specified
pixel.</returns>
            <param name="x">x coordinate in the image.</param>
            <param name="y">y coordinate in the image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.GetPixelFormatDepth(Atalasoft.Imaging.PixelFormat)">
            <summary>Returns the color depth in bits per pixels associated with a
specified PixelFormat.</summary>
            <returns>The color depth in bits per pixels associated with a
specified PixelFormat.</returns>
            <param name="pixelFormat">The PixelFormat to retrieve the color depth from.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.GetPixelIndex(System.Int32,System.Int32)">
            <summary>Gets the palette index of the specified pixel in this
AtalaImage.</summary>
            <returns>The palette index of the specified pixel.</returns>
            <param name="x">x coordinate in the image.</param>
            <param name="y">y coordinate in the image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.ImageFromClipboard(System.IntPtr)">
            <summary>    Creates a new AtalaImage from data on
    the clipboard.</summary>
            <returns>    An AtalaImage object or null on
    failure.</returns>
            <param name="ownerHandle">    Handle to a window which will act as the clipboard
    parent.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.PixelFormatHasAlpha(Atalasoft.Imaging.PixelFormat)">
            <summary>Returns true if the specified
PixelFormat contains an alpha channel.</summary>
            <returns>True if this AtalaImage contains an
alpha channel.</returns>
            <remarks>If this image is colormapped, the palette might contain an
alpha value less than 255. If so the mapped pixel value will
contain alpha even though this function returns false. Check
if the palette has alpha to be sure.</remarks>
            <param name="pixelFormat">The PixelFormat to use when determining if there is an alpha
channel.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.PixelFormatIsColormapped(Atalasoft.Imaging.PixelFormat)">
            <summary>Returns true if the specified PixelFormat contains a
palette.</summary>
            <returns>True if this AtalaImage contains a palette,
false if it does not.</returns>
            <param name="pixelFormat">The PixelFormat to use when determining if there is an
palette.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.PixelFormatIsContinuous(Atalasoft.Imaging.PixelFormat)">
            <summary>    Returns true if the PixelFormat passed
    in is a continuous-tone format.</summary>
            <returns>true if continuous, false if not.</returns>
            <remarks>    A continuous-tone pixel format means that the pixel value
    is the intentity of the color or channel value. Colormapped
    images are not continuous.</remarks>
            <param name="pixelFormat">The PixelFormat to test for continuous-tone.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.PixelFormatIsTwoBytePerComponent(Atalasoft.Imaging.PixelFormat)">
            <summary>This method can be used to determine if a PixelFormat is a
"Two Byte Per Component" image format.</summary>
            <returns>True if the pixelFormat parameter is a "Two Byte Per
Component" image format.</returns>
            <param name="pixelFormat">The PixelFormat to test.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.Save">
            <summary>Saves this AtalaImage to a file.Saves this
AtalaImage to a file or stream.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.Save(System.IO.Stream,Atalasoft.Imaging.Codec.ImageEncoder,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Saves this AtalaImage to a Stream specifying an ImageEncoder
and progress callback.</summary>
            <returns>The number of bytes saved to the file.</returns>
            <param name="stream">A stream containing the file which the image will be encoded
to.</param>
            <param name="encoder">The ImageEncoder which will be used to encode the
image.</param>
            <param name="progress">The progress delegate. Can be set to null
(Nothing in VB).</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.Save(System.String,Atalasoft.Imaging.Codec.ImageEncoder,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Saves this AtalaImage to a file specifying an ImageEncoder
and progress callback.</summary>
            <remarks>This method can be used to save an image to an FTP server. If
the fileName is pointing to an FTP server, you may need to
include the username and password in the URL to allow the file to
be saved. The format for this would be "ftp://username:password@ftp.mysite.com/folder/newImage.png".</remarks>
            <param name="fileName">The filename to save this AtalaImage to.</param>
            <param name="encoder">The ImageEncoder which will be used to encode the
image.</param>
            <param name="progress">The progress delegate. Can be set to null
(Nothing in VB).</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.Save(System.String,Atalasoft.Imaging.Codec.ImageType,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Saves this AtalaImage to a Stream specifying an ImageType and
progress callback.</summary>
            <returns>The number of bytes saved to the file.</returns>
            <remarks>    To specify encoder settings, use the overload containing
    the ImageEncoder parameter.
    This method can be used to save an image to an FTP
    server. If the fileName is pointing to an FTP server,
    you may need to include the username and password in the URL to
    allow the file to be saved. The format for this would be
    "
    ftp://username:password@ftp.mysite.com/folder/newImage.png".</remarks>
            <param name="fileName">The filename to save this AtalaImage to.</param>
            <param name="type">The image type to save this image as.</param>
            <param name="progress">The progress delegate. Can be set to null
(Nothing in VB).</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.SetPixelColor(System.Int32,System.Int32,System.Drawing.Color)">
            <summary>Set the color of a particular pixel.</summary>
            <param name="x">x coordinate in the image.</param>
            <param name="y">y coordinate in the image.</param>
            <param name="newColor">The new color to set.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.SetPixelIndex(System.Int32,System.Int32,System.Byte)">
            <summary>Set the palette index of a particular pixel.</summary>
            <param name="x">x coordinate in the image.</param>
            <param name="y">y coordinate in the image.</param>
            <param name="value">The new palette index to set.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.SplitChannels">
            <summary>Returns an array of grayscale AtalaImage objects composing of
individual channels of the source image.Splits each color channel
of this AtalaImage into separate images.</summary>
            <returns>An array of grayscale AtalaImage objects composing of
individual channels of the source image.</returns>
            <remarks>The returned array contains grayscale images representing the
source image channels in the same order as the channels are in the
image. Keep in mind that this means a Pixel24bitRgb contains
channels in the order of blue, green, and red.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.SplitChannels">
            <summary>Returns an array of grayscale AtalaImage objects representing
each 8-bit or 16-bit channel in the source image.</summary>
            <returns>An array of grayscale AtalaImage objects representing each
8-bit or 16-bit channel in the source image.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.SplitChannels(Atalasoft.Imaging.ImageProcessing.ChannelFlags)">
            <summary>Returns an array of grayscale AtalaImage objects representing
specified 8-bit or 16-bit channels in the source image.</summary>
            <returns>An array of grayscale AtalaImage objects representing
specified 8-bit or 16-bit channels in the source image.</returns>
            <param name="channels">The channels mask to apply. The returned array will contain a
null AtalaImage if that particular channel's bit flag is not
set.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.ToByteArray">
            <summary>Returns a byte array containing an encoded image.Saves this
AtalaImage into a byte array.</summary>
            <returns>A byte array containing an encoded image.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.ToByteArray(Atalasoft.Imaging.Codec.ImageEncoder)">
            <summary>Returns a byte array containing an encoded image.</summary>
            <returns>A byte array containing an encoded image.</returns>
            <param name="encoder">The ImageEncoder which will be used to encode the
image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.ToByteArray(Atalasoft.Imaging.Codec.ImageEncoder,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Returns a byte array containing an encoded image.</summary>
            <returns>A byte array containing an encoded image.</returns>
            <param name="encoder">The ImageEncoder which will be used to encode the
image.</param>
            <param name="progress">The progress delegate. Can be set to null
(Nothing in VB).</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.ToDib">
            <summary>Returns a DIB (device independent bitmap) pointer.</summary>
            <returns>A DIB (device independent bitmap) pointer.</returns>
            <remarks>The pointer must be freed by the calling application with
GlobalFree or Marshal.FreeHGlobal.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.ToString">
            <summary>    Returns a textual description of this
    AtalaImage object.</summary>
            <returns>A string containing the width, height and pixel format of
this image.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaImage.BitmapMirror">
            <summary>Gets the Bitmap mirror of this AtalaImage.</summary>
            <remarks>    The image data is tied to the AtalaImage object from
    which the Bitmap was created. As long as the AtalaImage is
    still in scope and not disposed, the Bitmap may be used.
    This property is best used in other methods in GDI+ that
    require a Bitmap. It's not advised to store this Bitmap in a
    variable. See GetBitmap for creating a new Bitmap with a copy
    of the image data.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaImage.ColorDepth">
            <summary>Gets the number of bits per pixel of this AtalaImage.</summary>
            <remarks>The Colordepth can be changed by creating a new image with a
different PixelFormat. See
Atalasoft.Imaging.AtalaImage.GetChangedPixelFormat.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaImage.ColorProfile">
            <summary>Gets or sets the
Atalasoft.Imaging.ColorManagement.ColorProfile associated with this
AtalaImage.</summary>
            <remarks>    Any conversions to a colorspace to and from CMYK and RGB
    will use this profile for the conversion.
    Image Formats that can contain an embedded profile such
    as Tiff, Jpeg, and Png will use this profile to embed into the
    image. Likewise, when images are loaded containing a color
    profile, this property will contain that profile.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaImage.DitherErrorMax">
            <summary>Gets or sets the diffusion or dither error that's applied to
an image when converting to from a continuous tone to colormapped
format.</summary>
            <remarks>    This value can be from 0 to 127 where 0 is with no error
    diffusion and 127 is maximum error diffusion.
    See the Dithering topic for
    more information.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaImage.Edition">
            <summary>Gets the type of license being used.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaImage.Height">
            <summary>Gets the height of this AtalaImage in pixels.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaImage.ImageData">
            <summary>Gets the memory address of this AtalaImage.</summary>
            <remarks>Similarly to the GDI+ Bitmap object, the memory bits
AtalaImage can be directly manipulated with this pointer.
There is no need to lock the pointer.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaImage.Palette">
            <summary>Gets the palette of this AtalaImage.</summary>
            <remarks>If the image does not contain a palette, this property will
return null (Nothing in
VB).</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaImage.PixelFormat">
            <summary>Gets the PixelFormat of this AtalaImage.</summary>
            <remarks>See ChangePixelFormatCommand for changing the
PixelFormat.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaImage.Resolution">
            <summary>Get or set the Resolution of this AtalaImage object</summary>
            <remarks>If the image is loaded from a file, Resolution will contain
the value stored in the file. The resolution will be persisted into
new AtalaImage objects that are based off of this
one.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaImage.RowStride">
            <summary>Get the number of bytes in each row of this
AtalaImage.</summary>
            <remarks>DIB images, which AtalaImage is based on, require the image
data to be 32-bit aligned. If the width is not divisible by 4
bytes, then padding will be added to the width. This property
returns the width including pixel data and padding.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaImage.Size">
            <summary>Gets the size of this AtalaImage in pixels.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaImage.Width">
            <summary>Gets the width of this AtalaImage in pixels.</summary>
        </member>
        <member name="E:Atalasoft.Imaging.AtalaImage.ChangePixelFormat">
            <summary>Occurs when the image data changes PixelFormats.</summary>
            <remarks>This static event is usually fired when a particular method
is not compatible with the current PixelFormat and it needs to be
changed. By handling this event, you may show a dialog to the user
that the current PixelFormat will be changed and allow that
operation to be cancelled by setting the Cancel property in the
Atalasoft.Imaging.PixelFormatChangeEventArgs to true.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.DotImageLicense">
            <summary>This class is used for embedded component licensing.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.DotImageLicense.AssemblyLicense">
            <summary>Gets or sets the assembly license XML.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.DotImageLicense.Edition">
            <summary>Gets the current License Edition, Photo, Photo Pro, or
Document.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ExceptionEventArgs">
            <summary>Provides data for the Workspace.ProcessError event.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ExceptionEventArgs._ctor">
            <summary>Creates a new instance of ExceptionEventArgs.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ExceptionEventArgs._ctor">
            <summary>Creates a new instance of ExceptionEventArgs.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ExceptionEventArgs._ctor(System.Exception)">
            <summary>Creates a new instance of ExceptionEventArgs specifying the
Exception that was thrown.</summary>
            <param name="exception">The Exception that was thrown.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ExceptionEventArgs.Exception">
            <summary>Gets the Exception that was thrown.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.FileMapIOException">
            <summary>This exception is thrown when an error occurs when allocating
an image with file memory mapping.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.FileMapIOException._ctor">
            <summary>Creates a new instance of FileMapIOException.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.FileMapIOException._ctor(System.Int32)">
            <summary>Creates a new instance of FileMapIOException specifying the
Windows API error code.</summary>
            <param name="error">The Windows API error code.</param>
        </member>
        <member name="M:Atalasoft.Imaging.FileMapIOException._ctor(System.String)">
            <summary>Creates a new instance of FileMapIOException specifying the
Exception message.</summary>
            <param name="message">A description of the exception.</param>
        </member>
        <member name="M:Atalasoft.Imaging.FileMapIOException._ctor(System.String,System.Exception)">
            <summary>Creates an instance of FileMapIOException specifying the
Exception message and inner Exception.</summary>
            <param name="message">A description of the exception.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="P:Atalasoft.Imaging.FileMapIOException.Message">
            <summary>Gets a description about the Exception.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.FileMapIOException.Win32ErrorCode">
            <summary>Gets the Windows API error code for this Exception.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.FileReloader">
            <summary>FileReloader is an implementation of the
IImageReloader
interface. It encapsulates information about an image stored in a
file system and can reload that image at any point.</summary>
            <remarks>This class is used by the

FileSystemImageSource object, but any ImageSource that wants to
implement a file system cache could use this object.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.FileReloader._ctor(System.String,System.Int32)">
            <summary>Constructs a new FileReloader object.</summary>
            <returns>A new AtalaImage or null if the image can't be loaded.</returns>
            <param name="path">The path to the image.</param>
            <param name="frameIndex">The frame index of the image, useful if the file is a
multipage TIFF or an animated GIF.</param>
        </member>
        <member name="M:Atalasoft.Imaging.FileReloader.Dispose">
            <summary>Dispose releases resources associated with this class.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.FileReloader.Dispose">
            <summary>Dispose releases resources associated with this class.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.FileReloader.Reload">
            <summary>Reload the image into memory.</summary>
            <returns>A new AtalaImage or null if the image can't be loaded.</returns>
        </member>
        <member name="T:Atalasoft.Imaging.FileSystemImageSource">
            <summary>This is an implementation of an ImageSource using a file
system as a provider of images.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.FileSystemImageSource._ctor">
            <summary>Constructs a new FileSystemImageSource object.</summary>
            <returns>A new FileSystemImageSource object.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.FileSystemImageSource._ctor(System.String,System.Boolean)">
            <summary>Provides access to all image files from a directory.</summary>
            <remarks>    This will provide access only to image files for which
    there is an existing registered codec.
    Because there is a codec available for a file does not
    mean that it can be loaded.</remarks>
            <param name="path">A path to a directory containing image files.</param>
            <param name="doAllFrames">If true, this image source will provide access to every
available frame in every file.</param>
        </member>
        <member name="M:Atalasoft.Imaging.FileSystemImageSource._ctor(System.String,System.String,System.Boolean)">
            <summary>Provides access to all image files from a directory that
match a pattern.</summary>
            <remarks>    This will provide access only to image files for which
    there is an existing registered codec.
    Because there is a codec available for a file does not
    mean that it can be loaded.</remarks>
            <param name="path">A path to a directory containing image files.</param>
            <param name="pattern">A regular expression used to match files in the
directory.</param>
            <param name="doAllFrames">If true, this image source will provide access to every
available frame in every file.</param>
        </member>
        <member name="M:Atalasoft.Imaging.FileSystemImageSource._ctor(System.String[],System.Boolean)">
            <summary>Provides access to a list of image files.</summary>
            <remarks>    This will provide access only to image files for which
    there is an existing registered codec.
    Because there is a codec available for a file does not
    mean that it can be loaded.</remarks>
            <param name="fileNames">A list of file names to be loaded as images.</param>
            <param name="doAllFrames">If true, this image source will provide access to every
available frame in every file.</param>
        </member>
        <member name="T:Atalasoft.Imaging.FormDataCollection">
            <summary>The FormDataCollection is used with the
HttpPost
class to send form information to a web server.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.FormDataCollection._ctor">
            <summary>Creates a new instance of FormDataCollection.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.FormDataCollection.Add">
            <summary>Adds data to the collection.Adds a new item to the
collection.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.FormDataCollection.Add(System.String,Atalasoft.Imaging.AtalaImage)">
            <summary>Adds an image to the collection.</summary>
            <param name="fieldName">The form field name used to identify the image.</param>
            <param name="image">The AtalaImage to add.</param>
        </member>
        <member name="M:Atalasoft.Imaging.FormDataCollection.Add(System.String,Atalasoft.Imaging.AtalaImage,System.String)">
            <summary>Adds an image to the collection specifying the
filename.</summary>
            <param name="fieldName">The form field name used to identify this image.</param>
            <param name="image">The AtalaImage to add.</param>
            <param name="fileName">The original filename of this image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.FormDataCollection.Add(System.String,System.String)">
            <summary>Adds form data to the collection.</summary>
            <remarks>Use this to add data other than images that might be needed
for any server-side scripting.</remarks>
            <param name="fieldName">The field name of the form object.</param>
            <param name="fieldValue">The value of the field object.</param>
        </member>
        <member name="M:Atalasoft.Imaging.FormDataCollection.AddFromBrowser(System.String,System.Object,System.String)">
            <summary>    Adds an image or form field to the collection.
    You must use this method when posting from a web
    browser.</summary>
            <remarks>When adding an image, set the fieldValue to the
filename of the image. When adding a form field entry, set the
image to null.</remarks>
            <param name="fieldName">The field name of the form object.</param>
            <param name="image">The image you want to upload.</param>
            <param name="fieldValue">The value of the field object or the filename of the
image.</param>
        </member>
        <member name="T:Atalasoft.Imaging.GdiException">
            <summary>This exception is thrown when a GDI function fails.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.GdiException._ctor">
            <summary>Creates an instance of GdiException.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.GdiException._ctor">
            <summary>Creates a new instance of GdiException.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.GdiException._ctor(System.String)">
            <summary>Creates a new instance of GdiException specifying the
exception message.</summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Atalasoft.Imaging.GdiException._ctor(System.String,System.Exception)">
            <summary>Creates a new instance of GdiException specifying the
exception message and inner exception.</summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Atalasoft.Imaging.HttpPost">
            <summary>    This class allows you to post data to a server without
    user interaction.
    The data is posted as if it were being sent from an HTML
    Form, allowing any form handling component to be used on the
    server.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.HttpPost._ctor">
            <summary>Creates a new instance of HttpPost.Creates an instance of
HttpPost.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.HttpPost._ctor">
            <summary>Creates a new instance of HttpPost.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.HttpPost._ctor(Atalasoft.Imaging.Codec.ImageEncoder)">
            <summary>Creates a new instance of HttpPost specifying the
ImageEncoder to use.</summary>
            <param name="encoder">The ImageEncoder to use when posting images to the
server.</param>
        </member>
        <member name="M:Atalasoft.Imaging.HttpPost.GetData(System.String)">
            <summary>This method can be used to retrieve information from a
server.</summary>
            <returns>A string containing the data returned by the server.</returns>
            <remarks>Use this method when you only want to retrieve information.
You can send parameters to the server by adding query string values
to the url.</remarks>
            <param name="url">A web address to request data from.</param>
        </member>
        <member name="M:Atalasoft.Imaging.HttpPost.PostData(System.String)">
            <summary>This method will send the internal

FormDataCollection entries to a server for processing.</summary>
            <returns>A string containing returned data from the server.</returns>
            <param name="url">The web address to send the data to.</param>
        </member>
        <member name="P:Atalasoft.Imaging.HttpPost.FormData">
            <summary>Gets the

FormDataCollection object that will be posted to the
server.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageCancelEventArgs">
            <summary>Provides data for the event which allow an operation using an
image to be cancelled.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCancelEventArgs._ctor(Atalasoft.Imaging.AtalaImage)">
            <summary>Creates a new instance of ImageCancelEventArgs.</summary>
            <param name="image">The image being processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageCancelEventArgs.Cancel">
            <summary>    Gets or sets a value that when true will cancel the
    current operation.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageCollection">
            <summary>This collection holds multiple
AtalaImage
objects useful for various features like working with multi-paged
images, animations, and layering.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection._ctor">
            <summary>Initializes a new instance of the ImageCollection
objectCreates an ImageCollection object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection._ctor">
            <summary>Initializes a new instance of the ImageCollection
object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection._ctor(Atalasoft.Imaging.AtalaImage[])">
            <summary>Initializes a new instance of the ImageCollection object
specifying one or multiple AtalaImage objects to add to the
collection.</summary>
            <param name="images">A parameter array of one or many AtalaImage objects.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection._ctor(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Initializes a new instance of the ImageCollection object
specifying a Stream containing image data to load.</summary>
            <param name="stream">A Stream of image data.</param>
            <param name="progress">The progress delegate. Can be set to null
(Nothing in Visual Basic).</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection._ctor(System.String,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Initializes a new instance of the ImageCollection object
specifying a filename containing image data to load.</summary>
            <param name="fileName">The filename of the image (or images) to load into the
ImageCollection.</param>
            <param name="progress">The progress delegate. Can be set to null
(Nothing in Visual Basic).</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.Add(Atalasoft.Imaging.AtalaImage)">
            <summary>Adds an AtalaImage to the collection.</summary>
            <param name="image">The image to add.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.Clear">
            <summary>Removes all images from the collection.</summary>
            <remarks>The images that are in the collection before this method is
called will need to be disposed if they are no longer being
used.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.Contains(Atalasoft.Imaging.AtalaImage)">
            <summary>Returns a value Indicating if a specified image exists within
this collection.</summary>
            <returns>A value Indicating if a specified image exists within this
collection.</returns>
            <param name="image">The AtalaImage to test.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.CopyTo(Atalasoft.Imaging.AtalaImage[],System.Int32)">
            <summary>Copy this ImageCollection into an existing AtalaImage
array.</summary>
            <param name="images">The existing AtalaImage array.</param>
            <param name="index">The index in the array begin copying.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.Dispose">
            <summary>Remove unmanaged resources in each AtalaImage in the
collection.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.IndexOf(Atalasoft.Imaging.AtalaImage)">
            <summary>Returns the index of a specified image in the
collection.</summary>
            <returns>The index of a specified image in the collection.</returns>
            <remarks>Returns -1 if the image doesn't exist in the
collection.</remarks>
            <param name="image">The AtalaImage to test.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.Insert(System.Int32,Atalasoft.Imaging.AtalaImage)">
            <summary>Insert an AtalaImage at the specified
index.</summary>
            <param name="index">The index to insert the image after.</param>
            <param name="image">The AtalaImage to insert into the collection.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.MoveNext">
            <summary>Set the Current image to the next image in the
collection.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.MovePrevious">
            <summary>Set the Current image to the previous image in the
collection.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.ReadImages(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Read all images from a multipage image file into this image
collection.</summary>
            <remarks>If the source image doens't support multiple images, only a
single image will be loaded into the collection.</remarks>
            <param name="stream">A stream containing the encoded image data.</param>
            <param name="progress">The progress delegate. Can be set to null
(Nothing in Visual Basic).</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.Remove(Atalasoft.Imaging.AtalaImage)">
            <summary>Removes a specified AtalaImage from this
ImageCollection.</summary>
            <remarks>The image that is being removed, will not be automatically
disposed by the Workspace. To immediatly free
memory, the image that's being removed must be disposed.</remarks>
            <param name="image">The image in the collection to remove.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.Replace(Atalasoft.Imaging.AtalaImage)">
            <summary>Replaces the Current image in the collection with a new
image.</summary>
            <remarks>The image that is being removed, will not be automatically
disposed by the Workspace. To immediately free
memory, the image that's being removed must be disposed. See the

Image property in the
Workspace
class to replace an image, and add it to the
UndoCollection,
and dispose of it automatically.</remarks>
            <param name="image">The new image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.Save">
            <summary>Save the images in this ImageCollection to a file.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.Save(System.IO.Stream,Atalasoft.Imaging.Codec.ImageEncoder,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Save the images in this ImageCollection to a stream
specifying the ImageEncoder to use for encoding the image
data.</summary>
            <remarks>The ImageEncoder must have the IAppendable interface in order
to save multiple images in one file.</remarks>
            <param name="stream">A stream containing the file which the image will be encoded
to. This stream must have FileAccess.ReadWrite set or else only the
first image will be saved.</param>
            <param name="encoder">The ImageEncoder which will be used to encode the
image.</param>
            <param name="progress">The progress delegate. Can be set to null
(Nothing in VB).</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.Save(System.String,Atalasoft.Imaging.Codec.ImageEncoder,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Save each ImageCollection in a multipaged or multiframed
format.</summary>
            <returns/>
            <param name="fileName">The name of the file to save.</param>
            <param name="encoder">The ImageEncoder which will be used to encode the
image.</param>
            <param name="progress">The progress delegate. Can be set to null
(Nothing in VB).</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.Save(System.String,Atalasoft.Imaging.Codec.ImageType,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Save each ImageCollection in a multipaged or multiframed
format.</summary>
            <returns>Filesize of saved image.</returns>
            <param name="fileName">The name of the file to save.</param>
            <param name="imageType">The image format to save.</param>
            <param name="progress">The progress delegate. Can be set to null
(Nothing in VB).</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.ToByteArray(Atalasoft.Imaging.Codec.ImageEncoder,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Saves the image into a byte array.</summary>
            <returns>A byte array containing the image data.</returns>
            <param name="encoder">The ImageEncoder to use.</param>
            <param name="progress">A progress event handler used during the save process.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageCollection.Current">
            <summary>Gets or sets the current image in this collection.</summary>
            <remarks>The Current image in the collection is the image that is
considered active if there is an associated
Workspace
that has a reference to this collection. Any image processing
commands will be applied to the Current image.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageCollection.Item(System.Int32)">
            <summary>Allows the image collection to be accessed through an indexer
and enumerated with foreach.</summary>
            <param name="index">The index of the image.</param>
        </member>
        <member name="T:Atalasoft.Imaging.ImageCollectionEventArgs">
            <summary>Provides data for the Workspace.NewImage and
Workspace.ChangedImage events.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollectionEventArgs._ctor">
            <summary>Creates an ImageCollectionEventArgs object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollectionEventArgs._ctor">
            <summary>Creates a new instance of ImageCollectionEventArgs.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollectionEventArgs._ctor(Atalasoft.Imaging.ImageCollection)">
            <summary>Creates a new instance of ImageCollectionEventArgs specifying
the ImageCollection.</summary>
            <param name="images">The ImageCollection for this event.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageCollectionEventArgs.Images">
            <summary>Gets or sets the ImageCollection.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageEventArgs">
            <summary>Provides data for the Workspace.NewImage and
Workspace.ChangedImage events.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageEventArgs._ctor">
            <summary>Creates an ImageEventArgs object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageEventArgs._ctor">
            <summary>Creates a new instance of ImageEventArgs.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageEventArgs._ctor(Atalasoft.Imaging.AtalaImage)">
            <summary>Creates a new instance of ImageEventArgs specifying the
AtalaImage for this event.</summary>
            <param name="image">The AtalaImage for this event.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageEventArgs.Image">
            <summary>Gets or sets the AtalaImage.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageMemory">
            <summary>This class handles memory associated with an image. It
controls how the memory is allocated and freed. Use this class to
enable memory file mapping.</summary>
            <remarks>    File Mapped memory can greatly increase performance when
    working with extremely large images or when system resources
    are limited. For more information on file mapped memory, please
    see topic Introduction to Memory Management.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageMemory._ctor">
            <summary>Initializes a new instance of
ImageMemory.Creates an
ImageMemory object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageMemory._ctor">
            <summary>Initializes a new instance of
ImageMemory.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageMemory._ctor(System.Int32)">
            <summary>Initializes a new instance of ImageMemory
indicating the number of bytes to allocate.</summary>
            <param name="bytes">number of bytes to allocate</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageMemory._ctor(System.Int32,System.Boolean)">
            <summary>Initializes a new instance of ImageMemory
indicating the number of bytes to allocate and if this object
should handle the freeing of that memory.</summary>
            <param name="bytes">number of bytes to allocate</param>
            <param name="zeroMemory">indicates if the memory should be freed when disposing</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageMemory._ctor(System.IntPtr)">
            <summary>Initializes a new instance of ImageMemory
setting the pre allocated memory pointer.</summary>
            <param name="imagePointer">The memory pointer</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageMemory._ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance of ImageMemory
setting the pre allocated memory pointer and if this object should
handle the freeing of that memory.</summary>
            <remarks>Initializes a new instance of ImageMemory setting the
pre-allocated memory pointer and if this object should handle the
freeing of that memory.</remarks>
            <param name="imagePointer">The memory pointer</param>
            <param name="preventDispose">indicates if the memory should be freed when disposing</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageMemory.Dispose">
            <summary>Free the memory associated with this object.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageMemory.EnableMemoryFileMapping">
            <summary>Gets or sets a value indicating if memory should be mapped to
a file if the MemoryMapThreshold is exceeded for a
block of data.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageMemory.FileMapped">
            <summary>Gets or sets a value indicating if the memory is mapped to a
file.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageMemory.Handle">
            <summary>Gets the pointer to the memory handled by this object.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageMemory.MemoryMapTempPath">
            <summary>Gets or sets the path where file mapped memory is temporarily
stored. Defaults to the user's temporary file.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageMemory.MemoryMapThreshold">
            <summary>Gets or sets the threshold in KB where files greater than
this value will be memory mapped when
EnableMemoryFileMapping is true.</summary>
            <remarks>The default threshold is 30,000 bytes, but the optimal
threshold is highly dependant on the client system and it's
available memory.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageMemory.PreventDispose">
            <summary>Gets or sets a value indicating if the memory should be freed
when disposing.</summary>
            <remarks>This should only be set to true if the same memory is being
handled somewhere else.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessException">
            <summary>This exception is thrown when an error occurs during
processing of an image</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessException._ctor">
            <summary>Creates an ImageProcessException.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessException._ctor">
            <summary>Creates a new instance of ImageProcessException.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessException._ctor(System.String)">
            <summary>Creates a new instance of ImageProcessException specifying
the exception message.</summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessException._ctor(System.String,Atalasoft.Imaging.AtalaImage)">
            <summary>Creates a new instance of ImageProcessException specifying
the exception message and AtalaImage.</summary>
            <param name="message">The exception message.</param>
            <param name="image">The AtalaImage causing this exception.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessException._ctor(System.String,System.Exception)">
            <summary>Creates a new instance of ImageProcessException specifying
the exception message and inner exception.</summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessException.Image">
            <summary>Gets or sets the AtalaImage object which is causing the
error.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageSource">
            <summary>ImageSource is an abstract class that is used to define a
flexible mechanism for managing large quantities of images without
having to keep them all in memory at once. ImageSource objects are
configurable for memory usage or for aggressive unloading of images
and can be built with a cache to allow transient data sources such
as live video to be treated as if they were persistent.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSource.Acquire">
            <summary>Acquire an AtalaImage for use. These versions of Acquire are
used to put an additional request to hold onto an
AtalaImage.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSource.Acquire(Atalasoft.Imaging.AtalaImage)">
            <summary>Acquire an AtalaImage that has been previously
acquired.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSource.Acquire(System.Int32)">
            <summary>Acquire a previous image by index.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSource.AcquireNext">
            <summary>Acquire the next available image from the ImageSource.</summary>
            <returns>A new AtalaImage or null if the image can't be loaded or
there is no image to load.</returns>
            <remarks>    This method may throw an exception on certain load
    failures, but that will depend on the concrete implementation
    of ImageSource.
    A call to
    Release
    should be made for every Acquire.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSource.Dispose">
            <summary>Free up resources used by this ImageSource</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSource.Dispose">
            <summary>Free up resources used by this ImageSource</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSource.Flush">
            <summary>Flush all released images out of memory.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSource.HasMoreImages">
            <summary>Determines if there are more images to load.</summary>
            <returns>True if there are more images to load, false
otherwise.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSource.Release(Atalasoft.Imaging.AtalaImage)">
            <summary>Release a previously acquired image.</summary>
            <returns>True if the image was fully released, false otherwise.</returns>
            <remarks>If asked to release an object that has not been previously
acquired, Release will return true.</remarks>
            <param name="image">The image to release.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSource.Reset">
            <summary>Resets the ImageSource to start over again.</summary>
            <remarks>    Some subclasses of ImageSource will require that all
    previously acquired images must be released before a
    Reset.
    It will not always be the case that the first image
    acquired will be the same after a reset. This is highly
    dependent on the nature of the concrete implementation of
    ImageSource.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSource.Count">
            <summary>Returns the total number of images that have been acquired so
far.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSource.ImmediateUnload">
            <summary>Determines if an image should be unloaded from memory
immediately.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSource.MemoryInUse">
            <summary>Returns an estimate of the number of bytes of memory
currently in use by images in this ImageSource.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSource.MemoryLimit">
            <summary>This sets the limit for memory usage for this ImageSource. If
memory usage goes beyond this, images will be dropped from memory
until memory usage is below the limit.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSource.TotalImages">
            <summary>Returns the total number of available images in this image
source.</summary>
            <remarks>This property is only valid if
TotalImagesKnown
is true. If TotalImagesKnown is false, accessing this property will
throw a NotSupportedException.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSource.TotalImagesKnown">
            <summary>Returns whether or not the total number of images in this
image source can be known.</summary>
            <remarks>Always check this property before accessing the
TotalImages
property.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageSourceNode">
            <summary>This is an object used to hold AtalaImages in the
ImageSource. This object is only of interest if you are writing
your own ImageSource implementation.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSourceNode._ctor(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.IImageReloader)">
            <summary>Constructs a new ImageSourceNode using the supplied image and
reloader.</summary>
            <param name="image">The image to hold onto.</param>
            <param name="reloader">An IImageReloader to load the object back into memory. This
can be null.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSourceNode.Acquire">
            <summary>Acquire a lock on this node.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSourceNode.Dispose">
            <summary>Release resources used by this node.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSourceNode.Dispose">
            <summary>Release resources used by this node.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSourceNode.LetGo">
            <summary>Unload the image from memory.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSourceNode.Release">
            <summary>Release a lock on this image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSourceNode.Image">
            <summary>The image in this node.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSourceNode.ImageSize">
            <summary>The number of bytes used by this image when in memory.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSourceNode.Index">
            <summary>The index of this image in the ImageSource.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSourceNode.Released">
            <summary>Determines if this image is fully released.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageStreamEventArgs">
            <summary>Provides data for the ImageStreamCompleted event.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageStreamEventArgs._ctor">
            <summary>Creates an ImageStreamEventArgs object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageStreamEventArgs._ctor">
            <summary>Creates a new ImageStreamEventArgs object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageStreamEventArgs._ctor(System.IO.Stream,System.Int32)">
            <summary>Creates a new instance of ImageStreamEventArgs specifying the
stream and number of bytes.</summary>
            <param name="stream">The stream for this event.</param>
            <param name="bytes">The number of bytes for this event.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageStreamEventArgs.Bytes">
            <summary>Gets the number of bytes written to or read from the image
stream.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageStreamEventArgs.Stream">
            <summary>Gets the Steam object of interest.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.IncompatiblePixelFormatException">
            <summary>This exception is thrown when the image to be processed does
not contain a PixelFormat compatible with the function of
interest.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.IncompatiblePixelFormatException._ctor">
            <summary>Creates an IncompatiblePixelFormatException object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.IncompatiblePixelFormatException._ctor">
            <summary>Creates a new instance of
IncompatiblePixelFormatException.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.IncompatiblePixelFormatException._ctor(System.String)">
            <summary>Creates a new instance of IncompatiblePixelFormatException
specifying the exception message.</summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Atalasoft.Imaging.IncompatiblePixelFormatException._ctor(System.String,System.Exception)">
            <summary>Creates a new instance of IncompatiblePixelFormatException
specifying the exception message and inner exception.</summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception for this error.</param>
        </member>
        <member name="T:Atalasoft.Imaging.InternetConnectException">
            <summary>This exception is thrown when there is an error opening an
internet connection.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.InternetConnectException._ctor">
            <summary>Creates an InternetConnectException object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.InternetConnectException._ctor">
            <summary>Creates a new instance of InternetConnectException.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.InternetConnectException._ctor(System.String)">
            <summary>Creates a new instance of InternetConnectException specifying
the exception message.</summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Atalasoft.Imaging.InternetConnectException._ctor(System.String,System.Exception)">
            <summary>Creates a new instance of InternetConnectException specifying
the exception message and inner exception.</summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Atalasoft.Imaging.InternetInvalidPasswordException">
            <summary>This exception is thrown when an invalid password was
detected while attempting to connect to an HTTP or FTP site to
download an image.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.InternetInvalidPasswordException._ctor">
            <summary>Creates an InternetInvalidPasswordException object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.InternetInvalidPasswordException._ctor">
            <summary>Creates a new instance of
InternetInvalidPasswordException.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.InternetInvalidPasswordException._ctor(System.String)">
            <summary>Creates a new instance of InternetInvalidPasswordException
specifying the exception message.</summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Atalasoft.Imaging.InternetInvalidPasswordException._ctor(System.String,System.Exception)">
            <summary>Creates a new instance of InternetInvalidPasswordException
specifying the exception message and inner exception.</summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception for the error.</param>
        </member>
        <member name="T:Atalasoft.Imaging.MarshalByRefCollectionBase">
            <summary>    A base abstract
    (MustInherit in Visual Basic) collection class
    intended for strongly typed collections containing unmanaged
    data.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.MarshalByRefCollectionBase.Clear">
            <summary>Clears the collection.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.MarshalByRefCollectionBase.CopyTo(System.Array,System.Int32)">
            <summary>Copies the collection items into an array.</summary>
            <param name="array">The array that will hold the collection items.</param>
        </member>
        <member name="M:Atalasoft.Imaging.MarshalByRefCollectionBase.GetEnumerator">
            <summary>Returns a reference to an IEnumerator interface, whose
purpose is to grant access to an enumeration's items.</summary>
            <remarks>When
GetEnumerator
is called, it constructs an enumerator object containing the
current version number in the collection and a reference to the
collection's items. Every time the enumerator is accessed, it
compares the version of the enumerator with the version of the
collection. If the versions do not match, it means that the
collection has changed; an exception then occurs.</remarks>
            <returns>A reference to an IEnumerator
interface.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.MarshalByRefCollectionBase.Count">
            <summary>Gets the number of items in the collection.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.MarshalByRefCollectionBase.InnerList">
            <summary>Gets the ArrayList stored within the
collection.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.MarshalByRefCollectionBase.IsSynchronized">
            <summary>    Gets a value indicating whether access to the collection
    is synchronized (thread-safe).</summary>
        </member>
        <member name="P:Atalasoft.Imaging.MarshalByRefCollectionBase.SyncRoot">
            <summary>    Gets an object that can be used to synchronize access to
    the collection.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.MarshalByRefReadOnlyCollectionBase">
            <summary>    A base abstract
    (MustInherit in Visual
    Basic) collection class intended for strongly typed read-only
    collections containing unmanaged data.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.MarshalByRefReadOnlyCollectionBase.CopyTo(System.Array,System.Int32)">
            <summary>Copies the collection items into an array.</summary>
            <param name="array">The array that will hold the collection items.</param>
        </member>
        <member name="M:Atalasoft.Imaging.MarshalByRefReadOnlyCollectionBase.GetEnumerator">
            <summary>Returns a reference to an IEnumerator interface, whose
purpose is to grant access to an enumeration's items.</summary>
            <returns>A reference to an IEnumerator
interface.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.MarshalByRefReadOnlyCollectionBase.Count">
            <summary>The number of items in the collection.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.MarshalByRefReadOnlyCollectionBase.InnerList">
            <summary>Gets the ArrayList stored within the
collection.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.MarshalByRefReadOnlyCollectionBase.IsSynchronized">
            <summary>    Gets a value indicating whether access to the collection
    is synchronized (thread-safe).</summary>
        </member>
        <member name="P:Atalasoft.Imaging.MarshalByRefReadOnlyCollectionBase.SyncRoot">
            <summary>    Gets an object that can be used to synchronize access to
    the collection.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.OperationCancelledException">
            <summary>This class is used to cancel running operations.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.OperationCancelledException._ctor">
            <summary>Creates an OperationCancelledException object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.OperationCancelledException._ctor">
            <summary>Creates a new instance of OperationCancelledException.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.OperationCancelledException._ctor(System.String)">
            <summary>Creates a new instance of OperationCancelledException
specifying the exception message.</summary>
            <param name="message">A text description of the exception.</param>
        </member>
        <member name="M:Atalasoft.Imaging.OperationCancelledException._ctor(System.String,System.Exception)">
            <summary>Creates a new instance of OperationCancelledException
specifying an exception message and the inner exception.</summary>
            <param name="message">A text description of the exception.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Atalasoft.Imaging.Palette">
            <summary>The palette contains color information that is applied to
colormapped images. Use this object to modify and read the palette
colors.</summary>
            <remarks>A palette consists of 256 colors, each index is a byte value
of R, G, B, and sometimes Alpha values.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Palette._ctor">
            <summary>Initializes a new instance of the Palette class.Create a
Palette object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Palette._ctor">
            <summary>Initializes a new instance of the Palette class with a
default of 256 colors.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Palette._ctor(System.Drawing.Color[])">
            <summary>Creates a new instance of Palette specifying the colors of
the palette.</summary>
            <param name="colors">An array of System.Drawing.Color objects used to fill the
palette.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Palette._ctor(System.Int32)">
            <summary>Initialize a new instance of a Palette specifying the number
of colors to start with.</summary>
            <param name="colors">The number of colors in the palette.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Palette._ctor(Atalasoft.Imaging.PaletteType)">
            <summary>Initialize a new instance of a Palette class specifying the
PaletteType.</summary>
            <param name="palType">The type of palette to create.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.Clone">
            <summary>Returns a deep copy of this Palette.</summary>
            <returns>A deep copy of this Palette.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.Dispose">
            <summary>Cleans up unmanaged resources. Call Dispose when completed
using the Palette object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.GetClosestPaletteIndex">
            <summary>Returns the palette index that best matches a specified
color.Returns the palette index containing a color that most
closely matches a specific color.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.GetClosestPaletteIndex(System.Drawing.Color)">
            <summary>Returns the palette index that best matches a specified
color.</summary>
            <param name="color">The color to look up in the palette.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.GetClosestPaletteIndex(System.Drawing.Color,System.Boolean@)">
            <summary>Returns the palette index that best matches a specified
color, returning a value if there was an exact match.</summary>
            <param name="color">The color to look up in the palette.</param>
            <param name="exact">This value is set to true if there is an
exact match, otherwise false.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.GetEntry(System.Int32)">
            <summary>Returns the color of a particular index entry in the
palette.</summary>
            <returns>The color of the palette entry.</returns>
            <remarks>See SetEntry to change the color of a palette entry.</remarks>
            <param name="index">The palette index (0 - 255).</param>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.GetSystemPalette">
            <summary>Returns the system palette of an 8-bit device.Returns the
system palette.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.GetSystemPalette">
            <summary>Returns the system palette of the current display if it's an
8-bit device, null (Nothing in
Visual Basic) if the device is greater then 8 bits.</summary>
            <returns>A Palette containing the system palette colors.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.GetSystemPalette(System.IntPtr)">
            <summary>Returns the system palette of the specified device if it's
8-bit, null (Nothing in Visual
Basic) if the device is greater then 8 bits.</summary>
            <returns>A Palette containing the system palette colors.</returns>
            <param name="device">A handle to the device context.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.HasAlpha">
            <summary>Returns a value indicating if the palette contains alpha
information.</summary>
            <returns>A value indicating if the palette contains alpha
information.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.SetEntry(System.Int32,System.Drawing.Color)">
            <summary>Sets the color of a particular index entry in the
palette.</summary>
            <remarks>See GetEntry to retreive the color of the palette
entry.</remarks>
            <param name="index">The palette index (0 - 255).</param>
            <param name="newColor">The color to set the Palette index to.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.SetPalette(Atalasoft.Imaging.PaletteType)">
            <summary>Change the palette entries to a standard PaletteType.</summary>
            <param name="palType">The specified PaletteType.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.ToArray">
            <summary>Copies the palette data into an array of System.Drawing.Color
objects.</summary>
            <returns>An array of Color objects.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.Palette.Colors">
            <summary>Returns the number of colors in the palette.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.PixelFormatChangeEventArgs">
            <summary>Provides data for the PixelFormatChange event.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.PixelFormatChangeEventArgs._ctor">
            <summary>    Initializes a new instance of the
    PixelFormatChangeEventArgs class.Creates a
    PixelFormatChangeEventArgs object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.PixelFormatChangeEventArgs._ctor">
            <summary>    Initializes a new instance of the
    PixelFormatChangeEventArgs class.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.PixelFormatChangeEventArgs._ctor(Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat)">
            <summary>    Initializes a new instance of the
    PixelFormatChangeEventArgs class specifying the current and new
    PixelFormat.</summary>
            <param name="currentPixelFormat">The current PixelFormat.</param>
            <param name="newPixelFormat">The new PixelFormat.</param>
        </member>
        <member name="P:Atalasoft.Imaging.PixelFormatChangeEventArgs.Cancel">
            <summary>    When setting this property to true, the current operation
    will be cancelled.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.PixelFormatChangeEventArgs.CurrentPixelFormat">
            <summary>Gets the PixelFormat of the current image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.PixelFormatChangeEventArgs.NewPixelFormat">
            <summary>Gets the PixelFormat to change the image to.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ProcessQueue">
            <summary>Holds a collection of ProcessQueuedItems that are awaiting
asynchronous processing.</summary>
            <remarks>When the Workspace is runing in asynchronous mode all
image processing calls through the
Workspace.ProcessImage method or the read and save
methods will put the process into this queue. The purpose is to
process images sequentially and prevent threading issues. Each
workspace object can process only one image at a time, but as long
as Workspace.IsAsynchronous is true, the
processing will be performed in a separate thread.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ProcessQueue._ctor">
            <summary>Create a instance of the
ProcessQueue.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ProcessQueue.CopyTo">
            <summary>Copies items from the collection to an array.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ProcessQueue.CopyTo(Atalasoft.Imaging.ProcessQueuedItem[],System.Int32)">
            <summary>Copies ProcessQueuedItems from this collection to an
array.</summary>
            <param name="queuedItems">The array to copy the items into.</param>
            <param name="index">The starting index in the array where the items will be
copied.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ProcessQueue.Enqueue">
            <summary>Add a new item into the process queue. Adds a new item to the
queue.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ProcessQueue.Enqueue(Atalasoft.Imaging.ProcessQueuedItem)">
            <summary>Add a new item into the process queue.</summary>
            <param name="item">The

ProcessQueuedItem containing the thread information to
process.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ProcessQueue.CurrentItem">
            <summary>Gets the ProcessQueuedItem that is currently being
processed.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ProcessQueuedItem">
            <summary>    This class contains information regarding the image
    processing function that is to be run when the ProcessQueue is
    ready.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ProcessQueuedItem.ProcessingClass">
            <summary>The instance of a class that will be processed in a new
thread.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ProcessQueuedItem.ProcessUndo">
            <summary>Indicates if an undo should be created before the thread
begins.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ProcessQueuedItem.Thread">
            <summary>Gets or sets the thread that the process is running
in.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ProcessUndo">
            <summary>Contains information about an undo level that will be used in
the ProcessQueue.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ProcessUndo._ctor">
            <summary>Initialize a new instance of ProcessUndo.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ProcessUndo._ctor">
            <summary>Initialize a new instance of ProcessUndo.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ProcessUndo._ctor(System.String,System.Boolean)">
            <summary>Initialize a new instance of ProcessUndo specifying the Undo
Description and if the image should be copied.</summary>
            <param name="undoDescription">The undo description.</param>
            <param name="copyCurrent">Specifies if the image should be copied before
undoing.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ProcessUndo.CopyCurrent">
            <summary>If true, the image will be copied before
placing into the undo.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ProcessUndo.UndoDescription">
            <summary>The description of the undo level.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ProgressEventArgs">
            <summary>Provides data for the Progress event.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ProgressEventArgs._ctor">
            <summary>Creates a ProgressEventArgs object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ProgressEventArgs._ctor">
            <summary>Creates a new instance of ProgressEventArgs.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ProgressEventArgs._ctor(System.Int32,System.Int32)">
            <summary>Creates a new instance of ProgressEventArgs specifying the
current and total progress values.</summary>
            <param name="current">The current progress value.</param>
            <param name="total">The total progress value at 100 completion.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ProgressEventArgs._ctor(System.Int32,System.Int32,System.String)">
            <summary>Creates a new instance of ProgressEventArgs specifying the
current and total values, and the name of the method.</summary>
            <param name="current">The current progress value.</param>
            <param name="total">The total progress value at 100 completion.</param>
            <param name="methodName">The name of the method raising the progress event.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ProgressEventArgs.Cancel">
            <summary>When set to true, allows the current image
processing function to be cancelled.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ProgressEventArgs.Current">
            <summary>Gets the current value of the progress operation.</summary>
            <remarks>When processing an image, this value is usually the current
row of the image in pixels. When downloading a file via HTTP, it's
the number of bytes downloaded.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ProgressEventArgs.MethodName">
            <summary>The name of the method calling the progress event.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ProgressEventArgs.Total">
            <summary>Gets the total number of units for this operation.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.SerializationHelper">
            <summary>SerializationHelper is a set of static methods to help in the
process of deserialization of an object graph.</summary>
            <remarks>In the current .NET model, one must ask for a field within a
serialization object acting under the assumption that it will be
there. If the field isn't there, an Exception is thrown. An object
is deserializable if and only if all fields of an object have been
serialized. In the dotImage model, an object is constructed with
default values which are then replaced by the information in the
SerializationInfo object. In dotImage this makes more sense since
several objects' underlying data is optional or mutually exclusive.
To retrieve a scalar, pass GetValue() the SerializationInfo object,
the name of the field, and a reference to the variable that will
hold the value. GetValue() will return true if it performed an
assignment to the variable. To retrieve a non-scalar type, pass
GetValue() the SerializationInfo object, the name of the field and
its expected Type. GetValue will return the object if it found it,
null otherwise.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.SerializationHelper.GetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.Boolean@)">
            <summary>Get a value from a SerializationInfo object.</summary>
            <returns>true if the value was found, false otherwise.</returns>
            <param name="info">The object in which to look for the value.</param>
            <param name="name">The name of the value.</param>
            <param name="val">The place to store the retrieved value.</param>
        </member>
        <member name="M:Atalasoft.Imaging.SerializationHelper.GetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.Byte@)">
            <summary>Get a value from a SerializationInfo object.</summary>
            <returns>true if the value was found, false otherwise.</returns>
            <param name="info">The object in which to look for the value.</param>
            <param name="name">The name of the value.</param>
            <param name="val">The place to store the retrieved value.</param>
        </member>
        <member name="M:Atalasoft.Imaging.SerializationHelper.GetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.Char@)">
            <summary>Get a value from a SerializationInfo object.</summary>
            <returns>true if the value was found, false otherwise.</returns>
            <param name="info">The object in which to look for the value.</param>
            <param name="name">The name of the value.</param>
            <param name="val">The place to store the retrieved value.</param>
        </member>
        <member name="M:Atalasoft.Imaging.SerializationHelper.GetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.DateTime@)">
            <summary>Get a value from a SerializationInfo object.</summary>
            <returns>true if the value was found, false otherwise.</returns>
            <param name="info">The object in which to look for the value.</param>
            <param name="name">The name of the value.</param>
            <param name="val">The place to store the retrieved value.</param>
        </member>
        <member name="M:Atalasoft.Imaging.SerializationHelper.GetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.Decimal@)">
            <summary>Get a value from a SerializationInfo object.</summary>
            <param name="info">The object in which to look for the value.</param>
            <param name="name">The name of the value.</param>
            <param name="val">The place to store the retrieved value.</param>
        </member>
        <member name="M:Atalasoft.Imaging.SerializationHelper.GetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.Double@)">
            <summary>Get a value from a SerializationInfo object.</summary>
            <returns>true if the value was found, false otherwise.</returns>
            <param name="info">The object in which to look for the value.</param>
            <param name="name">The name of the value.</param>
            <param name="val">    
    Summary
    
    
        The place
             to store the retrieved value.
    </param>
        </member>
        <member name="M:Atalasoft.Imaging.SerializationHelper.GetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.Int16@)">
            <summary>Get a value from a SerializationInfo object.</summary>
            <returns>true if the value was found, false otherwise.</returns>
            <param name="info">The object in which to look for the value.</param>
            <param name="name">The name of the value.</param>
            <param name="val">The place to store the retrieved value.</param>
        </member>
        <member name="M:Atalasoft.Imaging.SerializationHelper.GetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.Int32@)">
            <summary>Get a value from a SerializationInfo object.</summary>
            <returns>true if the value was found, false otherwise.</returns>
            <param name="info">The object in which to look for the value.</param>
            <param name="name">The name of the value.</param>
            <param name="val">The place to store the retrieved value.</param>
        </member>
        <member name="M:Atalasoft.Imaging.SerializationHelper.GetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.Int64@)">
            <summary>Get a value from a SerializationInfo object.</summary>
            <returns>true if the value was found, false otherwise.</returns>
            <param name="info">The object in which to look for the value.</param>
            <param name="name">The name of the value.</param>
            <param name="val">The place to store the retrieved value.</param>
        </member>
        <member name="M:Atalasoft.Imaging.SerializationHelper.GetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.Single@)">
            <summary>Get a value from a SerializationInfo object.</summary>
            <returns>true if the value was found, false otherwise.</returns>
            <param name="info">The object in which to look for the value.</param>
            <param name="name">The name of the value.</param>
            <param name="val">The place to store the retrieved value.</param>
        </member>
        <member name="M:Atalasoft.Imaging.SerializationHelper.GetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.Type)">
            <summary>Get an object from a SerializationInfo object.</summary>
            <returns>An object of the Type specified if found, null
otherwise.</returns>
            <param name="info">The object in which to look for the value.</param>
            <param name="name">The name of the value.</param>
            <param name="type">The expected type of the object.</param>
        </member>
        <member name="T:Atalasoft.Imaging.UndoCollection">
            <summary>This collection object contains undo levels and methods to
add new undos and specify the maximum number of undos.</summary>
            <remarks>    The undo collection may be used to create an Undo/Redo
    menu in your project. You can access the description property
    to determine what the next undo or redo will accomplish. The
    following code example shows how this is done.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.UndoCollection.Add(System.String,System.Boolean)">
            <summary>Add a new undo level to the undo collection specifying the
description and if the Image is copied.</summary>
            <param name="undoDescription">The textual description of this undo level.</param>
            <param name="copyCurrent">If true, the image will be copied into the
undo collection.</param>
        </member>
        <member name="M:Atalasoft.Imaging.UndoCollection.CopyTo">
            <summary>Copies the UndoLevels into an array.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.UndoCollection.CopyTo(Atalasoft.Imaging.UndoLevel[],System.Int32)">
            <summary>Copies the UndoLevels into an array.</summary>
            <param name="undos">An array of UndoLevel where the collection items will be
stored.</param>
            <param name="index">An index in the array where items will be stored.</param>
        </member>
        <member name="M:Atalasoft.Imaging.UndoCollection.Dispose">
            <summary>Clean up unmanaged resources by disposing each AtalaImage in
the collection.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.UndoCollection.Redo">
            <summary>Redo the latest change by setting the next image in the Undo
collection.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.UndoCollection.Undo">
            <summary>Undo the latest change by setting the last image in the Undo
collection.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.UndoCollection.Item(System.Int32)">
            <summary>Gets the undo item.</summary>
            <param name="index">Zero based iIndex of the undo item.</param>
        </member>
        <member name="P:Atalasoft.Imaging.UndoCollection.Levels">
            <summary>Gets or set the number of Undo levels in this
collection.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.UndoCollection.NumRedos">
            <summary>Gets the number of redos.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.UndoCollection.NumUndos">
            <summary>Gets the number of undos.</summary>
        </member>
        <member name="E:Atalasoft.Imaging.UndoCollection.GetCurrentImageCollection">
            <summary>This event is fired to retrieve the current image
collection.</summary>
        </member>
        <member name="E:Atalasoft.Imaging.UndoCollection.NewImageCollection">
            <summary>This event is fired to set the current image
collection.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.UndoLevel">
            <summary>Contains an undo level item which is created when the
UndoLevels is greater than 0.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.UndoLevel._ctor">
            <summary>Creates a new instance of UndoLevel.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.UndoLevel._ctor">
            <summary>    Creates a new instance of UndoLevel.Creates a new
    instance of UndoItem.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.UndoLevel._ctor(Atalasoft.Imaging.ImageCollection,System.String)">
            <summary>    Creates a new instance of UndoLevel specifying the
    ImageCollection and undo description.</summary>
            <param name="images">The image collection that this undo level will
contain.</param>
            <param name="description">The description of this undo level.</param>
        </member>
        <member name="P:Atalasoft.Imaging.UndoLevel.Description">
            <summary>Gets the undo description associated with this undo
level.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.UndoLevel.Images">
            <summary>Gets the undo image collection associated with this undo
level.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Workspace">
            <summary>    The workspace object is the container
    that is used to manage changes to images and provide an
    interface to open, save, and manipulate images either
    synchronously or asynchronously.</summary>
            <remarks>    The Workspace object, part of the
    Atalasoft.Imaging namespace, provides a
    container that allows for intuitive image processing and
    management of AtalaImage and ImageCollection
    objects. The Workspace can be used to manage
    changes to AtalaImage objects and access
    methods to open, save, and manipulate images.
    Many image processing functions may create new
    AtalaImage objects. The
    Workspace manages the creation of these
    objects by keeping a single current image and providing events
    when the image changes. The Workspace also
    disposes of old images when they are no longer needed. You can
    access the current AtalaImage with the
    Image property of the
    Workspace object.
    The Workspace is designed to operate
    either synchronously or asynchronously for multi-threading
    operations. This behavior is set by the Asynchronous
    property.
    See the WinForm's WorkspaceViewer and WebForm's
    WorkspaceViewer for a Workspace object with a user interface
    for displaying images.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace._ctor">
            <summary>Initializes a new instance of WorkspaceViewer.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.ApplyCommand">
            <summary>Applies an ImageCommand to the current image in order to
process it.</summary>
            <remarks>If Asynchronous is true, the command will be
processed in a background thread.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.ApplyCommand(Atalasoft.Imaging.ImageProcessing.ImageCommand)">
            <summary>Applies an ImageCommand to the current image in order to
process it.</summary>
            <param name="command">The Command to apply. Any object that inherits ImageCommand
can be passed into this method.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.ApplyCommand(Atalasoft.Imaging.ImageProcessing.ImageCommand,System.String)">
            <summary>Creates an undo level, then applies an ImageCommand to the
current image in order to process it.</summary>
            <param name="command">The Command to apply. Any object that inherits ImageCommand
can be passed into this method.</param>
            <param name="undoDescription">A description of the undo level that will be added before
processing.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.Dispose">
            <summary>Cleans up all resources held by this Workspace including all
images in the ImageCollection and undos in the
UndoCollection.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.OnChangedImage(Atalasoft.Imaging.ImageEventArgs)">
            <summary>Invoked when pixel data in the current image changes without
setting a new image, or the current image in the Images collection
changes. Fires the

ChangedImage event.</summary>
            <param name="e">EventArgs containing the changed image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.OnDisposeImage(Atalasoft.Imaging.ImageCancelEventArgs)">
            <summary>Invoked when pixel data in the current image changes without
setting a new image. Fires the

DisposeImage event.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.OnImageStreamCompleted(Atalasoft.Imaging.ImageStreamEventArgs)">
            <summary>Invoked after an image has been read or saved signifying that
the Stream which was passed in can be closed.
Fires the

ImageStreamCompleted event.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.OnNewImage(Atalasoft.Imaging.ImageEventArgs)">
            <summary>Invoked when the

Image property of the Workspace is set to a
new image, a command has been applied, which results in a new
image, or a new image has been loaded into memory. Fires the

NewImage event.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.OnProcessCompleted(Atalasoft.Imaging.ImageEventArgs)">
            <summary>Invoked when an asynchronous process has completed. Fires the

ProcessCompleted event.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.OnProcessError(Atalasoft.Imaging.ExceptionEventArgs)">
            <summary>Invoked when an error occurs in a separate thread when being
processed asynchronously. Fires the

ProcessError event.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.Open">
            <summary>Decodes an image from a file or stream and sets it to the
current image.</summary>
            <remarks>Opening an image with this method when the
Workspace is in Asynchronous mode will add this
operation to the ProcessQueue and open Asynchronously.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.Open(System.IO.Stream)">
            <summary>Decodes an image from a stream and sets it to the current
image.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.Open(System.IO.Stream,System.Int32)">
            <summary>Decodes an image from a stream specifying the frame index of
a multipaged file, and sets it to the current image.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
            <param name="frameIndex">If the image contains multiple frames, this is the zero based
index to load.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.Open(System.IO.Stream,System.Int32,Atalasoft.Imaging.Metadata.MetadataContainer)">
            <summary>Decodes an image from a stream specifying the frame index of
a multipaged file, and sets it to the current image while returning
any metadata the image might contain.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
            <param name="frameIndex">If the image contains multiple frames, this is the zero based
index to load.</param>
            <param name="metadata">    Returns the image metadata stored in the image that is
    read based in the flag that is set in this object.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.Open(System.IO.Stream,Atalasoft.Imaging.Metadata.MetadataContainer)">
            <summary>Decodes an image from a stream and sets it to the current
image while returning any metadata the image might contain.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
            <param name="metadata">    Returns the image metadata stored in the image that is
    read based in the flag that is set in this object.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.Open(System.String)">
            <summary>Decodes an image from a file and sets it to the current
image.</summary>
            <remarks>A URL formatted string can be passed to download a file. If
the address is pointing to an FTP site, you may need to include the
username and password in the URL to allow access to the file. The
format for this would be
"ftp://username:password@ftp.mysite.com".</remarks>
            <param name="fileName">The path of the file to open.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.Open(System.String,System.Int32)">
            <summary>Decodes an image from a file specifying the frame index of a
multipaged file, and sets it to the current image.</summary>
            <remarks>A URL formatted string can be passed to download a file. If
the address is pointing to an FTP site, you may need to include the
username and password in the URL to allow access to the file. The
format for this would be
"ftp://username:password@ftp.mysite.com".</remarks>
            <param name="fileName">The path of the file to open.</param>
            <param name="frameIndex">If the image contains multiple frames, this is the zero based
index to load.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.Open(System.String,System.Int32,Atalasoft.Imaging.Metadata.MetadataContainer)">
            <summary>Decodes an image from a file specifying the frame index of a
multipaged file, and sets it to the current image while returning
any metadata the image might contain.</summary>
            <remarks>A URL formatted string can be passed to download a file. If
the address is pointing to an FTP site, you may need to include the
username and password in the URL to allow access to the file. The
format for this would be
"ftp://username:password@ftp.mysite.com".</remarks>
            <param name="fileName">The path of the file to open.</param>
            <param name="frameIndex">If the image contains multiple frames, this is the zero based
index to load.</param>
            <param name="metadata">    Returns the image metadata stored in the image that is
    read based in the flag that is set in this object.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.Open(System.String,Atalasoft.Imaging.Metadata.MetadataContainer)">
            <summary>Decodes an image from a file and sets it to the current image
while returning any metadata the image might contain.</summary>
            <remarks>A URL formatted string can be passed to download a file. If
the address is pointing to an FTP site, you may need to include the
username and password in the URL to allow access to the file. The
format for this would be
"ftp://username:password@ftp.mysite.com".</remarks>
            <param name="fileName">The path of the file to open.</param>
            <param name="metadata">    Returns the image metadata stored in the image that is
    read based in the flag that is set in this object.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.Save">
            <summary>Writes the current AtalaImage or ImageCollection to a file or
stream.</summary>
            <remarks>Saving an image with this method when the
Workspace is in Asynchronous mode will add this
operation to the ProcessQueue and save Asynchronously.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.Save(System.IO.Stream,Atalasoft.Imaging.Codec.ImageEncoder)">
            <summary>Writes the current AtalaImage or ImageCollection to a stream
specifying the ImageEncoder to use to encode the image.</summary>
            <param name="stream">A stream containing the file which the current image will be
encoded to.</param>
            <param name="encoder">The ImageEncoder which will be used to encode the
image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.Save(System.IO.Stream,Atalasoft.Imaging.Codec.ImageEncoder,System.Int32)">
            <summary>Writes the current AtalaImage or ImageCollection to a stream
specifying the ImageEncoder to use to encode the image and the
image index in the collection to save.</summary>
            <param name="stream">A stream containing the file which the current image will be
encoded to.</param>
            <param name="encoder">The ImageEncoder which will be used to encode the
image.</param>
            <param name="frameIndex">The index in the ImageCollection to
save.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.Save(System.String,Atalasoft.Imaging.Codec.ImageEncoder)">
            <summary>Writes the current AtalaImage or ImageCollection to a file
specifying the ImageEncoder to use to encode the image.</summary>
            <remarks>This method can be used to save an image to an FTP server. If
the fileName is pointing to an FTP server, you may need to
include the username and password in the URL to allow the file to
be saved. The format for this would be "ftp://username:password@ftp.mysite.com/folder/newImage.png".</remarks>
            <param name="fileName">The filename to save the current image to.</param>
            <param name="encoder">The ImageEncoder which will be used to encode the
image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.Save(System.String,Atalasoft.Imaging.Codec.ImageEncoder,System.Int32)">
            <summary>Writes the current AtalaImage or ImageCollection to a file
specifying the ImageEncoder to use to encode the image and the
image index in the collection to save.</summary>
            <remarks>This method can be used to save an image to an FTP server. If
the fileName is pointing to an FTP server, you may need to
include the username and password in the URL to allow the file to
be saved. The format for this would be "ftp://username:password@ftp.mysite.com/folder/newImage.png".</remarks>
            <param name="fileName">The filename to save the current image to.</param>
            <param name="encoder">The ImageEncoder which will be used to encode the
image.</param>
            <param name="frameIndex">The index in the ImageCollection to
save.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.Save(System.String,Atalasoft.Imaging.Codec.ImageType)">
            <summary>Writes the current AtalaImage or ImageCollection to a file
specifying the ImageType to use to encode the image.</summary>
            <remarks>This method can be used to save an image to an FTP server. If
the fileName is pointing to an FTP server, you may need to
include the username and password in the URL to allow the file to
be saved. The format for this would be "ftp://username:password@ftp.mysite.com/folder/newImage.png".</remarks>
            <param name="fileName">The filename to save the current image to.</param>
            <param name="imageType">The image type to save this image as.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Workspace.Asynchronous">
            <summary>Gets or sets a value indicating if method calls through this
Workspace object are processed asynchronously in a
background thread.</summary>
            <remarks>    By default, this value is false. When
    this value is true the workspace is operating
    in asynchronous mode and the ProcessQueue is used to queue each
    command that is applied to the image. If the AtalaImage is
    accessed directly, unexpected threading issues might
    occur.
    See Asynchronous Image Processing for more information on
    asynchronous programming in dotImage.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Workspace.AutoDispose">
            <summary>Gets or sets a value indicating if the
Workspace should dispose all images it contains
when finalized.</summary>
            <remarks>This value is true by default. Setting this value to false is
useful when using an Images from another location. This only
prevents images from being disposed when the associated
Workspace object is disposed or finalized. To
prevent images from being disposed when processing, handle the

DisposeImage event and set the cancel property in the event
args to true. Also consider using

Images.Replace instead of the

Image property when setting a new image.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Workspace.Image">
            <summary>Gets or sets the current
AtalaImage
that is active in this Workspace.</summary>
            <remarks>    When the image that is being set already exists in the
    ImageCollection, then that image is set as the current, and the
    
    ChangedImage event fires. When the image being set does not
    exist in the collection, the current image is replaced with the
    new image, and the current image is either added to the
    
    UndoCollection, or disposed.
    To replace the current image, without disposing it, or
    placing it into the UndoCollection, use the
    
    Replace method in the
    
    ImageCollection by calling
    myWorkspace.Images.Replace(newImage) instead of
    myWorkspace.Image = newImage.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Workspace.Images">
            <summary>Gets the ImageCollection of this Workspace
object.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Workspace.Queue">
            <summary>Gets the
ProcessQueue
containing queued items that this
Workspace
object is currently processing.</summary>
            <remarks>The ProcessQueue only contains items if the
Workspace is running in Asynchronous mode.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Workspace.Undos">
            <summary>Gets the UndoCollection object containing the undo history of
this Workspace.</summary>
        </member>
        <member name="E:Atalasoft.Imaging.Workspace.ChangedImage">
            <summary>Fires when pixel data in the current image changes or the
   
Current image in the

ImageCollection is changed.</summary>
        </member>
        <member name="E:Atalasoft.Imaging.Workspace.DisposeImage">
            <summary>Fired when an image in the ImageCollection or UndoCollection
is disposed.</summary>
            <remarks>This even should be handled if images are being shared. If
this event contains an image that shouldn't be disposed, set the
Cancel property to true.</remarks>
        </member>
        <member name="E:Atalasoft.Imaging.Workspace.ImageStreamCompleted">
            <summary>Fires after an image has been read or saved signifying that
the Stream which was passed in can be
closed.</summary>
            <remarks>This event only fires if the stream was created outside
dotImage.</remarks>
        </member>
        <member name="E:Atalasoft.Imaging.Workspace.NewImage">
            <summary>Fires when the

Image property of the Workspace is set to a
new image, a command has been applied, which results in a new
image, or a new image has been loaded into memory.</summary>
            <remarks>This event typically fires when opening an image, or when
processing an image when a new image is generated as a result, and
the old image is either disposed, or placed into an undo level.
This event is not fired when the current image in the

ImageCollection changes, or when the pixel data of the current
image changes due to applying a command with it's

InPlaceProcessing property set to true.</remarks>
        </member>
        <member name="E:Atalasoft.Imaging.Workspace.ProcessCompleted">
            <summary>Fires when an asynchronous process has completed.</summary>
            <remarks>This is fired when processing commands, opening, or saving
images.</remarks>
        </member>
        <member name="E:Atalasoft.Imaging.Workspace.ProcessError">
            <summary>Fires when an error occurs in a separate thread when being
processed asynchronously.</summary>
            <remarks>This event can be handled to react to an exception when it
occurs in another thread. Typically a message box with exception
details is displayed to the user. When this event is not handled,
and the Asynchronous property is true, errors can go un-noticed,
and without any error messages displayed.</remarks>
        </member>
        <member name="E:Atalasoft.Imaging.Workspace.Progress">
            <summary>Fires while an image is being processed.</summary>
            <remarks>Handle this event to show a progress bar or to cancel an
operation while in progress. Some operations will fire this event
from 0 - 100 multiple times.</remarks>
        </member>
        <member name="M:__Delegates.ExceptionEventHandler(System.Object,Atalasoft.Imaging.ExceptionEventArgs)">
            <summary>This EventHandler is used to pass along an exception during
an image processing operation.</summary>
            <param name="sender">The object in which the exception occurred.</param>
            <param name="e">An ExceptionEventArgs object containing information about the
exception.</param>
        </member>
        <member name="M:__Delegates.ImageCancelEventHandler(System.Object,Atalasoft.Imaging.ImageCancelEventArgs)">
            <summary>Handles canceling operations.</summary>
            <param name="sender">The object raising the event.</param>
            <param name="e">An ImageCancelEventArgs object for this event.</param>
        </member>
        <member name="M:__Delegates.ImageEventHandler(System.Object,Atalasoft.Imaging.ImageEventArgs)">
            <summary>Event Handler for events requiring the image
information.</summary>
            <param name="sender">The object raising the event.</param>
            <param name="e">An ImageEventArgs object for this event.</param>
        </member>
        <member name="M:__Delegates.ImageFileIOEventHandler(System.Object,Atalasoft.Imaging.ImageStreamEventArgs)">
            <summary>Event Handler requiring the a Stream object.</summary>
            <param name="sender">The object raising the event.</param>
            <param name="e">an ImageStreamEventArgs object for this event.</param>
        </member>
        <member name="M:__Delegates.PixelFormatChangeEventHandler(System.Object,Atalasoft.Imaging.PixelFormatChangeEventArgs)">
            <summary>Handles operations that require the PixelFormat of an image
to change.</summary>
            <param name="sender">The object raising the event.</param>
            <param name="e">The PixelFormatChangeEventArgs for this event.</param>
        </member>
        <member name="M:__Delegates.ProgressEventHandler(System.Object,Atalasoft.Imaging.ProgressEventArgs)">
            <summary>Handles the progress event for operations.</summary>
            <remarks>The progress callback can be handled to show progress while
an image is being loaded, saved, or processed. Current and Total
usually signifies the image row in pixels. When downloading a file,
Current and Total represents the number of bytes. It can also be
used to cancel the current action. When handling a progress event,
the percentage can be calculated by dividing Current by Total. Some
actions will cause multiple progresses (0 - 100) to be
called.</remarks>
            <param name="sender">The object raising the event.</param>
            <param name="e">The ProgressEventArgs for this event.</param>
        </member>
        <member name="N:Atalasoft.Imaging.Codec">
            <summary>Contains classes that deal with decoding and encoding images
of various formats.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.IAppendable">
            <summary>    An interface that an ImageEncoder can implement when it
    supports appending an image to the end of an existing
    file.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.IAppendable.Append">
            <summary>Gets or sets a value indicating if the image will be appended
to the end of a file.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.BmpCompression">
            <summary>Contains the various compression types available for Bmp
images.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.BmpCompression.None">
            <summary>No compression.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.BmpCompression.Rle">
            <summary>Run Length Compression, only valid for 8-bit image
saves.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.GifFrameDisposal">
            <summary>The frame disposal method to use for animated GIF
images.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.GifFrameDisposal.None">
            <summary>No action is taken.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.GifFrameDisposal.LeaveImage">
            <summary>Leaves the image in place when the next frame is
drawn.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.GifFrameDisposal.RestorePrevious">
            <summary>Restores the previous frame.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.GifFrameDisposal.RestoreBackgroundColor">
            <summary>Restores the area occupied by the image with the animation
background color.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.ImageType">
            <summary>The supported image file formats that dotImage can either
read or write.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.ImageType.Unknown">
            <summary>Image file format is undefined</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.ImageType.Jpeg">
            <summary>Joint Photographic Experts Group. Uses lossy compression
commonly used for Photographic type images. Read and Write.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.ImageType.Png">
            <summary>Portable Network Graphic supporting lossless compression.
Read and Write.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.ImageType.Tiff">
            <summary>Tagged Image File. This is a universal and well known format
for many uses inluding FAX and multipaged images. Read and
Write.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.ImageType.Pcx">
            <summary>ZSoft PaintBrush. Read and Write.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.ImageType.Tga">
            <summary>Truevision Targa. May include an alpha channel. Read and
Write.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.ImageType.Bmp">
            <summary>Windows Bitmap. Read and Write.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.ImageType.Wmf">
            <summary>Windows Meta File. Read and Write (raster only).</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.ImageType.Emf">
            <summary>Enhanced Windows Meta File. Read and Write (raster
only).</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.ImageType.Psd">
            <summary>Adobe (tm) Photoshop format. Read and Write (flattened image
only).</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.ImageType.Wbmp">
            <summary>Wireless Bitmap. Black and White format used with portable
devices. Read and Write</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.ImageType.Gif">
            <summary>Graphics Interchange Format (LZW license required). Read and
Write.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.ImageType.Tla">
            <summary>A lossless compressed image format similar to PNG with
optional encryption. It can store 32, 24, 16, or 8-bit data.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.ImageType.Pcd">
            <summary>Kodak (tm) PhotoCD. Read only.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.ImageType.J2k">
            <summary>Jpeg2000. Separate Plug-In requred to read and write.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.JpegScaleFactor">
            <summary>The scaling factor to use when reading a Jpeg image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.JpegScaleFactor.Full">
            <summary>The full encoded size.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.JpegScaleFactor.Half">
            <summary>1/2 the encoded size.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.JpegScaleFactor.Quarter">
            <summary>1/4 the encoded size.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.JpegScaleFactor.Eighth">
            <summary>1/8 the encoded size.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.PcdResolution">
            <summary>PhotoCD Resolution (image size) to load.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.PcdResolution.BaseQuarter">
            <summary>1/4 the size and 1/16 the memory of the base image. 192 x
128 pixels</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.PcdResolution.BaseHalf">
            <summary>1/2 the size and 1/4 the memory of the base image. 384 x
256 pixels</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.PcdResolution.Base">
            <summary>The base size of the PCD image. 768 x 512
pixels</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.PcdResolution.BaseX2">
            <summary>Double the size and 4 times the memory of the base image.
1536 x 1024 pixels</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.PcdResolution.BaseX4">
            <summary>4 times the size and 16 times the memory of the base image.
3072 x 2048 pixels</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.PcdResolution.BaseX8">
            <summary>8 times the size and 64 times the memory of the base image.
6144 x 4096 pixels</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.TiffCompression">
            <summary>Contains the various compression types available for TIFF
images.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.TiffCompression.NoCompression">
            <summary>Specify no compression.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.TiffCompression.Group3FaxEncoding">
            <summary>CCITT Group 3 fax encoding. Used on 1-bit images only,
otherwise uses no compression.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.TiffCompression.Group4FaxEncoding">
            <summary>CCITT Group 4 fax encoding. Used on 1-bit images only,
otherwise uses no compression.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.TiffCompression.JpegCompression">
            <summary>Lossy JPEG compression. Used on 8-bit grayscale and 24-bit
RGB images only, otherwise uses no compression.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.TiffCompression.MacintoshPackbits">
            <summary>A modified RLE (run length encoding) style of
compression</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.TiffCompression.Deflate">
            <summary>ZIPLib compression, similar to PNG and WinZip</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.TiffCompression.Lzw">
            <summary>LZW compression.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.TiffCompression.ModifiedHuffman">
            <summary>CCITT modified Huffman RLE. Used on 1-bit images only,
otherwise uses no compression.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.BmpDecoder">
            <summary>    An ImageDecoder used to read Windows Bitmap (BMP) images
    from a System.IO.Stream.</summary>
            <remarks>By default, when opening a Bmp image using the AtalaImage or
Workspace objects, this decoder will automatically be selected from
the RegisteredDecoders and does not have to be explicitly
set.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.BmpDecoder._ctor">
            <summary>Initializes a new instance of a BmpDecoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.BmpDecoder.GetImageInfo(System.IO.Stream)">
            <summary>Retreive information from a Bmp image stored in a Stream
without decoding the image data. Gets the BMP image
information.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.BmpDecoder.IsValidFormat(System.IO.Stream)">
            <summary>    Returns true if the specified Stream contains a Bmp
    image.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.BmpDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Returns an AtalaImage from a Stream containing a Bmp encoded
image.Reads the BMP to an AtalaImage.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.BmpDecoder.SupportedImageType">
            <summary>Returns a Bmp ImageType enumeration value.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.BmpEncoder">
            <summary>    An ImageEncoder that will write Windows Bitmap (BMP)
    images to a System.IO.Stream.</summary>
            <remarks>This ImageEncoder can be passed into the the AtalaImage or
Workspace objects when saving to specify a BMP image.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.BmpEncoder._ctor">
            <summary>Initializes a new instance of a BmpEncoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.BmpEncoder._ctor">
            <summary>Initializes a new instance of BmpEncoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.BmpEncoder._ctor(Atalasoft.Imaging.Codec.BmpCompression)">
            <summary>Initializes a new instance of BmpEncoder specifying the
compression to use.</summary>
            <param name="compression">The compression to use when writing Bmp images.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.BmpEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Encode an AtalaImage as a Bmp image to a stream.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.BmpEncoder.Compression">
            <summary>The compression to use when writing Bmp images.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.DecoderCollection">
            <summary>A collection of ImageDecoders.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.DecoderCollection._ctor">
            <summary>Creates a new instance of DecoderCollection.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.DecoderCollection.Add(Atalasoft.Imaging.Codec.ImageDecoder)">
            <summary>Adds an ImageDecoder to the collection.</summary>
            <param name="decoder">The ImageDecoder to add.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.DecoderCollection.Contains(Atalasoft.Imaging.Codec.ImageDecoder)">
            <summary>Determines if a specific ImageDecoder is contained within the
collection.</summary>
            <returns>True if the decoder is in the
collection.</returns>
            <param name="decoder">The ImageDecoder to search for.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.DecoderCollection.CopyTo(Atalasoft.Imaging.Codec.ImageDecoder[],System.Int32)">
            <summary>Copies the decoders to an array.</summary>
            <param name="decoders">An array to hold the ImageDecoders.</param>
            <param name="index">The starting index in the array to start copying data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.DecoderCollection.IndexOf(Atalasoft.Imaging.Codec.ImageDecoder)">
            <summary>Returns the index of a specific ImageDecoder within the
collection.</summary>
            <returns>The index of the ImageDecoder or -1 if the decoder is not in
the collection.</returns>
            <param name="decoder">The ImageDecoder to look for.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.DecoderCollection.Insert(System.Int32,Atalasoft.Imaging.Codec.ImageDecoder)">
            <summary>Inserts an ImageDecoder into the collection at the specified
index.</summary>
            <param name="index">The index to place the ImageDecoder.</param>
            <param name="decoder">The ImageDecoder to insert.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.DecoderCollection.Remove(Atalasoft.Imaging.Codec.ImageDecoder)">
            <summary>Removes an ImageDecoder from the collection.</summary>
            <param name="decoder">The ImageDecoder to remove.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.DecoderCollection.Item(System.Int32)">
            <summary>The indexer of this collection.</summary>
            <param name="index">The index of the ImageDecoder to retrieve.</param>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.DecoderDictionary">
            <summary>A dictionary of ImageDecoders.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.DecoderDictionary._ctor">
            <summary>Creates a new instance of DecoderDictionary.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.DecoderDictionary.Add(Atalasoft.Imaging.Codec.ImageType,Atalasoft.Imaging.Codec.ImageDecoder)">
            <summary>Add a decoder to the project.</summary>
            <param name="imageType">The image type for the decoder.</param>
            <param name="decoder">The ImageDecoder to add.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.DecoderDictionary.Contains(Atalasoft.Imaging.Codec.ImageType)">
            <summary>Determines if a decoder is in the dictionary.</summary>
            <returns>True if the dictionary contains the
decoder.</returns>
            <param name="imageType">The image decoder type.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.DecoderDictionary.CopyTo">
            <summary>Copies items from the dictionary to an array.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.DecoderDictionary.CopyTo(Atalasoft.Imaging.Codec.ImageDecoder[],System.Int32)">
            <summary>Copies ImageDecoders from the dictionary into an
array.</summary>
            <param name="decoders">An array that ImageDecoders will be copied into.</param>
            <param name="index">The index in the array to start copying decoders.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.DecoderDictionary.Remove(Atalasoft.Imaging.Codec.ImageType)">
            <summary>Removes a decoder from the dictionary.</summary>
            <param name="imageType">The image type to remove.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.DecoderDictionary.Item(Atalasoft.Imaging.Codec.ImageType)">
            <summary>Allows the decoders to be enumerated.</summary>
            <param name="index">The index of the item to retrieve.</param>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.EmfDecoder">
            <summary>    An ImageDecoder used to read Enhanced Metafiles (EMF)
    images from a System.IO.Stream.</summary>
            <remarks>    By default, when opening an Emf image using the
    AtalaImage or Workspace objects, this decoder will
    automatically be selected from the RegisteredDecoders and does
    not have to be explicitly set.
    Any vectorized entities saved in the Metafile will be
    converted to a raster format.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.EmfDecoder._ctor">
            <summary>Initializes a new instance of a EmfDecoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.EmfDecoder.GetImageInfo(System.IO.Stream)">
            <summary>Retreive information from an Emf image stored in a Stream
without decoding the image data.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.EmfDecoder.IsValidFormat(System.IO.Stream)">
            <summary>    Returns true if the specified Stream contains an Emf
    image.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.EmfDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Returns an AtalaImage from a Stream containing an Emf encoded
image.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
            <param name="progress">The progress delegate. Can be set to null
(Nothing in Visual Basic).</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.EmfDecoder.SupportedImageType">
            <summary>Returns an Emf ImageType enumeration value.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.EmfEncoder">
            <summary>    An ImageEncoder that will write Enhanced Metafiles (EMF)
    images to a System.IO.Stream.</summary>
            <remarks>This ImageEncoder can be passed into the the AtalaImage or
Workspace objects when saving to specify a EMF image.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.EmfEncoder._ctor">
            <summary>Initializes a new instance of a EmfEncoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.EmfEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Encode an AtalaImage as a Emf image to a stream.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.EpsEncoder">
            <summary>    An ImageEncoder that will write Adobe Encapsulated
    PostScript images to a System.IO.Stream.</summary>
            <remarks>This ImageEncoder can be passed into the the AtalaImage or
Workspace objects when saving to specify an EPS image. The output
format conforms to the Adobe Encapulated PostScript 3.0
specification.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.EpsEncoder._ctor">
            <summary>Initializes a new instance of EpsEncoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.EpsEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Encode an AtalaImage as an EPS image to a stream.</summary>
            <param name="stream">A stream that the encoded image data will be saved to.</param>
            <param name="image">The AtalaImage to encode.</param>
            <param name="progress">The progress delegate. Can be set to null
(Nothing in Visual Basic).</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.EpsEncoder.Creator">
            <summary>This property represents the creator field in the header of
the resulting EPS image.</summary>
            <remarks>If the string contains carriage return or new line
characters, the resulting image may not work properly. By default,
this property is set to "Atalasoft, Inc."</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.EpsEncoder.ImageLocation">
            <summary>This sets the relative location of the image in page space in
units of points.</summary>
            <remarks>    This sets where the image will be rendered on the virtual
    EPS page. In page space, the lower left corner of the page is
    (0, 0), as in a conventional Cartesian coordinate system.
    ImageLocation is the point at which the lower left corner of
    the image will be placed.
    In EPS, the notion of a page doesn't fully apply, but
    since EPS can also be rendered on a PostScript device, if this
    point isn't chosen carefully, the image may get clipped.
    By default, ImageLocation is (72, 72), or one inch up and
    to the right of the lower left corner of a page.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.EpsEncoder.IncludeShowPage">
            <summary>Determines whether or not this image will include the
PostScript showpage command.</summary>
            <remarks>    Some applications that consume EPS do not handle the
    showpage command gracefully. Suppressing it may help
    incompatible application handle the image correctly.
    Setting this property to false will prevent the image
    from displaying if it is sent directly to a PostScript
    device.
    The default value is true.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.EpsEncoder.InvertBW">
            <summary>Switches the sense of black and white in 1 bit-per-pixel
images</summary>
            <remarks>Default value is true.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.EpsEncoder.Resolution">
            <summary>Sets the output resolution of the image.</summary>
            <remarks>    This property is ignored if
    
    UseImageResolution is set to true.
    The default value is 72 pixels per inch.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.EpsEncoder.Scale">
            <summary>Sets the output scale of the image.</summary>
            <remarks>    Use this to change the scale of the image in the EPS
    image. It is initially set to (1, 1), which represents no
    change in scale. To reduce the image, set this property to
    values less than 1 but greater than 0. To enlarge the image,
    set this property to values greater than 1.
    Scale does not need to be uniform. In other words, an
    image can be enlarged in either the x or y directions
    independently.
    Negative values will flip the image as well as scale
    it.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.EpsEncoder.Title">
            <summary>Set the title of the image in the EPS header</summary>
            <remarks>Default value is "Untitled"</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.EpsEncoder.UseImageResolution">
            <summary>Determine whether or not to use the resolution of the image
to be saved.</summary>
            <remarks>    If this property is set to true, then the
    resolution off the image will be used for conversion to EPS. If
    the image resolution has no units or the resolution is invalid,
    it will be treated as 72 pixels per inch.
    Default value is true.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.GifDecoder">
            <summary>    An ImageDecoder used to read Compuserve Graphics
    Interchange (GIF) images from a System.IO.Stream.</summary>
            <remarks>    By default, when opening a Gif image using the AtalaImage
    or Workspace objects, this decoder will automatically be
    selected from the RegisteredDecoders and does not have to be
    explicitly set.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifDecoder._ctor">
            <summary>Initializes a new instance of a GifDecoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifDecoder.GetFrameCount(System.IO.Stream)">
            <summary>Gets the number of frames in a GIF.</summary>
            <returns>The number of frames in a GIF.</returns>
            <param name="stream">A stream containing the encoded image data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifDecoder.GetImageInfo">
            <summary>Retreive information from a Gif image stored in a Stream
without decoding the image data.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifDecoder.GetImageInfo(System.IO.Stream)">
            <summary>Retreive information from a Gif image stored in a Stream
without decoding the image data.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifDecoder.GetImageInfo(System.IO.Stream,System.Int32)">
            <summary>Retreive information from a specified frame in a Gif image
stored in a Stream without decoding the image data.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
            <param name="frameIndex">The zero based frame index to load from an animated
GIF.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifDecoder.IsValidFormat(System.IO.Stream)">
            <summary>    Returns true if the specified Stream contains a Gif
    image.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifDecoder.Read">
            <summary>Returns an AtalaImage from a Stream containing a Gif encoded
image.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifDecoder.Read(System.IO.Stream,System.Int32,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Returns a specified frame to an AtalaImage from a Stream
containing an animated Gif encoded image.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
            <param name="frameIndex">The zero based frame index to load from an animated
GIF.</param>
            <param name="progress">The progress delegate. Can be set to null
(Nothing in Visual Basic).</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Returns an AtalaImage from a Stream containing a Gif encoded
image.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
            <param name="progress">The progress delegate. Can be set to null
(Nothing in Visual Basic).</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifDecoder.Frames">
            <summary>Gets a GifFrameCollection from an animated GIF.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifDecoder.SupportedImageType">
            <summary>Returns a Gif ImageType enumeration value.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.GifEncoder">
            <summary>    An ImageEncoder that will write Compuserve Graphics
    Interchange (GIF) images to a System.IO.Stream.</summary>
            <remarks>This ImageEncoder can be passed into the the AtalaImage or
Workspace objects when saving to specify a GIF image.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifEncoder._ctor">
            <summary>Initializes a new instance of a GifEncoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifEncoder._ctor">
            <summary>Initializes a new instance of a GifEncoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifEncoder._ctor(System.Boolean)">
            <summary>Initializes a new instance of a BmpEncoder specifying the
interlace setting.</summary>
            <param name="interlace">A value indicating if the image is saved with a pixel row
interlacing pattern.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifEncoder._ctor(System.Boolean,System.Boolean)">
            <summary>Creates a new instance of GifEncoder specifying whether to
interlace the image and optimize color depth.</summary>
            <param name="interlace">A value indicating if the image is saved with a pixel row
interlacing pattern.</param>
            <param name="optimizeColorDepth">A value indicating whether to optimize the color
depth.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifEncoder.Save">
            <summary>Encode an AtalaImage as a Gif image to a stream.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Encode an AtalaImage as a Gif image to a stream.</summary>
            <param name="stream">A stream that the encoded image data will be saved to.</param>
            <param name="image">The AtalaImage to encode.</param>
            <param name="progress">The progress delegate. Can be set to null
(Nothing in Visual Basic).</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifEncoder.Save(System.IO.Stream,Atalasoft.Imaging.Codec.GifFrameCollection,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Saves an animated GIF image.</summary>
            <param name="stream">The stream to save the image into.</param>
            <param name="frameCollection">The GifFrameCollection containing information about each
frame in the animation.</param>
            <param name="progress">The progress delegate. Can be set to null
(Nothing in Visual Basic).</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifEncoder.Interlace">
            <summary>Gets or sets a value indicating if the image is saved with a
pixel row interlacing pattern. Default
false</summary>
            <remarks>Interlacing is a technique that allows a Gif to be displayed
gradually. It first displays a blocky image which becomes finer and
more clear as the image loads.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifEncoder.OptimizeColorDepth">
            <summary>Gets or sets a value indicating if the bitdepth is optimized
based on the number of colors in the palette. Default
true.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.GifFrame">
            <summary>The GifFrame class holds information about a single frame in
an animated GIF file.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifFrame._ctor">
            <summary>Creates a new instance of GifFrame.Creates a new instance of
GifFrame.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifFrame._ctor">
            <summary>Creates a new instance of GifFrame using default
values.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifFrame._ctor(Atalasoft.Imaging.AtalaImage)">
            <summary>Creates a new instance of GifFrame specifying the frame
image.</summary>
            <param name="image">The image for this frame.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifFrame._ctor(Atalasoft.Imaging.AtalaImage,System.Drawing.Point)">
            <summary>Creates a new instance of GifFrame specifying the frame image
and location.</summary>
            <param name="image">The image for this frame.</param>
            <param name="location">The location to render the image on the animated
canvas.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifFrame._ctor(Atalasoft.Imaging.AtalaImage,System.Drawing.Point,System.Int32)">
            <summary>Creates a new instance of GifFrame specifying the frame
image, location and delay time.</summary>
            <param name="image">The image for this frame.</param>
            <param name="location">The location to render the image on the animated
canvas.</param>
            <param name="delayTime">The number of milliseconds this frame should be
displayed.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifFrame._ctor(Atalasoft.Imaging.AtalaImage,System.Drawing.Point,System.Int32,System.Boolean,Atalasoft.Imaging.Codec.GifFrameDisposal,System.Int32,System.Boolean)">
            <summary>Creates a new instance of GifFrame specifying the frame
image, location, delay time, interlaced, frame disposal,
transparent index and local palette settings.</summary>
            <param name="image">The image for this frame.</param>
            <param name="location">The location to render the image on the animated
canvas.</param>
            <param name="delayTime">The number of milliseconds this frame should be
displayed.</param>
            <param name="interlaced">A value indicating whether the image is interlaced.</param>
            <param name="frameDisposal">The method of frame disposal to use before rendering the next
frame.</param>
            <param name="transparentIndex">The transparent index for this image.</param>
            <param name="useLocalPalette">A value indicating whether this image uses the global palette
or it's own palette.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifFrame.DelayTime">
            <summary>Gets or sets the number of milliseconds this frame should be
displayed.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifFrame.FrameDisposal">
            <summary>Gets or sets the method of frame disposal to use before
rendering the next frame.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifFrame.Image">
            <summary>Gets or sets the image for this frame.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifFrame.Interlaced">
            <summary>Gets or sets a value indicating whether the image is
interlaced.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifFrame.Location">
            <summary>Gets or sets the location to render the image on the animated
canvas.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifFrame.TransparentIndex">
            <summary>Gets or sets the transparent index for this image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifFrame.UseLocalPalette">
            <summary>Gets or sets a value indicating whether this image uses the
global palette or it's own palette.</summary>
            <remarks>Using a global palette for all of the images will reduce the
file size.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.GifFrameCollection">
            <summary>    The GifFrameCollection class represents an animated GIF
    file. It contains all of the frames and properties for the
    animation.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifFrameCollection._ctor">
            <summary>Creates a new instance of GifFrameCollection.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifFrameCollection.Add(Atalasoft.Imaging.Codec.GifFrame)">
            <summary>Adds a frame to the collection.</summary>
            <param name="frame">The GifFrame to add.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifFrameCollection.Contains(Atalasoft.Imaging.Codec.GifFrame)">
            <summary>Checks to see if a specific frame already exists in the
collection.</summary>
            <returns>True if the frame exists.</returns>
            <param name="frame">The GifFrame to look for.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifFrameCollection.CopyTo(Atalasoft.Imaging.Codec.GifFrame[],System.Int32)">
            <summary>Copies the GifFrames into an array.</summary>
            <param name="frames">An array of GifFrame in which the collection will be
copied.</param>
            <param name="index">The index in the frames array to begin copying to.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifFrameCollection.Dispose">
            <summary>Releases all of the frames from the collection.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifFrameCollection.IndexOf(Atalasoft.Imaging.Codec.GifFrame)">
            <summary>Looks up the index for a specific frame.</summary>
            <returns>The index of the frame.</returns>
            <param name="frame">The GifFrame to look for.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifFrameCollection.Insert(System.Int32,Atalasoft.Imaging.Codec.GifFrame)">
            <summary>Inserts a frame into the collection at the specified
position.</summary>
            <param name="index">The index position which the frame should be placed.</param>
            <param name="frame">The GifFrame to insert.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifFrameCollection.Remove(Atalasoft.Imaging.Codec.GifFrame)">
            <summary>Removes a frame from the collection.</summary>
            <param name="frame">The GifFrame to remove.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifFrameCollection.BackgroundColorIndex">
            <summary>Gets or sets the index in the global palette used as the
background color for the animation canvas.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifFrameCollection.GlobalPalette">
            <summary>Gets or sets the palette used by frames in the GIF.</summary>
            <remarks>Using a global palette can decrease the overall size of the
animated GIF.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifFrameCollection.Height">
            <summary>Gets or sets the height of the animation canvas.</summary>
            <remarks>All images added to the collection must be equal to or less
than this size.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifFrameCollection.Item(System.Int32)">
            <summary>Gets a GifFrame at the specified index.</summary>
            <param name="index">The index of the GifFrame to retrieve.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifFrameCollection.LoopCount">
            <summary>Gets or sets the number of times to loop through the
animation.</summary>
            <remarks>If this value is 0, the animation loop is infinite.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifFrameCollection.TransparentIndex">
            <summary>Gets or sets the index in the global palette which represents
the transparent color.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifFrameCollection.Width">
            <summary>Gets or sets the width of the animation canvas.</summary>
            <remarks>All images added to the collection must be equal or less than
this size.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.GifImageInfo">
            <summary>Summary description for PngImageInfo.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifImageInfo._ctor">
            <summary>Initializes a new instance of GifImageInfo.Creates a
GifImageInfo object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifImageInfo._ctor">
            <summary>Initializes a new instance of GifImageInfo.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifImageInfo._ctor(System.Drawing.Size,System.Int32,Atalasoft.Imaging.Codec.ImageType,Atalasoft.Imaging.Dpi,Atalasoft.Imaging.PixelFormat,System.Int32)">
            <summary>Initialize a new instance of GifImageInfo specifying it's
properties.</summary>
            <param name="size">The width and height of the image.</param>
            <param name="colorDepth">The bits per pixel of the image.</param>
            <param name="imageType">The image type.</param>
            <param name="resolution">The image resolution, usually expressed in dots per
inch.</param>
            <param name="pixelFormat">The PixelFormat which will be returned when
the image is read.</param>
            <param name="transIndex">The transparent pixel index.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifImageInfo.DelayTime">
            <summary>Gets or sets the amount of time to display this frame in
milliseconds.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifImageInfo.FrameDisposal">
            <summary>Gets or sets the frame disposal method to use for this
frame.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifImageInfo.LeftOffset">
            <summary>Gets or sets the pixel offset from the left side of the
animated screen area.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifImageInfo.TopOffset">
            <summary>Gets or sets the pixel offset from the top of the animated
screen area.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifImageInfo.TransparentIndex">
            <summary>Gets the transparent index of the Gif.</summary>
            <remarks>This value may be -1 if no transparent index is used.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.ImageDecoder">
            <summary>An abstract (MustInherit in
Visual Basic) base class that defines a file format decoder to read
an image from a Stream. All image decoders used in dotImage must
inherit this class.</summary>
            <remarks>To load an image from a stream, the
AtalaImage
constructor may be used, and passing in a string filename, or a
Stream. See the examples below</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.ImageDecoder.GetImageInfo(System.IO.Stream)">
            <summary>Retreive information from an image stored in a file without
decoding the image data.</summary>
            <returns>An ImageInfo object containing information about the image
such as size and bitdepth.</returns>
            <param name="stream">A stream containing the encoded image data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.ImageDecoder.IsValidFormat(System.IO.Stream)">
            <summary>Checks the stream to determine if the image can be read by
the decoder that derives this class.</summary>
            <returns>True if the encoded image can be read by
this decoder, otherwise false.</returns>
            <param name="stream">A stream containing the encoded image data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.ImageDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Decode an image in a specified image
Stream.</summary>
            <returns>An AtalaImage containing the decoded
image.</returns>
            <param name="stream">A stream containing the encoded image data.</param>
            <param name="progress">The progress delegate. Can be set to null
(Nothing in Visual Basic).</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.ImageDecoder.SupportedImageType">
            <summary>Returns the ImageType that the implemented decoder class
supports.</summary>
            <remarks>If the decoder supports a format not included with dotImage,
then this will return Unknown.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.ImageEncoder">
            <summary>An abstract (MustInherit in
Visual Basic) base class that defines a file format encoder to save
an image to a file. All image encoders used in dotImage must
inherit this class.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.ImageEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Save an image using this encoder.</summary>
            <returns>The number of bytes written to the file.</returns>
            <param name="stream">A stream containing the file which the image will be encoded
to.</param>
            <param name="image">The image to save.</param>
            <param name="progress">The progress delegate. Can be set to null
(Nothing in Visual Basic).</param>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.ImageInfo">
            <summary>Contains information from an encoded image file.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.ImageInfo._ctor">
            <summary>Initialize a new instance of ImageInfo.Creates an ImageInfo
object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.ImageInfo._ctor(System.Drawing.Size,System.Int32,Atalasoft.Imaging.Codec.ImageType,Atalasoft.Imaging.Dpi,Atalasoft.Imaging.PixelFormat)">
            <summary>Initialize a new instance of ImageInfo specifying its
properties.</summary>
            <param name="size">The width and height of the image.</param>
            <param name="colorDepth">The bits per pixel of the image.</param>
            <param name="imageType">The image type.</param>
            <param name="resolution">The image resolution, usually expressed in dots per
inch.</param>
            <param name="pixelFormat">The PixelFormat which will be returned when
the image is read.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.ImageInfo._ctor(System.Drawing.Size,System.Int32,Atalasoft.Imaging.Codec.ImageType,Atalasoft.Imaging.Dpi,Atalasoft.Imaging.PixelFormat,System.Int32)">
            <summary>Initialize a new instance of ImageInfo specifying its
properties for a multi-frame image.</summary>
            <param name="size">The width and height of the image.</param>
            <param name="colorDepth">The bits per pixel of the image.</param>
            <param name="imageType">The image type.</param>
            <param name="resolution">The image resolution, usually expressed in dots per
inch.</param>
            <param name="pixelFormat">The PixelFormat which will be returned when
the image is read.</param>
            <param name="frameCount">The number of frames in the image.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.ImageInfo.ColorDepth">
            <summary>Gets the bits per pixel of the image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.ImageInfo.FrameCount">
            <summary>Gets the number of frames in the image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.ImageInfo.ImageType">
            <summary>Gets the image type.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.ImageInfo.PixelFormat">
            <summary>Gets the PixelFormat which will be returned
when the image is read.</summary>
            <remarks>The pixel format to read might be different then the actual
format stored within the image. dotImage will do it's best to read
to the native pixel format and colordepth.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.ImageInfo.Resolution">
            <summary>Gets the image resolution, usually expressed in dots per
inch.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.ImageInfo.Size">
            <summary>Gets the width and height of the image.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.ImageReadException">
            <summary>This exception is thrown when there is a problem reading an
image</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.ImageReadException._ctor">
            <summary>Creates an ImageReadException object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.ImageReadException._ctor">
            <summary>Creates a new instance of ImageReadException.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.ImageReadException._ctor(System.String)">
            <summary>Creates a new instance of ImageReadException specifying the
exception message.</summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.ImageReadException._ctor(System.String,System.Exception)">
            <summary>Creates a new instance of ImageReadException specifying the
exception message and inner exception.</summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception for this error.</param>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.ImageWriteException">
            <summary>This exception is thrown when there is a problem writing an
image</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.ImageWriteException._ctor">
            <summary>Creates an ImageWriteException.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.ImageWriteException._ctor">
            <summary>Creates a new instance of ImageWriteException.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.ImageWriteException._ctor(System.String)">
            <summary>Creates a new instance of ImageWriteException specifying the
exception message.</summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.ImageWriteException._ctor(System.String,System.Exception)">
            <summary>Creates a new instance of ImageWriteException specifying the
exception message and inner exception.</summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception for this error.</param>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.JpegDecoder">
            <summary>    An ImageDecoder used to read JPEG images from a
    System.IO.Stream.</summary>
            <remarks>    By default, when opening a Jpeg image using the
    AtalaImage or Workspace objects, this decoder will
    automatically be selected from the RegisteredDecoders and does
    not have to be explicitly set.
    Jpeg images can store metadata such as EXIF and IPTC into
    the images. See the Atalasoft.Imaging.Metadata namespace for
    more information on reading this information from a Jpeg
    image.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegDecoder._ctor">
            <summary>Initializes a new instance of a JpegDecoder. Creates a new
JpegDecoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegDecoder._ctor">
            <summary>Initializes a new instance of a JpegDecoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegDecoder._ctor(Atalasoft.Imaging.Codec.JpegScaleFactor)">
            <summary>Initializes a new instance of a JpegDecoder specifying the
Jpeg scaling factor.</summary>
            <param name="scaleFactor">The Jpeg scaling factor to use when reading the image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegDecoder.GetImageInfo(System.IO.Stream)">
            <summary>Retreive information from a Jpeg image stored in a Stream
without decoding the image data.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegDecoder.IsValidFormat(System.IO.Stream)">
            <summary>    Returns true if the specified Stream contains a Jpeg
    image.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Returns an AtalaImage from a Stream containing a Jpeg encoded
image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegDecoder.ScaleFactor">
            <summary>Gets or sets a value indicating the scale factor to use when
reading Jpeg's.</summary>
            <remarks>The scale factor allows a Jpeg image to be read to a smaller
sized image. This is a good quick way of creating thumbnails out of
Jpeg images.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegDecoder.SupportedImageType">
            <summary>Returns a Jpeg ImageType enumeration value.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.JpegEncoder">
            <summary>    An ImageEncoder that will write JPEG images to a
    System.IO.Stream.</summary>
            <remarks>    This ImageEncoder can be passed into the the AtalaImage
    or Workspace objects when saving to specify a JPEG
    image.
    Metadata can be written with the JPEG image including
    EXIF, IPTC and COM Comments. See the Atalasoft.Imaging.Metadata
    namespace for more information.
    If the image being saved contains a ColorProfile, it will
    be embedded within the file.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegEncoder._ctor">
            <summary>Initializes a new instance of a JpegEncoder. Creates a
JpegEncoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegEncoder._ctor">
            <summary>Initializes a new instance of a JpegEncoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegEncoder._ctor(System.Int32)">
            <summary>Initializes a new instance of a JpegEncoder specifying the
quality.</summary>
            <param name="quality">The quality level.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegEncoder._ctor(System.Int32,System.Int32)">
            <summary>Initializes a new instance of a JpegEncoder specifying the
quality and smoothing.</summary>
            <param name="quality">The quality level.</param>
            <param name="smoothing">The smoothing level.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegEncoder._ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>Initializes a new instance of a JpegEncoder specifying the
quality, smoothing, and progressive value.</summary>
            <param name="quality">The quality level.</param>
            <param name="smoothing">The smoothing level.</param>
            <param name="progressive">A value indicating if the image is saved
progressively.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegEncoder._ctor(System.Int32,System.Int32,System.Boolean,Atalasoft.Imaging.Metadata.MetadataContainer)">
            <summary>Initializes a new instance of a JpegEncoder specifying the
quality, smoothing, progressive value, and metadata.</summary>
            <param name="quality">The quality level.</param>
            <param name="smoothing">The smoothing level.</param>
            <param name="progressive">A value indicating if the image is saved
progressively.</param>
            <param name="metadata">The metadata to save with the image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegEncoder._ctor(System.Int32,Atalasoft.Imaging.Metadata.MetadataContainer)">
            <summary>Creates a new instance of JpegEncoder specifying quality and
metadata.</summary>
            <param name="quality">The quality level.</param>
            <param name="metadata">The metadata to save with the image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegEncoder.CopyJpegWithNewMarkers">
            <summary>These methods perform a lossless copy of the JPEG image data
into a new image while replacing the JPEG metadata with new
metadata.</summary>
            <remarks>By saving the APP1 Jpeg marker, EXIF, IPTC, and COM data can
be copied to existing images, without the need to recompress the
image data. This method does not overwrite existing JPEG images,
but creates a copy of the existing JPEG data. The original image
could be deleted if this method succeeds.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegEncoder.CopyJpegWithNewMarkers(System.IO.Stream,System.IO.Stream)">
            <summary>Performs a lossless copy of the JPEG image data into a new
image while replacing the JPEG metadata with new metadata.</summary>
            <remarks>By saving the APP1 Jpeg marker, EXIF, IPTC, and COM data can
be copied to existing images, without the need to recompress the
image data. This method does not overwrite existing JPEG images,
but creates a copy of the existing JPEG data. The original image
could be deleted if this method succeeds.</remarks>
            <param name="source">The source image stream to copy from.</param>
            <param name="dest">The destintation image stream to copy to.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegEncoder.CopyJpegWithNewMarkers(System.IO.Stream,System.IO.Stream,Atalasoft.Imaging.Metadata.JpegMarkerCopyFlags)">
            <summary>These methods perform a lossless copy of the JPEG image data
into a new image while replacing the JPEG metadata with new
metadata.</summary>
            <remarks>By saving the APP1 Jpeg marker, EXIF, IPTC, and COM data can
be copied to existing images, without the need to recompress the
image data. This method does not overwrite existing JPEG images,
but creates a copy of the existing JPEG data. The original image
could be deleted if this method succeeds.</remarks>
            <param name="source">The source image stream to copy from.</param>
            <param name="dest">The destintation image stream to copy to.</param>
            <param name="flags">Specifies the metadata to copy into the new image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegEncoder.CopyJpegWithNewMarkers(System.String,System.String)">
            <summary>These methods perform a lossless copy of the JPEG image data
into a new image while replacing the JPEG metadata with new
metadata.</summary>
            <remarks>By saving the APP1 Jpeg marker, EXIF, IPTC, and COM data can
be copied to existing images, without the need to recompress the
image data. This method does not overwrite existing JPEG images,
but creates a copy of the existing JPEG data. The original image
could be deleted if this method succeeds.</remarks>
            <param name="source">The source image filename to copy from.</param>
            <param name="dest">The destintation image filename to copy to.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegEncoder.CopyJpegWithNewMarkers(System.String,System.String,Atalasoft.Imaging.Metadata.JpegMarkerCopyFlags)">
            <summary>These methods perform a lossless copy of the JPEG image data
into a new image while replacing the JPEG metadata with new
metadata.</summary>
            <remarks>By saving the APP1 Jpeg marker, EXIF, IPTC, and COM data can
be copied to existing images, without the need to recompress the
image data. This method does not overwrite existing JPEG images,
but creates a copy of the existing JPEG data. The original image
could be deleted if this method succeeds.</remarks>
            <param name="source">The source image filename to copy from.</param>
            <param name="dest">The destintation image filename to copy to.</param>
            <param name="flags">Specifies the metadata to copy into the new image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Encode an AtalaImage as a Jpeg image to a stream.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegEncoder.AppMarkers">
            <summary>Gets or sets the JPEG APPn Markers that will be saved with
the image.</summary>
            <remarks>Metadata can be preserved in the new image by setting this
property to the JPEG Marker collection from the source
image.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegEncoder.ComText">
            <summary>Gets or sets COM Text Markers that are to be saved with the
image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegEncoder.ImageType">
            <summary>Get the ImageType associated with this
Encoder Setting.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegEncoder.IptcTags">
            <summary>Gets or sets IPTC Metadata that will be saved with the
image.</summary>
            <remarks>Setting this property to an IptcCollection
allows IPTC tags to be added or inserted into a new JPEG
image.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegEncoder.Metadata">
            <summary>Gets or sets the metadata that will be saved with the
image.</summary>
            <remarks>This property should be set with a Metadata
object when saving any metadata. A null value will not save any
metadata with the image.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegEncoder.PhotoshopResources">
            <summary>Gets or sets Photoshop resources to be saved with the
image.</summary>
            <remarks>Photoshop saves information to the APP13 Jpeg Marker. This
information can be parsed with the

PhotoshopResourceParser. When PhotoshopResources and
IptcTags are set to a value other than null, IptcData will
be added to the PhotoshopResource when saved.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegEncoder.Progressive">
            <summary>Gets or sets a value indicating if the image is saved
progressively.</summary>
            <remarks>A progressive Jpeg will be displayed while it's being loaded
from top down in supported viewers such as web browsers.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegEncoder.Quality">
            <summary>Gets or sets the quality level of the Jpeg as it's encoded to
a file. Valid values are 1 - 100 with a default of 75.</summary>
            <remarks>The lower the quality, the smaller the filesize. A good range
of values is between 70 and 95.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegEncoder.Smoothing">
            <summary>Gets or sets the smoothing level when saving a Jpeg
image.</summary>
            <remarks>Valid values are 0 to 100 with a default of 0. Increasing the
smoothing value will tend to create smaller Jpeg files, however the
image is blurred while saving.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegEncoder.Xmp">
            <summary>Gets or sets a byte array containing XMP data.</summary>
            <remarks>This property can be used to save XMP Annotation data created
with DotAnnotate, our full featured Annotations
toolkit for the Microsoft .NET Framework.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.JpegImageInfo">
            <summary>Summary description for JpegImageInfo.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegImageInfo._ctor">
            <summary>Initialize a new instance of a JpegImageInfo. Creates a
JpegImageInfo object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegImageInfo._ctor">
            <summary>Initialize a new instance of a JpegImageInfo.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegImageInfo._ctor(System.Drawing.Size,System.Int32,Atalasoft.Imaging.Codec.ImageType,Atalasoft.Imaging.Dpi,Atalasoft.Imaging.PixelFormat,System.Boolean,System.Boolean)">
            <summary>Initialize a new instance of a JpegImageInfo specifying it's
properties.</summary>
            <param name="size">The width and height of the image.</param>
            <param name="colorDepth">The bits per pixel of the image.</param>
            <param name="imageType">The image type.</param>
            <param name="resolution">The image resolution, usually expressed in dots per
inch.</param>
            <param name="pixelFormat">The PixelFormat which will be returned when
the image is read.</param>
            <param name="progressive">A value indicating if the Jpeg is encoded
progressively.</param>
            <param name="arithmetic">A value indicating if the Jpeg is encoded with arithmetic
compression.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegImageInfo.Arithmetic">
            <summary>Gets a value indicating if the Jpeg is encoded with
arithmetic compression.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegImageInfo.Progressive">
            <summary>Gets a value indicating if the Jpeg is encoded
progressively.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.LzwNotLicensedException">
            <summary>This exception is fired when LZW is not licensed yet an
attempt is made to use LZW functionality.</summary>
            <remarks>This exception is no longer thrown as the LZW patents have
expired in all countries.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.LzwNotLicensedException._ctor">
            <summary>Creates an LzwNotLicensedException.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.LzwNotLicensedException._ctor">
            <summary>Creates a new instance of LzwNotLicensedException.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.LzwNotLicensedException._ctor(System.String)">
            <summary>Creates a new instance of LzwNotLicensedException specifying
the exception message.</summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.LzwNotLicensedException._ctor(System.String,System.Exception)">
            <summary>Creates a new instance of LzwNotLicensedException specifying
the exception message and inner exception.</summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception for this error.</param>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.MultiFramedImageDecoder">
            <summary>A decoder for multiframed images such as multiple page TIFF's
and animiated GIF's.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.MultiFramedImageDecoder.GetFrameCount(System.IO.Stream)">
            <summary>Returns the number of frames in the image</summary>
            <returns>The number of frames in the image</returns>
            <param name="stream">The input Stream.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.MultiFramedImageDecoder.GetImageInfo">
            <summary>Retreive information in an image stored in a file without
decoding the image data.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.MultiFramedImageDecoder.GetImageInfo(System.IO.Stream,System.Int32)">
            <summary>Retreive information from a given frame in an image stored in
a file without decoding the image data.</summary>
            <param name="stream">The input Stream.</param>
            <param name="frameIndex">The zero based frame index.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.MultiFramedImageDecoder.Read">
            <summary>Read a specific frame in an encoded image using this
decoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.MultiFramedImageDecoder.Read(System.IO.Stream,System.Int32,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Read a given frame in an encoded image using this
decoder.</summary>
            <param name="stream">The input Stream.</param>
            <param name="frameIndex">The zero based frame index.</param>
            <param name="progress">The progress delegate. Can be set to null
(Nothing in Visual Basic).</param>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.MultiFramedImageEncoder">
            <summary>An encoder for multiframed formats such as PDF and animated
GIF's.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.MultiFramedImageEncoder.Save">
            <summary>Saves the image.Saves a multi-framed image.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.MultiFramedImageEncoder.Save(System.IO.Stream,Atalasoft.Imaging.ImageCollection,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Saves a multiframed image specifying stream, images and
progress.</summary>
            <param name="stream">The stream to save the image into.</param>
            <param name="images">An ImageCollection object containing all of the images to
save.</param>
            <param name="progress">A ProgressEventHandler to give progress notification during
the save.</param>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.PcdDecoder">
            <summary>    An ImageDecoder used to read Kodak Photo CD (PCD) images
    from a System.IO.Stream.</summary>
            <remarks>    By default, when opening a PhotoCD image using the
    AtalaImage or Workspace objects, this decoder will
    automatically be selected from the RegisteredDecoders and does
    not have to be explicitly set.
    A PhotoCD image contains the same image stored at
    multiple resolutions. By specifying the Resolution property,
    you can choose which resolution image to load.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PcdDecoder._ctor">
            <summary>Initializes a new instance of a PcdDecoder. Creates a
PcdDecoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PcdDecoder._ctor">
            <summary>Initializes a new instance of a PcdDecoder with a default
resolution of 768 x 512 pixels.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PcdDecoder._ctor(Atalasoft.Imaging.Codec.PcdResolution)">
            <summary>Initializes a new instance of a PcdDecoder specifying a
resolution.</summary>
            <param name="resolution">Sets the resolution to read in a PhotoCD image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PcdDecoder.GetImageInfo(System.IO.Stream)">
            <summary>Retreive information from a PhotoCD image stored in a Stream
without decoding the image data.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PcdDecoder.IsValidFormat(System.IO.Stream)">
            <summary>    Returns true if the specified Stream contains a PhotoCD
    image.</summary>
            <param name="stream">The input Stream.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PcdDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Returns an AtalaImage from a Stream containing a PhotoCD
encoded image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PcdDecoder.Resolution">
            <summary>    Gets or sets the resolution to read in a PhotoCD
    image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PcdDecoder.SupportedImageType">
            <summary>Returns a PhotoCD ImageType enumeration value.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.PcxDecoder">
            <summary>    An ImageDecoder used to read Zsoft Paintbrush (PCX)
    images from a System.IO.Stream.</summary>
            <remarks>By default, when opening a Pcx image using the AtalaImage or
Workspace objects, this decoder will automatically be selected from
the RegisteredDecoders and does not have to be explicitly
set.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PcxDecoder._ctor">
            <summary>Initializes a new instance of a PcxDecoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PcxDecoder.GetImageInfo(System.IO.Stream)">
            <summary>Retreive information from a Pcx image stored in a Stream
without decoding the image data.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PcxDecoder.IsValidFormat(System.IO.Stream)">
            <summary>    Returns true if the specified Stream contains a Pcx
    image.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PcxDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Returns an AtalaImage from a Stream containing a Pcx encoded
image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PcxDecoder.SupportedImageType">
            <summary>Returns a Pcx ImageType enumeration value.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.PcxEncoder">
            <summary>    An ImageEncoder that will write ZSoft Paintbrush (PCX)
    images to a System.IO.Stream.</summary>
            <remarks>This ImageEncoder can be passed into the the AtalaImage or
Workspace objects when saving to specify a PCX image.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PcxEncoder._ctor">
            <summary>Initializes a new instance of a PcxEncoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PcxEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Encode an AtalaImage as a Pcx image to a stream.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.PngDecoder">
            <summary>    An ImageDecoder used to read Portable Network Graphics
    (PNG) images from a System.IO.Stream.</summary>
            <remarks>By default, when opening a Png image using the AtalaImage or
Workspace objects, this decoder will automatically be selected from
the RegisteredDecoders and does not have to be explicitly
set.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PngDecoder._ctor">
            <summary>Initializes a new instance of a PngDecoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PngDecoder._ctor">
            <summary>Initializes a new instance of a PngDecoder using the default
screen gamma.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PngDecoder._ctor(System.Double)">
            <summary>Initializes a new instance of a PcdDecoder with a specified
screen gamma.</summary>
            <param name="screenGamma">The screen gamma value that will be used to adjust the colors
of a PNG image when read if the image contains gamma.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PngDecoder.GetImageInfo(System.IO.Stream)">
            <summary>Retreive information from a Png image stored in a Stream
without decoding the image data.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PngDecoder.IsValidFormat(System.IO.Stream)">
            <summary>    Returns true if the specified Stream contains an Png
    image.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PngDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Returns an AtalaImage from a Stream containing a Png encoded
image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PngDecoder.ScreenGamma">
            <summary>Gets or sets the screen gamma value that will be used to
adjust the colors of a PNG image when read if the image contains
gamma.</summary>
            <remarks>A value of 0 will ignore the gamma of the image. A value of
2.2 is typical for PC's. Default 0.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PngDecoder.SupportedImageType">
            <summary>Returns a Png ImageType enumeration value.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PngDecoder.TwoBytePerComponentSupport">
            <summary>Gets or sets a value indicating whether 16-bit per component
images are read as 16 or 8-bit per component images.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.PngEncoder">
            <summary>    An ImageEncoder that will write Portable Network Graphics
    (PNG) images to a System.IO.Stream.</summary>
            <remarks>    This ImageEncoder can be passed into the the AtalaImage
    or Workspace objects when saving to specify a PNG image.
    If the image being saved contains a ColorProfile, it will
    be embedded within the file.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PngEncoder._ctor">
            <summary>Initializes a new instance of a PngEncoder. Creates a
PngEncoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PngEncoder._ctor">
            <summary>Initializes a new instance of a PngEncoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PngEncoder._ctor(System.Drawing.Color,System.Double,System.Boolean,Atalasoft.Imaging.Metadata.ComTextCollection)">
            <summary>Initializes a new instance of a PngEncoder specifying the
background color, gamma, interlace, and COM Text value to
save.</summary>
            <param name="backgroundColor">The color to use as the default background color for Png
images with alpha.</param>
            <param name="gamma">The gamma value to write to a PNG image.</param>
            <param name="interlaced">The Png Interlace setting.</param>
            <param name="comText">The COM text metadata to save with the image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PngEncoder._ctor(Atalasoft.Imaging.Metadata.ComTextCollection)">
            <summary>Initializes a new instance of a PngEncoder specifying the COM
Text metadata to save.</summary>
            <param name="comText">The COM text metadata to save with the image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PngEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Encode an AtalaImage as a Png image to a stream.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PngEncoder.BackgroundColor">
            <summary>Gets or sets the color to use as the default background color
for Png images with alpha.</summary>
            <remarks/>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PngEncoder.BackgroundIndex">
            <summary>Gets or sets the palette index or grayscale value to use as
the default background color for colormapped Png images with
alpha.</summary>
            <remarks>Set this value to -1 in order to use the closest color to
   
BackgroundColor.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PngEncoder.ComText">
            <summary>Gets or sets the COM text metadata to save with the
image.</summary>
            <remarks>See COM Text Metadata for more information.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PngEncoder.Gamma">
            <summary>Gets or sets the gamma value to write to a PNG image. 0 will
not write any value, 2.2 is a typical value for PC's. Default
0.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PngEncoder.Interlace">
            <summary>Gets or sets whether Png files are saved with a pixel row
interlacing pattern. Defaults False.</summary>
            <remarks>Interlacing is a technique that allows a PNG to be displayed
gradually. It first displays a blocky image which becomes finer and
more clear as the image loads.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.PngImageInfo">
            <summary>Summary description for PngImageInfo.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PngImageInfo._ctor">
            <summary>Initialize a new instance of a PngImageInfo. Creates a
PngImageInfo object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PngImageInfo._ctor">
            <summary>Initialize a new instance of a PngImageInfo.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PngImageInfo._ctor(System.Drawing.Size,System.Int32,Atalasoft.Imaging.Codec.ImageType,Atalasoft.Imaging.Dpi,Atalasoft.Imaging.PixelFormat,System.Boolean)">
            <summary>Initialize a new instance of a PngImageInfo specifying it's
properties.</summary>
            <param name="size">The width and height of the image.</param>
            <param name="colorDepth">The bits per pixel of the image.</param>
            <param name="imageType">The image type.</param>
            <param name="resolution">The image resolution, usually expressed in dots per
inch.</param>
            <param name="pixelFormat">The PixelFormat which will be returned when
the image is read.</param>
            <param name="pngInterlaced">A value indicating if the PNG is interlaced.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PngImageInfo.PngInterlaced">
            <summary>Gets a value indicating if the PNG is interlaced.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PngImageInfo.TransparentColor">
            <summary>Gets or sets the transparent color for the PNG image.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.PsdDecoder">
            <summary>    An ImageDecoder used to read Adobe Photoshop (PSD) images
    from a System.IO.Stream.</summary>
            <remarks>    By default, when opening a Psd image using the AtalaImage
    or Workspace objects, this decoder will automatically be
    selected from the RegisteredDecoders and does not have to be
    explicitly set.
    Any layering information saved in the PSD image will be
    lost when read. This information is read into a merged RGB
    format.
    For obtaining Photoshop Resources from a PSD image, see
    the
    
    PhotoshopResourceParser class.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PsdDecoder._ctor">
            <summary>Initializes a new instance of a PsdDecoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PsdDecoder.GetImageInfo(System.IO.Stream)">
            <summary>Retreive information from a Psd image stored in a Stream
without decoding the image data.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PsdDecoder.GetThumbnail(System.IO.Stream)">
            <summary>Gets the thumbnail image stored in the Photoshop Resource of
the image.</summary>
            <returns>An AtalaImage containing the thumbnail
image.</returns>
            <remarks>See the

PhotoshopResourceParser for obtaining the RAW thumbnail data
and other photoshop specific information.</remarks>
            <param name="stream">The PSD image stream.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PsdDecoder.IsValidFormat(System.IO.Stream)">
            <summary>    Returns true if the specified Stream contains an Psd
    image.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PsdDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Returns an AtalaImage from a Stream containing a Psd encoded
image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PsdDecoder.SupportedImageType">
            <summary>Gets a Psd ImageType enumeration value.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.PsdEncoder">
            <summary>    An ImageEncoder that will write Adobe Photoshop (PSD)
    images to a System.IO.Stream.</summary>
            <remarks>This ImageEncoder can be passed into the the AtalaImage or
Workspace objects when saving to specify a PSD image.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PsdEncoder._ctor">
            <summary>Initializes a new instance of a PsdEncoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PsdEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Encode an AtalaImage as a Psd image to a stream.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PsdEncoder.IptcTags">
            <summary>Gets or sets IPTC Tags that will be saved with the
image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PsdEncoder.PhotoshopResources">
            <summary>Gets or sets Photoshop resources to be saved with the
image.</summary>
            <remarks>Photoshop resource information can be parsed with the

PhotoshopResourceParser. When PhotoshopResources and
IptcTags are set to a value other than null, IptcData will
be added to the PhotoshopResource when saved.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.RegisteredDecoders">
            <summary>This class includes static members containing information on
image decoders to use in the project when reading images as well as
methods to obtain a an appropriate decoder based on an image stream
or filename.</summary>
            <remarks>Any file format extensions, such as the Atalasoft Jpeg2000
and Atalasoft FlashPix plug-in should be registered using this
class by adding the decoders to the UnregisteredDecoders
collection.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.RegisteredDecoders.GetDecoder(System.IO.Stream)">
            <summary>Returns an ImageDecoder that can be used to decode the given
stream.</summary>
            <remarks>Use this method for obtaining the file format of an image
saved to a file. See GetImageInfo for obtaining the file format and
extended information.</remarks>
            <param name="stream">A stream containing the encoded image data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.RegisteredDecoders.GetDecoderFromType(System.Type)">
            <summary>Returns an ImageDecoder that matches a
specific type.</summary>
            <param name="codecType">The type of decoder to retreive.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.RegisteredDecoders.GetImageInfo">
            <summary>Returns information about an encoded image file.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.RegisteredDecoders.GetImageInfo(System.IO.Stream)">
            <summary>Returns information about an encoded image file specifying a
stream.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.RegisteredDecoders.GetImageInfo(System.IO.Stream,System.Int32)">
            <summary>Returns information about an encoded image file specifying a
stream and frame index.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
            <param name="frameIndex">If the image contains multiple frames, this is the zero based
index to retreive information from.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.RegisteredDecoders.GetImageInfo(System.String)">
            <summary>Returns information about an encoded image file specifying a
filename.</summary>
            <returns>The

ImageInfo from an existing file.</returns>
            <param name="fileName">A file name containing the encoded image data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.RegisteredDecoders.GetImageInfo(System.String,System.Int32)">
            <summary>Returns information about an encoded image file specifying a
filename and frame index.</summary>
            <returns>The

ImageInfo from an existing file.</returns>
            <param name="fileName">A file name containing the encoded image data.</param>
            <param name="frameIndex">If the image contains multiple frames, this is the zero based
index to retreive information from.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.RegisteredDecoders.KnownTypeDecoders">
            <summary>Returns a reference to the decoders that are registered in
dotImage to load the known dotImage ImageTypes.</summary>
            <remarks>dotImage is initialized with the standard decoders set to the
known image types. A custom decoder can override a standard encoder
by setting the custom decoder to the ImageType in this dictionary
collection.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.RegisteredDecoders.UnknownTypeDecoders">
            <summary>Returns a reference to the decoders that are used for reading
images that dotImage doesn't recognize as a standard

ImageType.</summary>
            <remarks>    An unlimited number of formats not natively supported by
    dotImage can be added by including the decoders in this
    collection.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.TgaDecoder">
            <summary>    An ImageDecoder used to read Truevision Targa (TGA)
    images from a System.IO.Stream.</summary>
            <remarks>    By default, when opening a Targa image using the
    AtalaImage or Workspace objects, this decoder will
    automatically be selected from the RegisteredDecoders and does
    not have to be explicitly set.
    Because there is no identifier when reading Tga images,
    it is up to the developer to detect the file extension, and if
    "tga" then specify this decoder directly. In many cases,
    dotImage cannot guess an image is encoded as a TGA.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TgaDecoder._ctor">
            <summary>Initializes a new instance of a TgaDecoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TgaDecoder.GetImageInfo(System.IO.Stream)">
            <summary>Retreive information from a Targa image stored in a Stream
without decoding the image data.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TgaDecoder.IsValidFormat(System.IO.Stream)">
            <summary>    Returns true if the specified Stream contains an Targa
    image.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TgaDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Returns an AtalaImage from a Stream containing a Targa
encoded image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TgaDecoder.SupportedImageType">
            <summary>Returns a Tga ImageType enumeration value.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.TgaEncoder">
            <summary>    An ImageEncoder that will write Truevision Targa (TGA)
    images to a System.IO.Stream.</summary>
            <remarks>This ImageEncoder can be passed into the the AtalaImage or
Workspace objects when saving to specify a TGA image.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TgaEncoder._ctor">
            <summary>Initializes a new instance of a TgaEncoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TgaEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Encode an AtalaImage as a Tga image to a stream.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.TiffDecoder">
            <summary>    An ImageDecoder used to read Tagged
    Image File Format (TIFF) images from an image
    Stream.</summary>
            <remarks>    By default, when opening a TIFF image using the
    AtalaImage or Workspace objects, this decoder will
    automatically be selected from the
    
    RegisteredDecoders.Decoders collection and does not have to
    be explicitly set.
    TIFF images can contain multiple pages in one file. You
    may wish to specify which page to read or get information about
    by specifying the frameindex in the associated Read
    methods.
    TIFF images can store metadata such as EXIF, IPTC, XMP,
    and other TIFF tags. See the Atalasoft.Imaging.Metadata
    namespace for more information on reading this
    information.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffDecoder._ctor">
            <summary>Initializes a new instance of a TiffDecoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.GetFrameCount(System.IO.Stream)">
            <remarks>Returns the number of pages in an Encoded Tiff file.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.GetImageInfo">
            <summary>Retreive information from a Tiff image stored in a Stream
without decoding the image data.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.GetImageInfo(System.IO.Stream)">
            <summary>Retreive information from a Tiff image stored in a Stream
without decoding the image data.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.GetImageInfo(System.IO.Stream,System.Int32)">
            <summary>Retreive information from a particularr page in a Tiff image
stored in a Stream without decoding the image data.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
            <param name="frameIndex">The zero based frame index.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.GetTiffTag">
            <summary>Gets a TIFF Tag from a file or stream.</summary>
            <remarks>    Information stored in a TIFF file can be obtained with
    this method. A TiffTag is class containing the
    object data, data type, and tag id. The data is typically a
    string value.
    Not all TIFF Tags are currently supported. See
    TIFF Tags for a list of supported
    tags.
    This method can be used to obtain WANG Annotations data
    saved as TagID 32932.</remarks>
            <returns>Returns a

TiffTag object containing the tag data, or null if the tag does
not exist in the image.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.GetTiffTag(System.Int32,System.IO.Stream,System.Int32)">
            <summary>Gets a TIFF Tag from a TIFF image stream.</summary>
            <returns>Returns a

TiffTag object containing the tag data, or null if the tag does
not exist in the image.</returns>
            <param name="tagID">The tag ID to retrieve data from.</param>
            <param name="source">The TIFF file stream.</param>
            <param name="frameIndex">The zero based frame index of the page to query.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.GetTiffTag(System.Int32,System.String,System.Int32)">
            <summary>Gets a TIFF Tag from a TIFF file.</summary>
            <returns>Returns a

TiffTag object containing the tag data, or null if the tag does
not exist in the image.</returns>
            <param name="tagID">The tag ID to retrieve data from.</param>
            <param name="fileName">The TIFF filename</param>
            <param name="frameIndex">The zero based frame index of the page to query.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.IsValidFormat(System.IO.Stream)">
            <summary>    Returns true if the specified Stream contains an TIFF
    image.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.Read">
            <summary>Decodes an image from a supplied TIFF image
Stream.</summary>
            <returns>Returns an decoded AtalaImage from a
Stream containing a TIFF encoded image.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.Read(System.IO.Stream,System.Int32,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Decodes an image from a supplied TIFF image
Stream specifying a frame index.</summary>
            <returns>Returns an decoded AtalaImage from a
Stream containing a TIFF encoded image.</returns>
            <param name="stream">A Stream containing the encoded image
data.</param>
            <param name="frameIndex">The zero based frame index to load from a multi-page TIFF
file.</param>
            <param name="progress">The progress delegate. Can be set to null
(Nothing in Visual Basic).</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Decodes an image from a supplied TIFF image
Stream.</summary>
            <returns>Returns an decoded AtalaImage from a
Stream containing a TIFF encoded image.</returns>
            <param name="stream">A Stream containing the encoded image
data.</param>
            <param name="progress">The progress delegate. Can be set to null
(Nothing in Visual Basic).</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.ReadRegion(System.IO.Stream,System.Drawing.Rectangle,System.Int32,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Decodes a specified region of a TIFF image given a source
Stream.</summary>
            <remarks>    This method will read only the strips or tiles that it
    needs in order to compose and image of the indicated
    rectangular region, and trim any excess data. This can be
    significantly faster than reading the entire image if only a
    specified region needs to be decoded. To maximize benefit of
    this method, use multiple tiles or strips per image.
    For reading only a single strip or tile, see
    
    ReadStrip or
    
    ReadTile.
    Note that the image data is not corrected for orientation
    even when
    
    CorrectOrientation is true.</remarks>
            <param name="stream">A Stream containing the encoded image
data.</param>
            <param name="region">A rectangular region of the image to decode.</param>
            <param name="frameIndex">The zero based frame index to load from a multi-page Tiff
file.</param>
            <param name="progress">The progress delegate. Can be set to null
(Nothing in Visual Basic).</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.ReadStrip(System.IO.Stream,System.Int32,System.Int32,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Decodes a specified strip from a TIFF image stream that is
encoded with strips.</summary>
            <remarks>    This method differs from
    
    ReadRegion in that it doesn't check that the source image
    is stripped. For reading multiple strips at once, ReadRegion is
    more efficient. To determine the strip height, query the tag
    TIFFTAG_ROWSPERSTRIP (276). To determine if an image is
    stripped, make sure TIFFTAG_TILELENGTH (323) or
    TIFFTAG_TILEWIDTH (322) doesn't exist.
    Note that the image data is not corrected for orientation
    even when
    
    CorrectOrientation is true.</remarks>
            <param name="stream">A Stream containing the encoded image
data.</param>
            <param name="stripIndex">The zero based strip index to decode.</param>
            <param name="frameIndex">The zero based frame index to load from a multi-page Tiff
file.</param>
            <param name="progress">The progress delegate. Can be set to null
(Nothing in Visual Basic).</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.ReadTile(System.IO.Stream,System.Drawing.Point,System.Int32,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Decodes a specified tile from a TIFF image stream that is
encoded with strips.</summary>
            <remarks>    This method differs from
    
    ReadRegion in that it doesn't check that the source image
    is tiled. For reading multiple tiles at once, ReadRegion is
    more efficient. To determine the tile size, query the tag
    TIFFTAG_TILELENGTH (323) or TIFFTAG_TILEWIDTH (322). If those
    tags do not exist, then the image is stripped in which case see
    
    ReadStrip.
    Note that the image data is not corrected for orientation
    even when
    
    CorrectOrientation is true.</remarks>
            <param name="stream">A Stream containing the encoded image
data.</param>
            <param name="location">The pixel location of the top left location of the
tile.</param>
            <param name="frameIndex">The zero based frame index to load from a multi-page Tiff
file.</param>
            <param name="progress">The progress delegate. Can be set to null
(Nothing in Visual Basic).</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TiffDecoder.CorrectOrientation">
            <summary>Gets or sets a value that when true (the default) will
automatically correct the image orientation by rotating and/or
flipping based on the TIFF_ORIENTATION tag setting.</summary>
            <remarks>Speed can be improved when setting this value to false on
large images where the orientation is a value other than 1, however
the resulting image will be rotated and/or flipped. The methods

ReadRegion,

ReadTile, and

ReadStrip ignore this setting and will never correct for
orientation.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TiffDecoder.SupportedImageType">
            <summary>[obsolete]</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.TiffEncoder">
            <summary>    An ImageEncoder that will write Tagged Image File Format
    (TIFF) images to a System.IO.Stream.</summary>
            <remarks>    This ImageEncoder can be passed into the
    the AtalaImage or Workspace objects when saving to specify a
    TIFF image.
    Metadata can be written with the TIFF image including
    EXIF, IPTC, XMP, and Photoshop Resources. See the
    Atalasoft.Imaging.Metadata namespace for more
    information.
    If the image being saved contains a ColorProfile, it will
    be embedded within the file.
    If the image being saved is 1-bit, and palette index 0 is
    black and palette index 1 is white, the image will be saved
    with the photometric value of MINISBLACK. If other viewers
    mistakingly view the image reversed, invert the image and
    palette data prior to saving.
    When compressing TIFF images, it's sometimes useful to
    adjust the StripSize to something other than the default. In
    particular, Deflate and LZW compression work better with larger
    chunks of data.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffEncoder._ctor">
            <summary>Initializes a new instance of a TiffEncoder. Creates a
TiffEncoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffEncoder._ctor">
            <summary>Initializes a new instance of a TiffEncoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffEncoder._ctor(Atalasoft.Imaging.Codec.TiffCompression)">
            <summary>Initializes a new instance of a TiffEncoder specifying the
compression.</summary>
            <param name="compression">A value indicating the compression algorithm used when
encoding to a file.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffEncoder._ctor(Atalasoft.Imaging.Codec.TiffCompression,System.Boolean)">
            <summary>Initializes a new instance of a TiffEncoder specifying the
compression and if the image should be appended to the end of an
existing file.</summary>
            <param name="compression">A value indicating the compression algorithm used when
encoding to a file.</param>
            <param name="append">A value indicating if the image should be appended to the end
of an existing file.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffEncoder._ctor(Atalasoft.Imaging.Codec.TiffCompression,Atalasoft.Imaging.Metadata.MetadataContainer)">
            <summary>Creates a new instance of TiffEncoder specifying the
compression type and metadata.</summary>
            <param name="compression">A value indicating the compression algorithm used when
encoding to a file.</param>
            <param name="metadata">The image metadata to save.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffEncoder.Save">
            <summary>Encode an AtalaImage as a Tiff image to a stream.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Encode an AtalaImage as a Tiff image to a stream.</summary>
            <param name="stream">A stream that the encoded image data will be saved to.</param>
            <param name="image">The AtalaImage to encode.</param>
            <param name="progress">The progress delegate. Can be set to null
(Nothing in Visual Basic).</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffEncoder.Save(System.IO.Stream,Atalasoft.Imaging.ImageCollection,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Saves a collection of images to a multi-page TIFF.</summary>
            <param name="stream">A stream that the encoded image data will be saved to. This
stream must have FileAccess.ReadWrite set or else only the first
image will be saved.</param>
            <param name="images">The ImageCollection containing the images to save.</param>
            <param name="progress">The progress delegate. Can be set to null
(Nothing in Visual Basic).</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TiffEncoder.Append">
            <summary>Get or sets a value indicating if the image should be
appended to the end of an existing file.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TiffEncoder.Compression">
            <summary>Gets or sets a value indicating the compression algorithm
used when encoding to a file.</summary>
            <remarks>When setting the compression, be aware of the PixelFormat.
Some compression types will result in no compression when used with
an incompatible PixelFormat. See the

TiffCompression enumeration for more information.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TiffEncoder.IptcTags">
            <summary>Gets or sets IPTC Metadata that will be saved with the
image.</summary>
            <remarks>Setting this property to an IptcCollection
allows IPTC tags to be added or inserted into a new TIFF
image.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TiffEncoder.JpegQuality">
            <summary>Gets or sets the quality level used when saving the
image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TiffEncoder.Metadata">
            <summary>Gets or sets the Metadata Container which will be used to
save Metadata with the image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TiffEncoder.PhotoshopResources">
            <summary>Gets or sets Photoshop resources to be saved with the
image.</summary>
            <remarks>Photoshop saves information to a specific TIFF Tag. This
information can be parsed with the

PhotoshopResourceParser. When PhotoshopResources and
IptcTags are set to a value other than null, IptcData will
be added to the PhotoshopResource when saved.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TiffEncoder.StripSize">
            <summary>Gets or sets the strip size used when saving the
image.</summary>
            <remarks>    The strip size is the number of image rows saved as a
    single strip in the TIFF. The default value is -1, which will
    automatically calculate a strip size equal to about 8Kb of
    uncompressed data. For higher compression, it often makes sense
    to increase this number.
    If the StripSize is greater than the image height, the
    actual strip size will equal the image height.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TiffEncoder.TiffTags">
            <summary>Gets or sets a collection of TIFF Tags that will be encoded
with the image when writing.</summary>
            <remarks>    Not all TIFF Tags are supported. See
    TIFF Tags for a list of supported
    tags. Some standard tags included in this list would be
    dangerous to modify and will be ignored if an attempt is made
    to add them. Those exceptions include:
    IMAGEWIDTH
     IMAGELENGTH
     BITSPERSAMPLE
     COMPRESSION
     PHOTOMETRIC
     STRIPOFFSETS
     SAMPLESPERPIXEL
     ROWSPERSTRIP
     STRIPBYTECOUNTS
     PLANARCONFIG
     JPEGTABLES
     JPEGPROC
     JPEGIFOFFSET
     JPEGIFBYTECOUNT
     JPEGRESTARTINTERVAL
     JPEGLOSSLESSPREDICTORS
     JPEGPOINTTRANSFORM
     JPEGQTABLES
     JPEGDCTABLES
     JPEGACTABLES
     YCBCRCOEFFICIENTS
     YCBCRSUBSAMPLING
     YCBCRPOSITIONING</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TiffEncoder.TileSize">
            <summary>Gets or sets the size of tiles that are saved when

WriteTiled is true.</summary>
            <remarks>The size of tiles that are saved when

WriteTiled is true. The default value is 256, 256.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TiffEncoder.WriteTiled">
            <summary>Gets or sets a value that when true, will cause TIFF images
to be encoded tiled.</summary>
            <remarks>Tiled TIFF images are useful when the image is large, and the
reader is capable of reading individual tiles. See

TileSize for setting the tile width and length.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TiffEncoder.Xmp">
            <summary>Gets or sets XMP data to encode with the image.</summary>
            <remarks>This property can be used to save XMP Annotation data created
with DotAnnotate, our full featured Annotations
toolkit for the Microsoft .NET Framework.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.TlaDecoder">
            <summary>    An ImageDecoder used to read Tla images from a
    System.IO.Stream.</summary>
            <remarks>    By default, when opening a Tla image using the AtalaImage
    or Workspace objects, this decoder will automatically be
    selected from the RegisteredDecoders and does not have to be
    explicitly set.
    A TLA image can save images in an encrypted format. A
    password needs to be supplied for opening these image
    formats.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TlaDecoder._ctor">
            <summary>Initializes a new instance of a TlaDecoder. Creates a
TlaDecoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TlaDecoder._ctor">
            <summary>Initializes a new instance of a TlaDecoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TlaDecoder._ctor(System.String)">
            <summary>Initializes a new instance of a TlaDecoder specifying the
password.</summary>
            <param name="password">The password to use for reading encrypted Tla images.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TlaDecoder.GetImageInfo(System.IO.Stream)">
            <summary>Retreive information from a Tla image stored in a Stream
without decoding the image data. Returns an ImageInfo object
containing information about the image.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TlaDecoder.IsValidFormat(System.IO.Stream)">
            <summary>    Returns true if the specified Stream contains an Tla
    image.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TlaDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Reads the image data into an AtalaImage object.</summary>
            <remarks>Returns an AtalaImage from a Stream containing a Tla encoded
image.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TlaDecoder.Password">
            <summary>Gets or sets the password to use for reading encrypted Tla
images.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TlaDecoder.SupportedImageType">
            <summary>Returns a Tla ImageType enumeration value.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.TlaEncoder">
            <summary>    An ImageEncoder that will write TLA images to a
    System.IO.Stream.</summary>
            <remarks>This ImageEncoder can be passed into the the AtalaImage or
Workspace objects when saving to specify a TLA image.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TlaEncoder._ctor">
            <summary>Initializes a new instance of a TiffEncoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TlaEncoder._ctor">
            <summary>Initializes a new instance of a TlaEncoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TlaEncoder._ctor(System.String)">
            <summary>Initializes a new instance of a TlaEncoder specifying the
password to encrypt with.</summary>
            <param name="password">The password to use for reading, writing, or obtaining
information on encrypted TLA images.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TlaEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Encode an AtalaImage as a Tla image to a stream.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TlaEncoder.Password">
            <summary>Gets or sets the password to use for reading, writing, or
obtaining information on encrypted TLA images.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.WbmpDecoder">
            <summary>    An ImageDecoder used to read Wireless Bitmap (Wbmp)
    images from a System.IO.Stream.</summary>
            <remarks>    By default, when opening a Wbmp image using the
    AtalaImage or Workspace objects, this decoder will
    automatically be selected from the RegisteredDecoders and does
    not have to be explicitly set.
    A WBMP image is commonly used in PDA devices and is
    always black and white.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.WbmpDecoder._ctor">
            <summary>Initializes a new instance of a WbmpDecoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.WbmpDecoder.GetImageInfo(System.IO.Stream)">
            <summary>Retreive information from a Wbmp image stored in a Stream
without decoding the image data.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.WbmpDecoder.IsValidFormat(System.IO.Stream)">
            <summary>    Returns true if the specified Stream contains an Wbmp
    image.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.WbmpDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <remarks>Returns an AtalaImage from a Stream containing a Wbmp encoded
image.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.WbmpDecoder.SupportedImageType">
            <summary>Returns a Wbmp ImageType enumeration value.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.WbmpEncoder">
            <summary>    An ImageEncoder that will write Wireless Bitmap (WBMP)
    images to a System.IO.Stream.</summary>
            <remarks>This ImageEncoder can be passed into the the AtalaImage or
Workspace objects when saving to specify a WBMP image.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.WbmpEncoder._ctor">
            <summary>Initializes a new instance of a WbmpEncoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.WbmpEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Encode an AtalaImage as a Wbmp image to a stream.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.WmfDecoder">
            <summary>    An ImageDecoder used to read Windows Metafile (WMF)
    images from a System.IO.Stream.</summary>
            <remarks>    By default, when opening a Wmf image using the AtalaImage
    or Workspace objects, this decoder will automatically be
    selected from the RegisteredDecoders and does not have to be
    explicitly set.
    Any vectorized entities saved in the Metafile will be
    converted to a raster format.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.WmfDecoder._ctor">
            <summary>Initializes a new instance of a WmfDecoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.WmfDecoder._ctor">
            <summary>Initializes a new instance of a WmfDecoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.WmfDecoder._ctor(System.Drawing.Size)">
            <summary>Initializes a new instance of a WmfDecoder specifying the
size of the image.</summary>
            <param name="defaultSize">The default System.Drawing.Size when reading a windows
metafile.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.WmfDecoder.GetImageInfo(System.IO.Stream)">
            <summary>Retreive information from a Wmf image stored in a Stream
without decoding the image data.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.WmfDecoder.IsValidFormat(System.IO.Stream)">
            <summary>    Returns true if the specified Stream contains an Wmf
    image.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.WmfDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <remarks>Returns an AtalaImage from a Stream containing a Wmf encoded
image.</remarks>
            <param name="stream">A stream containing the encoded image data.</param>
            <param name="progress">The progress delegate. Can be set to null
(Nothing in Visual Basic).</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.WmfDecoder.DefaultSize">
            <summary>Gets or sets the default System.Drawing.Size when reading a
windows metafile.</summary>
            <remarks>Windows metafiles may or may not have dimensions associated
with them. If not, then this attribute defines the size that will
be used. If this value is empty, it will use information that might
be stored in the file or a default of 640 x 480 pixels.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.WmfDecoder.SupportedImageType">
            <summary>Returns a Wmf ImageType enumeration value.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.WmfEncoder">
            <summary>    An ImageEncoder that will write Windows Metafile (WMF)
    images to a System.IO.Stream.</summary>
            <remarks>This ImageEncoder can be passed into the the AtalaImage or
Workspace objects when saving to specify a WMF image.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.WmfEncoder._ctor">
            <summary>Initializes a new instance of a WmfEncoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.WmfEncoder._ctor">
            <summary>Initializes a new instance of a WmfEncoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.WmfEncoder._ctor(System.Boolean)">
            <summary>Initializes a new instance of a WmfEncoder specifying the
placeable value.</summary>
            <param name="placeable">A value indicating if an Aldus placeable metafile will be
written.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.WmfEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Encode an AtalaImage as a Wmf image to a stream.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.WmfEncoder.ImageType">
            <summary>Returns the ImageType associated with thie
Encoder Setting.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.WmfEncoder.Placeable">
            <summary>Gets or sets a value indicating if an Aldus placeable
metafile will be written.</summary>
        </member>
        <member name="N:Atalasoft.Imaging.ColorManagement">
            <summary>Contains classes that are used for converting colorspaces and
color matching images to a device.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ColorManagement.ColorSpace">
            <summary>A value that indicates the color space in which profile data
is defined.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ColorManagement.Platform">
            <summary>Indicates the platform that the profile is intended
for.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ColorManagement.ProfileClass">
            <summary>Indicates the profile class.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ProfileClass.Monitor">
            <summary>Display Device Profile</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ProfileClass.Printer">
            <summary>Output Device Profile</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ProfileClass.Scanner">
            <summary>Input Device Profile</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ProfileClass.Link">
            <summary>Device Link Profile</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ProfileClass.Abstract">
            <summary>Abstract Profile</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ProfileClass.ColorSpace">
            <summary>Color Space Conversion Profile</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ProfileClass.Named">
            <summary>Named Color Profile</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ColorManagement.ProfileFlags">
            <summary>Bit flags containing hints that the CMM uses to interpret the
profile data.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ProfileFlags.EmbeddedProfile">
            <summary>The profile is embedded in a bitmap file.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ProfileFlags.DependentOnData">
            <summary>The profile can't be used independently of the embedded color
data. Used for profiles that are embedded in bitmap files</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ColorManagement.RenderingIntent">
            <summary>Indicates different methods to create a color rendering as
defined by the International Color Consortium (ICC).</summary>
            <remarks>See MSDN for more information on rendering intents.</remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.RenderingIntent.Pictures">
            <summary>Known as perceptual intent in the ICC specification, causes
the full gamut to be compressed or expanded to full the gamut of
the destination device. Most suitable for photographic images and
is usually the default intent.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.RenderingIntent.Proof">
            <summary>Known as the colorimetric intent in the ICC specification,
causes colors that fall outside the range of the output device to
be set to the nearest color while leaving the other colors
unchanged. Does not preserve the white point and is commonly used
for proofing printed material.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.RenderingIntent.Graphics">
            <summary>Known as the Saturation intent in the ICC specification, it
preserves the saturation of colors as the expense of hue and
lightness. Commonly used for business graphics.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.RenderingIntent.Match">
            <summary>Known as the absolute colorimetric intent in the ICC
specification, causes colors that fall outside the range of the
output device to be set to the nearest color while leaving the
other colors unchanged. Preserves the white point.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ColorManagement.ColorProfile">
            <summary>    A color profile that is used for translating
    colors.</summary>
            <remarks>    Cuyrrently, dotImage will read and embed a color profile
    into a JPEG, TIFF, or PNG image. The profile is used when
    converting to different colorspaces such as CMYK to RGB and RGB
    to CMYK.
    See www.color.org for
    a detailed explanation of the ICC and color profiles.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile._ctor">
            <summary>Initializes a new instance of ColorProfile.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile._ctor(System.Byte[])">
            <summary>    Initializes a new instance of ColorProfile specifying a
    byte array containing the profile memory.</summary>
            <param name="data">The bytes that contain the color profile.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile._ctor(System.IntPtr,System.Int32)">
            <summary>    Initializes a new instance of ColorProfile specifying a
    pointer to the profile memory and the size of this
    memory.</summary>
            <param name="mempointer">A pointer to the memory containing a color profile.</param>
            <param name="size">The size of the memory pointer in bytes.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile._ctor(System.IO.Stream)">
            <summary>    Initializes a new instance of ColorProfile specifying a
    stream containing the profile memory.</summary>
            <param name="stream">A stream containing a color profile.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile._ctor(System.String)">
            <summary>    Initializes a new instance of ColorProfile specifying the
    filename containing a color profile.</summary>
            <param name="fileName">The file name of the color profile (usually with the ICM or
ICC extension).</param>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.Dispose">
            <summary>Free unmanaged resources.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.FromEmbedded">
            <summary>Returns a ColorProfile embedded within an
image.</summary>
            <returns>A ColorProfile embedded within an
image.</returns>
            <remarks>Can be a PNG, TIFF, or JPEG image.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.FromEmbedded(System.IO.Stream)">
            <summary>Returns a ColorProfile embedded within an
image given the image stream.</summary>
            <returns>A ColorProfile embedded within an
image.</returns>
            <param name="imageStream">The encoded image stream.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.FromEmbedded(System.String)">
            <summary>Returns a ColorProfile embedded within an
image given the image file name.</summary>
            <returns>A ColorProfile embedded within an
image.</returns>
            <param name="fileName">The filename of the image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.FromSrgb">
            <summary>Returns the standard sRGB Color Profile.</summary>
            <returns>The standard sRGB Color Profile.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.GetProfileBytes">
            <summary>Returns the number of bytes that this ColorProfile
occupies.</summary>
            <returns>The number of bytes that this ColorProfile occupies.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.GetProfileDirectory">
            <summary>Returns the path of the color profile directory.</summary>
            <returns>The path of the color profile directory.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.GetProfileFromGraphics(System.Drawing.Graphics)">
            <summary>Returns the color profile assigned to a specified Graphics
object.</summary>
            <returns>The color profile assigned to a specified Graphics
object.</returns>
            <param name="graphics">A graphics object.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.GetProfileFromScreen">
            <summary>Returns the default color profile assigned to the
screen.</summary>
            <returns>The default color profile assigned to the screen.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.GetScreenProfileName">
            <summary>Returns the name of the color profile associated with the
current display.</summary>
            <returns>The name of the color profile associated with the current
display.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.Save(System.String)">
            <summary>Save this ColorProfile to a file.</summary>
            <param name="fileName">The filename of the colorprofile to save.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ColorManagement.ColorProfile.Class">
            <summary>Gets the profile class.</summary>
            <remarks>The profile class indicates a type of profile. For example
Input, Display, Color Space Conversion, etc.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ColorManagement.ColorProfile.CmmType">
            <summary>Gets the identification number of the CMM that is used in the
profile. Identification numbers are registered with the ICC.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ColorManagement.ColorProfile.ColorSpace">
            <summary>Gets a value that indicates the color space in which the
profile data is defined.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ColorManagement.ColorProfile.ConnectionColorSpace">
            <summary>Gets a value that indicates the color space in which the
profile connection space (PCS) is defined.</summary>
            <remarks>Can be either XYZ or Lab.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ColorManagement.ColorProfile.Creator">
            <summary>Gets a signature of the software that created the profile.
Signatures are registered with the ICC.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ColorManagement.ColorProfile.Flags">
            <summary>Gets bit flags containing hints that the CMM uses to
interpret the profile data.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ColorManagement.ColorProfile.Manufacturer">
            <summary>    Gets the identification number of the device profile
    manufacturer. All manufacturer identification numbers are
    registered with the ICC.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ColorManagement.ColorProfile.Model">
            <summary>Gets the device manufacturer's device model number. All model
identification numbers are registered with the ICC.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ColorManagement.ColorProfile.Platform">
            <summary>Gets the primary platform for which the profile was
created.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ColorManagement.ColorProfile.RenderingIntent">
            <summary>Gets the profile rendering intent.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ColorManagement.ColorProfile.Version">
            <summary>Gets the version number of this color profile.</summary>
            <remarks>    The string returned is in the format of "0.0.0" where the
    first number if the major version, the second is the minor
    version, and the last is the bug fix version.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ColorManagement.ColorTransform">
            <summary>    Contains a color transform object and methods to convert
    from one colorspace to another using a ColorProfile.</summary>
            <remarks>This class can be used to translate the colorspace of images
or colors. It is used by the controls to view CMYK images and when
color management is enabled. See Color Management in WinControls
for more information.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorTransform._ctor">
            <summary>Initializes a new instance of ColorTransform.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorTransform._ctor(Atalasoft.Imaging.ColorManagement.ColorProfile,Atalasoft.Imaging.ColorManagement.ColorProfile)">
            <summary>Initializes a new instance of ColorTransform specifying a
source and destination ColorProfile.</summary>
            <param name="source">The source color profile.</param>
            <param name="dest">The destination color profile.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorTransform._ctor(Atalasoft.Imaging.ColorManagement.ColorProfile,Atalasoft.Imaging.ColorManagement.ColorProfile,Atalasoft.Imaging.ColorManagement.ColorProfile,Atalasoft.Imaging.ColorManagement.RenderingIntent,Atalasoft.Imaging.ColorManagement.RenderingIntent)">
            <summary>Initializes a new instance of ColorTransform specifying a
source,. destination, and target ColorProfile and the rendering
intents of the translation.</summary>
            <remarks>This constructor is used for proofing images.</remarks>
            <param name="source">The source color profile.</param>
            <param name="dest">The destination color profile.</param>
            <param name="target">The target output device color profile.</param>
            <param name="displayIntent">The rendering intent to use for the display.</param>
            <param name="proofIntent">The rendering intent to use for the target device.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorTransform._ctor(Atalasoft.Imaging.ColorManagement.ColorProfile,Atalasoft.Imaging.ColorManagement.ColorProfile,Atalasoft.Imaging.ColorManagement.RenderingIntent)">
            <summary>Initializes a new instance of ColorTransform specifying a
source and destination ColorProfile and the rendering intent of the
translation.</summary>
            <param name="source">The source color profile.</param>
            <param name="dest">The destination color profile.</param>
            <param name="renderingIntent">The rendering intent of the translation.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorTransform.ConvertColors(Atalasoft.Imaging.ColorManagement.ColorType,Atalasoft.Imaging.ColorManagement.ColorType,System.Drawing.Color[])">
            <summary>This method converts an array of colors using this
ColorTransform.</summary>
            <returns>An array of Colors.</returns>
            <param name="inputColorType">The ColorType of the input colors.</param>
            <param name="outputColorType">The ColorType of the output colors.</param>
            <param name="inputColors">A parameterr array of color values.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorTransform.ConvertColorSpace(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat)">
            <summary>Returns a new image with a translated colorspace.</summary>
            <returns>A new image with a translated colorspace.</returns>
            <param name="image">The image to translate.</param>
            <param name="destPixelFormat">The desired PixelFormat of the returned image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorTransform.Dispose">
            <summary>Clean up unmanaged resources.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ColorManagement.InvalidColorProfileException">
            <summary>This exception fires when the ColorProfiles used for a
ColorTransform are invalid.</summary>
            <remarks>This exception usually means that the appropriate tag for the
desired conversion doesn't exist in the color profile.</remarks>
        </member>
        <member name="N:Atalasoft.Imaging.Drawing">
            <summary>Contains classes that will draw primitives such as lines,
circles, and text onto an image.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Drawing.Alignment">
            <summary>Specifies the line position.</summary>
            <remarks>The alignment will is ignored and always centered with
DrawLine, DrawLines, and DrawPolygon.</remarks>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.Alignment.Center">
            <summary>Center the line on the region.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.Alignment.Inset">
            <summary>Draw the line inside the region.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.Alignment.Outset">
            <summary>Draw the line outside the region.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Drawing.CornerJoin">
            <summary>Corner style used where lines join.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.CornerJoin.Miter">
            <summary>Joins are mitred.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.CornerJoin.Bevel">
            <summary>Joins are beveled.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.CornerJoin.Round">
            <summary>Joins are round.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Drawing.EndCap">
            <summary>Drawing style for the end of lines.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.EndCap.Flat">
            <summary>End caps are flat.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.EndCap.Round">
            <summary>End caps are round.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.EndCap.Square">
            <summary>End caps are square.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Drawing.Hatch">
            <summary>The style of Hatch to use with a HatchedFill.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.Hatch.Cross">
            <summary>Horizontal and vertical cross-hatch</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.Hatch.DiagonalCross">
            <summary>45-degree crosshatch</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.Hatch.DiagonalDown">
            <summary>A 45-degree downward, left-to-right hatch</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.Hatch.DiagonalUp">
            <summary>A 45-degree upward, left-to-right hatch</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.Hatch.Horizontal">
            <summary>Horizontal hatch</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.Hatch.Vertical">
            <summary>Vertical hatch</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Drawing.LineStyle">
            <summary>The type of line to draw.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.LineStyle.Solid">
            <summary>The pen is solid.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.LineStyle.Dash">
            <summary>The pen is dashed.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.LineStyle.Dot">
            <summary>The pen is dotted.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.LineStyle.DashDot">
            <summary>The pen has alternating dashes and dots.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.LineStyle.DashDotDot">
            <summary>The pen has alternating dashes and double dots.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.LineStyle.Custom">
            <summary>Allows for a custom dash/dot combination.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Drawing.TextAlignment">
            <summary>The horizontal alignment of the text.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.TextAlignment.Left">
            <summary>Left aligned text.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.TextAlignment.Center">
            <summary>Centered text.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.TextAlignment.Right">
            <summary>Right aligned text.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.TextAlignment.Justify">
            <summary>Justified text.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Drawing.AtalaPen">
            <summary>    The AtalaPen is used to define a line or border used when
    drawing primitives onto a Canvas.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.AtalaPen._ctor">
            <summary>    Initializes a new instance of the AtalaPen
    class.Creates an AtalaPen object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.AtalaPen._ctor">
            <summary>    Initializes a new instance of the AtalaPen class that
    holds a single pixel width black solid pen.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.AtalaPen._ctor(System.Drawing.Color)">
            <summary>    Initializes a new instance of the AtalaPen class with a
    specified color.</summary>
            <param name="color">The color of the pen.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.AtalaPen._ctor(System.Drawing.Color,System.Int32)">
            <summary>    Initializes a new instance of the AtalaPen class with a
    specified color and width.</summary>
            <param name="color">The color of the fill.</param>
            <param name="width">The width of the pen in pixels.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.AtalaPen._ctor(System.Drawing.Color,System.Int32,Atalasoft.Imaging.Drawing.LineStyle)">
            <summary>    Initializes a new instance of the AtalaPen class with a
    specified color, width, and line style.</summary>
            <param name="color">The color of the fill.</param>
            <param name="width">The width of the pen in pixels.</param>
            <param name="lineStyle">The style of the line.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.AtalaPen._ctor(System.Drawing.Color,System.Int32,Atalasoft.Imaging.Drawing.LineStyle,Atalasoft.Imaging.Drawing.EndCap,Atalasoft.Imaging.Drawing.CornerJoin)">
            <summary>    Initializes a new instance of the AtalaPen class with a
    specified color, width, line style, end cap, and corner
    join.</summary>
            <param name="color">The color of the pen.</param>
            <param name="width">The width of the pen in pixels.</param>
            <param name="lineStyle">The style of the line.</param>
            <param name="endCap">The pen EndCap used when drawing.</param>
            <param name="cornerJoin">The style of corners used for this pen.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.AtalaPen._ctor(System.Drawing.Color,System.Int32,Atalasoft.Imaging.Drawing.LineStyle,Atalasoft.Imaging.Drawing.EndCap,Atalasoft.Imaging.Drawing.CornerJoin,Atalasoft.Imaging.Drawing.Alignment)">
            <summary>Creates a new instance of AtalaPen specifying color, width,
line style, end cap, corner join and alignment.</summary>
            <param name="color">The color of the pen.</param>
            <param name="width">The width of the pen in pixels.</param>
            <param name="lineStyle">The style of the line.</param>
            <param name="endCap">The pen EndCap used when drawing.</param>
            <param name="cornerJoin">The style of corners used for this pen.</param>
            <param name="alignment">The pen alignment.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.AtalaPen._ctor(Atalasoft.Imaging.Drawing.Fill)">
            <summary>    Initializes a new instance of the AtalaPen class with a
    specified Fill.</summary>
            <param name="fill">The Fill defining the fill characteristics of the line drawn
with the pen.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.AtalaPen._ctor(Atalasoft.Imaging.Drawing.Fill,System.Int32)">
            <summary>    Initializes a new instance of the AtalaPen class with a
    specified Fill and width.</summary>
            <param name="fill">The Fill defining the fill characteristics of the line drawn
with the pen.</param>
            <param name="width">The width of the pen in pixels.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.AtalaPen._ctor(Atalasoft.Imaging.Drawing.Fill,System.Int32,Atalasoft.Imaging.Drawing.LineStyle)">
            <summary>    Initializes a new instance of the AtalaPen class with a
    specified Fill, width, and line style.</summary>
            <param name="fill">The Fill defining the fill characteristics of the line drawn
with the pen.</param>
            <param name="width">The width of the pen in pixels.</param>
            <param name="lineStyle">The style of the line.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.AtalaPen._ctor(Atalasoft.Imaging.Drawing.Fill,System.Int32,Atalasoft.Imaging.Drawing.LineStyle,Atalasoft.Imaging.Drawing.EndCap,Atalasoft.Imaging.Drawing.CornerJoin)">
            <summary>    Initializes a new instance of the AtalaPen class with a
    specified Fill, width, line style, end cap, and corner
    join.</summary>
            <param name="fill">The Fill defining the fill characteristics of the line drawn
with the pen.</param>
            <param name="width">The width of the pen in pixels.</param>
            <param name="lineStyle">The style of the line.</param>
            <param name="endCap">The pen EndCap used when drawing.</param>
            <param name="cornerJoin">The style of corners used for this pen.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.AtalaPen._ctor(Atalasoft.Imaging.Drawing.Fill,System.Int32,Atalasoft.Imaging.Drawing.LineStyle,Atalasoft.Imaging.Drawing.EndCap,Atalasoft.Imaging.Drawing.CornerJoin,Atalasoft.Imaging.Drawing.Alignment)">
            <summary>Creates a new instance of AtalaPen specifying the fill,
width, line style, end cap, corner join and alignment.</summary>
            <param name="fill">The Fill defining the fill characteristics of the line drawn
with the pen.</param>
            <param name="width">The width of the pen in pixels.</param>
            <param name="lineStyle">The style of the line.</param>
            <param name="endCap">The pen EndCap used when drawing.</param>
            <param name="cornerJoin">The style of corners used for this pen.</param>
            <param name="alignment">The pen alignment.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.AtalaPen.Clone">
            <summary>Create a copy of this AtalaPen.</summary>
            <returns>Pen object</returns>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.AtalaPen.Alignment">
            <summary>Gets or sets a value indicating the line positioning relative
to the coordinates.</summary>
            <remarks>The property is ignored when drawing a line, lines, or
polygon.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.AtalaPen.Color">
            <summary>Gets or sets the color of the pen.</summary>
            <remarks>This property references the Fill.Color
property</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.AtalaPen.CornerJoin">
            <summary>Gets or sets the style of corners used for this pen.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.AtalaPen.CustomDashPattern">
            <summary>Gets or sets an array of int's indicating the dash pattern
when the LineStyle is set to Custom.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.AtalaPen.EndCap">
            <summary>Gets or sets the pen EndCap used when drawing.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.AtalaPen.Fill">
            <summary>Gets or sets the Fill used when drawing with this pen.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.AtalaPen.LineStyle">
            <summary>Gets or sets the type of line drawn with this pen.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.AtalaPen.penStyle">
            <summary>Returns the PenStyle value used in ExtCreatePen.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.AtalaPen.Width">
            <summary>Gets or sets the width of the pen in pixels.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Drawing.Canvas">
            <summary>This class is used to draw primitives and text onto an
AtalaImage, Bitmap, or Graphics object.</summary>
            <remarks>    To use the canvas class, create an instance specifying
    the object that will be drawn on in the constructor. If you're
    using the WorkspaceViewer WinControl, you will have to invoke
    ClearCache to show the changes to the image.
    The drawing class has some advantages over using the
    Graphics object in GDI+. You may draw directly onto grayscale,
    colormapped, and 1-bit document images. In addition, you can
    choose the border color and line type with an
    AtalaPen, and if the drawing entity supports
    it, a Fill to use to fill the inside of the
    entity. The various Fill objects can be used for solid,
    hatched, gradient, or textured filled areas for both the border
    and inside of the entity.
    A smoothing level can be specified in the canvas object
    which can be configured to enable antialising of the drawn
    objects.
    In addition, when drawing onto a graphics object, you may
    specify an inverted pen, using the XOR algorithm when drawing
    any entity onto the device. This property is ignored</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas._ctor">
            <summary>Initializes a new instance of a Canvas object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas._ctor(Atalasoft.Imaging.AtalaImage)">
            <summary>Initializes a new instance of a Canvas object specifying an
Atalasoft.Imaging.AtalaImage to draw on.</summary>
            <param name="image">The image to draw on.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas._ctor(System.Drawing.Graphics)">
            <summary>Initializes a new instance of a Canvas object specifying a
System.Drawing.Graphics to draw on.</summary>
            <param name="graphics">The device to draw on.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.CalculateTextSize">
            <summary>Calculates the size of the text without actually drawing
it.</summary>
            <returns>Returns the size of the text without actually drawing
it.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.CalculateTextSize(System.String,System.Drawing.Font)">
            <summary>Calculates the pixel size required to draw text using a
specific font.</summary>
            <returns>The size in pixel.</returns>
            <param name="text">The text to draw.</param>
            <param name="font">The font used for the text.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.CalculateTextSize(System.String,System.Drawing.Font,Atalasoft.Imaging.Drawing.TextFormat)">
            <summary>Calculates the pixel size required to draw text using a
specific font and text format.</summary>
            <returns>Returns the size of single line text without actually drawing
it.</returns>
            <param name="text">The text string to evaluate.</param>
            <param name="font">The text font.</param>
            <param name="format">The text formatting to apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.CalculateTextSize(System.String,System.Drawing.Size,System.Drawing.Font,Atalasoft.Imaging.Drawing.TextFormat)">
            <summary>Calculates the size of bound text without actually drawing
it.</summary>
            <returns>Returns the size of bound text without actually drawing
it.</returns>
            <param name="text">The text string to evaluate.</param>
            <param name="boundSize">The size of the bound</param>
            <param name="font">The text font.</param>
            <param name="format">The text formatting to apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawEllipse">
            <summary>Draws an ellipse onto this canvas.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawEllipse(System.Drawing.Rectangle,Atalasoft.Imaging.Drawing.AtalaPen)">
            <summary>Draws an ellipse onto this canvas specifying the border
pen.</summary>
            <param name="rect">The bounding rectangle of the ellipse.</param>
            <param name="pen">The AtalaPen controlling the border characteristics.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawEllipse(System.Drawing.Rectangle,Atalasoft.Imaging.Drawing.AtalaPen,Atalasoft.Imaging.Drawing.Fill)">
            <summary>Draws an ellipse onto this canvas specifying the border pen
and Fill.</summary>
            <param name="rect">The bounding rectangle of the ellipse.</param>
            <param name="pen">The AtalaPen controlling the border characteristics.</param>
            <param name="fill">The Fill specifying the fill characteristics.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawEllipse(System.Drawing.Rectangle,Atalasoft.Imaging.Drawing.Fill)">
            <summary>Draws an ellipse onto this canvas specifying the Fill.</summary>
            <param name="rect">The bounding rectangle of the ellipse.</param>
            <param name="fill">The Fill specifying the fill characteristics.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawLine(System.Drawing.Point,System.Drawing.Point,Atalasoft.Imaging.Drawing.AtalaPen)">
            <summary>Draw a line onto this canvas.</summary>
            <remarks>The line is specified from a start point to an end point and
a pen to control it's color, thickness, line style, and fill
style.</remarks>
            <param name="startPoint">The start point of the line in image pixel
coordinates.</param>
            <param name="endPoint">The end point of the line in image pixel coordinates.</param>
            <param name="pen">The AtalaPen controling the line characteristics.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawLines(System.Drawing.Point[],Atalasoft.Imaging.Drawing.AtalaPen)">
            <summary>Draws multiple connected lines onto this canvas.</summary>
            <remarks>The lines are specifyied with a series of points. To connect
the last point with the first point see DrawPolygon.</remarks>
            <param name="points">An array of points that straight lines are drawn
through.</param>
            <param name="pen">The AtalaPen controlling the line characteristics.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawPolygon">
            <summary>Draw a series of connected lines that form a closed
polygon.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawPolygon(System.Drawing.Point[],Atalasoft.Imaging.Drawing.AtalaPen)">
            <summary>Draw a series of connected lines that form a closed polygon
specifying the border pen.</summary>
            <remarks>The first and last points are connected, forming the closed
polygon.</remarks>
            <param name="points">An array of points forming a polygon that straight lines are
drawn through.</param>
            <param name="pen">The AtalaPen controlling the border characteristics.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawPolygon(System.Drawing.Point[],Atalasoft.Imaging.Drawing.AtalaPen,Atalasoft.Imaging.Drawing.Fill)">
            <summary>Draw a series of connected lines that form a closed polygon
specifying the border pen and inside fill.</summary>
            <remarks>The first and last points are connected, forming the closed
polygon.</remarks>
            <param name="points">An array of points forming a polygon that straight lines are
drawn through.</param>
            <param name="pen">The AtalaPen controlling the border characteristics.</param>
            <param name="fill">The Fill specifying the fill characteristics.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawPolygon(System.Drawing.Point[],Atalasoft.Imaging.Drawing.Fill)">
            <summary>Draw a series of connected lines that form a closed polygon
specifying the inside fill.</summary>
            <remarks>The first and last points are connected, forming the closed
polygon.</remarks>
            <param name="points">An array of points forming a polygon that straight lines are
drawn through.</param>
            <param name="fill">The Fill specifying the fill characteristics.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawRectangle">
            <summary>Draws a rectangle onto this canvas.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawRectangle(System.Drawing.Rectangle,Atalasoft.Imaging.Drawing.AtalaPen)">
            <summary>Draws a rectangle onto this canvas specifying the border
pen.</summary>
            <param name="rect">The position and size of the rectangle.</param>
            <param name="pen">The AtalaPen controlling the border characteristics.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawRectangle(System.Drawing.Rectangle,Atalasoft.Imaging.Drawing.AtalaPen,Atalasoft.Imaging.Drawing.Fill)">
            <summary>Draws a rectangle onto this canvas specifying the border pen
and fill.</summary>
            <param name="rect">The position and size of the rectangle.</param>
            <param name="pen">The AtalaPen controlling the border characteristics.</param>
            <param name="fill">The Fill specifying the fill characteristics.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawRectangle(System.Drawing.Rectangle,Atalasoft.Imaging.Drawing.AtalaPen,Atalasoft.Imaging.Drawing.Fill,System.Drawing.Size)">
            <summary>Draws a rounded rectangle onto this canvas specifying the
border pen and fill.</summary>
            <param name="rect">The position and size of the rectangle.</param>
            <param name="pen">The AtalaPen controlling the border characteristics.</param>
            <param name="fill">The Fill specifying the fill characteristics.</param>
            <param name="cornerRadius">The radius in pixels of the corners.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawRectangle(System.Drawing.Rectangle,Atalasoft.Imaging.Drawing.AtalaPen,System.Drawing.Size)">
            <summary>Draws a rounded rectangle onto this canvas specifying the
border pen.</summary>
            <param name="rect">The position and size of the rectangle.</param>
            <param name="pen">The AtalaPen controlling the border characteristics.</param>
            <param name="cornerRadius">The radius in pixels of the corners.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawRectangle(System.Drawing.Rectangle,Atalasoft.Imaging.Drawing.Fill)">
            <summary>Draws a rectangle onto this canvas specifying the
fill.</summary>
            <param name="rect">The position and size of the rectangle.</param>
            <param name="fill">The Fill specifying the fill characteristics.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawRectangle(System.Drawing.Rectangle,Atalasoft.Imaging.Drawing.Fill,System.Drawing.Size)">
            <summary>Draws a rounded rectangle onto this canvas specifying the
fill.</summary>
            <param name="rect">The position and size of the rectangle.</param>
            <param name="fill">The Fill specifying the fill characteristics.</param>
            <param name="cornerRadius">The radius in pixels of the corners.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawRegion(System.Drawing.Region,Atalasoft.Imaging.Drawing.Fill)">
            <summary>Draws a filled region.</summary>
            <param name="region">The region to fill.</param>
            <param name="fill">The Fill specifying the fill characteristics.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawText">
            <summary>Draw a single line or multi-line text string onto this
canvas.</summary>
            <returns>The actual size of the text drawn.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawText(System.String,System.Drawing.Point,System.Drawing.Font,Atalasoft.Imaging.Drawing.Fill)">
            <summary>Draw a single line text string onto this canvas specifying
the upper left corner position.</summary>
            <returns>The actual size of the text drawn.</returns>
            <param name="text">The text string to draw.</param>
            <param name="position">The position of the upper left corner of the text rectangle
to draw.</param>
            <param name="font">The text font.</param>
            <param name="foreColor">The text fill.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawText(System.String,System.Drawing.Point,System.Drawing.Font,Atalasoft.Imaging.Drawing.Fill,Atalasoft.Imaging.Drawing.SolidFill)">
            <summary>Draw a single line text string onto this canvas specifying
the upper left corner position and a solid background color.</summary>
            <param name="text">The text string to draw.</param>
            <param name="position">The position of the upper left corner of the text rectangle
to draw.</param>
            <param name="font">The text font.</param>
            <param name="foreColor">The text fill.</param>
            <param name="backColor">The background color.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawText(System.String,System.Drawing.Point,System.Drawing.Font,Atalasoft.Imaging.Drawing.Fill,Atalasoft.Imaging.Drawing.SolidFill,Atalasoft.Imaging.Drawing.TextFormat)">
            <summary>Draw a single line text string onto this canvas specifying
the upper left corner position and a solid background color.</summary>
            <param name="text">The text string to draw.</param>
            <param name="position">The position of the upper left corner of the text rectangle
to draw.</param>
            <param name="font">The text font.</param>
            <param name="foreColor">The text fill.</param>
            <param name="backColor">The background color.</param>
            <param name="format">The text formatting to apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawText(System.String,System.Drawing.Point,System.Drawing.Font,Atalasoft.Imaging.Drawing.Fill,Atalasoft.Imaging.Drawing.TextFormat)">
            <summary>Draw a single line text string onto this canvas specifying
the upper left corner position and text formatting.</summary>
            <returns>The actual size of the text drawn.</returns>
            <param name="text">The text string to draw.</param>
            <param name="position">The position of the upper left corner of the text rectangle
to draw.</param>
            <param name="font">The text font.</param>
            <param name="foreColor">The text fill.</param>
            <param name="format">The text formatting to apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawText(System.String,System.Drawing.Rectangle,System.Drawing.Font,Atalasoft.Imaging.Drawing.Fill)">
            <summary>Draw multiline text onto this canvas specifying the
rectangular bound area of the string.</summary>
            <remarks>    The rectangular width must be specified. Specify a value
    for the rectangular height to clip the text, or 0 to prevent
    clipping the text.</remarks>
            <returns>The actual size of the text drawn.</returns>
            <param name="text">The text string to draw.</param>
            <param name="boundRectangle">The bounding rectangle of the text to draw. Specify 0 height
to prevent clipping the text.</param>
            <param name="font">The text font.</param>
            <param name="foreColor">The text fill.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawText(System.String,System.Drawing.Rectangle,System.Drawing.Font,Atalasoft.Imaging.Drawing.Fill,Atalasoft.Imaging.Drawing.SolidFill,Atalasoft.Imaging.Drawing.TextFormat)">
            <summary>Draw a single line text string onto this canvas specifying
the upper left corner position and a solid background color.</summary>
            <param name="text">The text string to draw.</param>
            <param name="boundRectangle">The bounding rectangle of the text to draw. Specify 0 height
to prevent clipping the text.</param>
            <param name="font">The text font.</param>
            <param name="foreColor">The text fill.</param>
            <param name="backColor">The background color.</param>
            <param name="format">The text formatting to apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawText(System.String,System.Drawing.Rectangle,System.Drawing.Font,Atalasoft.Imaging.Drawing.Fill,Atalasoft.Imaging.Drawing.TextFormat)">
            <summary>Draw multiline text onto this canvas specifying the
rectangular bound area of the string and text formatting.</summary>
            <remarks>    The rectangular width must be specified. Specify a value
    for the rectangular height to clip the text, or 0 to prevent
    clipping the text.</remarks>
            <returns>The actual size of the text drawn.</returns>
            <param name="text">The text string to draw.</param>
            <param name="boundRectangle">The bounding rectangle of the text to draw. Specify 0 height
to prevent clipping the text</param>
            <param name="font">The text font.</param>
            <param name="foreColor">The text fill.</param>
            <param name="format">The text formatting to apply.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.Canvas.InvertedOnGraphics">
            <summary>Gets or sets a value indicating if entities being drawn on a
graphics object will be inverted.</summary>
            <remarks>Setting this property to true will cause the pixels beneath
the entity to be negated with the XOR algorithm. This is useful
when drawing rubber-bands that can quickly be erased be drawing
over the same location twice. The selection rectangle in the
WinForm Viewport control by default draws on an inverted
canvas.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.Canvas.SmoothingLevel">
            <summary>Gets or sets the amount of antialiasing applied to the entity
being drawn onto this canvas.</summary>
            <remarks>    Smoothing only works on continuous tone images
    (grayscale, RGB, or RGBA generally) and will be ignored with
    colormapped images. By default, all canvas objects start with a
    smoothing level of 0. The greater the smoothing level the more
    washed out the entity being drawn will appear. There is no
    upper limit to the smoothing level but it must be greater than
    or equal to zero.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.Drawing.Fill">
            <summary>    The base class which all Fill objects inherit. A Fill
    contains the color, texture or gradient of the entity being
    drawn.</summary>
            <remarks>The Atalasoft dotImage Fill object is equivalent to the GDI+
Brush.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Fill.Clone">
            <summary>Returns a copy of this Fill.</summary>
            <returns>A copy of this Fill.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Fill.GetBrushHandle">
            <summary>Returns a GDI handle to the brush (for internal use
only).</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.Fill.Color">
            <summary>Gets or sets the color of the fill.</summary>
            <remarks>Specify the alpha value to draw with transparency onto a
continuous tone image.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.Fill.PaletteIndex">
            <summary>Gets or sets the palette index used for the color.</summary>
            <remarks>This is only valid when drawing onto an 8-bit image.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.Drawing.HatchedFill">
            <summary>A Fill containing hatched lines.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.HatchedFill._ctor">
            <summary>Initializes a new instance of HatchedFill.Creates a
HatchedFill object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.HatchedFill._ctor(Atalasoft.Imaging.Drawing.Hatch)">
            <summary>Initializes a new instance of HatchedFill with a black hatch
and specified hatch style.</summary>
            <param name="style">The type of hatch.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.HatchedFill._ctor(Atalasoft.Imaging.Drawing.Hatch,System.Drawing.Color)">
            <summary>Initializes a new instance of HatchedFill with a specified
hatch style and color.</summary>
            <param name="style">The type of hatch.</param>
            <param name="color">The hatch color.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.HatchedFill.Clone">
            <summary>Returns a copy of this HatchedFill.</summary>
            <returns>A copy of this HatchedFill.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.HatchedFill.GetBrushHandle">
            <summary>Returns a GDI brush handle.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Drawing.SolidFill">
            <summary>A Fill containing a solid color.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.SolidFill._ctor">
            <summary>Initializes a new instance of SolidFill. Creates a SolidFill
object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.SolidFill._ctor">
            <summary>Initializes a new instance of SolidFill with the color
black.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.SolidFill._ctor(System.Drawing.Color)">
            <summary>Initializes a new instance of SolidFill with a specified
color.</summary>
            <param name="color">The Fill color.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.SolidFill.Clone">
            <summary>Returns a copy of this SolidFill.</summary>
            <returns>A copy of this SoldFill.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.SolidFill.GetBrushHandle">
            <summary>Returns a GDI brush handle.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Drawing.TextFormat">
            <summary>    Contains extended properties for use with drawing text
    onto a Canvas.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.TextFormat._ctor">
            <summary>Initializes a new instance of TextFormat.Creates a TextFormat
object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.TextFormat._ctor">
            <summary>Initializes a new instance of TextFormat with default
settings.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.TextFormat._ctor(Atalasoft.Imaging.Drawing.TextAlignment)">
            <summary>Initializes a new instance of TextFormat specifying the
horizontal alignment.</summary>
            <param name="alignment">The horizontal alignment of the drawn text.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.TextFormat._ctor(Atalasoft.Imaging.Drawing.TextAlignment,System.Double)">
            <summary>Initializes a new instance of TextFormat specifying the
horizontal alignment and angle.</summary>
            <param name="alignment">The horizontal alignment of the drawn text.</param>
            <param name="angle">The angle in degrees of the drawn text.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.TextFormat._ctor(Atalasoft.Imaging.Drawing.TextAlignment,System.Double,System.Int32)">
            <summary>Initializes a new instance of TextFormat specifying the
horizontal alignment, angle, and inter-character spacing.</summary>
            <param name="alignment">The horizontal alignment of the drawn text.</param>
            <param name="angle">The angle in degrees of the drawn text.</param>
            <param name="interCharacterSpace">Number of additional pixels to add between characters.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.TextFormat.Alignment">
            <summary>Gets or sets the horizontal alignment of the text to
draw.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.TextFormat.Angle">
            <summary>Gets or sets the angle in degrees of the text to draw.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.TextFormat.InterCharacterSpace">
            <summary>Gets or sets the number of additional pixels to add between
characters.</summary>
            <remarks>This value may be negative to reduce the intercharacter
spacing.</remarks>
        </member>
        <member name="N:Atalasoft.Imaging.ImageProcessing">
            <summary>Contains classes and namespaces that manipulate the image
pixels via filters, transforms, and other effects.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.AlphaMergeType">
            <summary>When images are combined, the alpha channels may be merged in
one of many ways as listed in this enumeration.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.AlphaMergeType.Replace">
            <summary>Replace the bottom alpha value with the top.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.AlphaMergeType.UseMostOpaque">
            <summary>Use the higher of the bottom and top values.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.AlphaMergeType.UseMostTransparent">
            <summary>Use the lower of the bottom and top values.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.AlphaMergeType.Add">
            <summary>Add the bottom and top values. The maximum value is
255.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.AlphaMergeType.Subtract">
            <summary>Subtract the top value from the bottom. The minimum value is
0.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.AlphaMergeType.LogicalAnd">
            <summary>Perform a bitwise logical AND on the bottom and top
values.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.AlphaMergeType.LogicalOR">
            <summary>Perform a bitwise logical OR on the bottom and top
values.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.AlphaMergeType.LogicalXOR">
            <summary>Perform a bitwise logical XOR on the bottom and top
values.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.AlphaMergeType.UseOriginal">
            <summary>Ignore the top value.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.ChannelFlags">
            <summary>Bit flags used by some methods to specify which channels to
work with.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ChannelFlags.Channel1">
            <summary>The first channel in the image. For a RGB or RGBA image this
is the Blue color channel.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ChannelFlags.Channel2">
            <summary>The second channel in the image. For a RGB or RGBA image this
is the Green color channel.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ChannelFlags.Channel3">
            <summary>The third channel in the image. For a RGB or RGBA image this
is the Red color channel.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ChannelFlags.Channel4">
            <summary>The fourth channel in the image. For a RGBA image this is the
Alpha channel.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ChannelFlags.AllChannels">
            <summary>Specifies all channels in the image (Channel1 | Channel2 |
Channel3 | Channel4).</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.ColorMatchMode">
            <summary>Specifies the type of colormatching to use when using

FloodFillCommand.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ColorMatchMode.Edge">
            <summary>Indicates that the colormatching will occur up to a border of
the specified color.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ColorMatchMode.Surface">
            <summary>Indicates that the colormatching will occur with all
contingous pixels from the starting point.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.DitheringMode">
            <summary>Specifies the dithering algorithm to use when converting an
image to colormapped.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.DitheringMode.None">
            <summary>Specifies a best fit method with no dithering.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.DitheringMode.TwoValue">
            <summary>Specifies a simple 2-value style of dithering.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.DitheringMode.FloydSteinberg">
            <summary>    Specifies Floyd-Steinberg dithering. This method of
    dithering uses error diffusion and produces the best dithered
    image.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode">
            <summary>Specifies the interpolation to use with various image
processing commands.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.InterpolationMode.None">
            <summary>No interpolation.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.InterpolationMode.BiLinear">
            <summary>Uses standard bi-linear interpolation.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.InterpolationMode.BiCubic">
            <summary>Slowest, but most accurate interpolation.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.JpegTransformFlags">
            <remarks>Lossless Transform options</remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.JpegTransformFlags.Grayscale">
            <summary>Discard the chrominance channels in standard (YCbCr encoded)
JPEGs. This leaves just the luminance which gives you a grayscale
JPEG.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.JpegTransformFlags.NoExcessMcuBlocks">
            <summary>Do not remove excess MCU blocks.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.JpegTransformFlags.Progressive">
            <summary>Set or remove the progressive display option.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.JpegTransformType">
            <remarks>The specific type of JPEG transform.</remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.JpegTransformType.None">
            <summary>No Transform.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.JpegTransformType.FlipHorizontal">
            <summary>Flip the image horizontally.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.JpegTransformType.FlipVertical">
            <summary>Flip the image vertically.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.JpegTransformType.Transverse">
            <summary>Transpose across upper-right to lower-left axis.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.JpegTransformType.Transpose">
            <summary>Transpose across upper-leftto lower-right axis.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.JpegTransformType.Rotate90">
            <summary>Rotate the image 90 degrees.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.JpegTransformType.Rotate180">
            <summary>Rotate the image 180 degrees.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.JpegTransformType.Rotate270">
            <summary>Rotate the image 270 degrees.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.MergeOption">
            <summary>Image overlay merge options.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.FastBlend">
            <summary>Fast Blend. Uses factor parameter as opacity. (0 to 1)</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.AccurateBlend">
            <summary>Slower, more accurate blend. Uses factor parameter as
opacity. (0 to 1)</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.LogicalAnd">
            <summary>Pixels are combined with logical AND. Supports binary
images.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.LogicalOR">
            <summary>Pixels are combined with logical OR. Supports binary
images.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.LogicalXOR">
            <summary>Pixels are combined with logical XOR. Supports binary
images.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.Max">
            <summary>Output pixels is max of top and bottom.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.Min">
            <summary>Output pixel is min of top and bottom.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.Sum">
            <summary>Output pixel is sum of top and bottom.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.Difference">
            <summary>Output pixel is difference of top and bottom.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.GreaterThanFactor">
            <summary>If top pixel value &gt; factor, output top pixel value,
otherwise output factor.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.LessThanFactor">
            <summary>If top pixel value &lt; factor, output top pixel value,
otherwise output factor.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.AbsoluteValueOfDifference">
            <summary>Absolute value of the differnce of top and bottom
pixel.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.Multiply">
            <summary>Multiply bottom pixel value by top pixel value and divide by
255 (top * bottom) / 255.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.MultiplyWidthFactor">
            <summary>Multiply bottom pixel value by top pixel value and by a
factor and divide by 255 (top * bottom * factor) / 255.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.Screen">
            <summary>255-(((255-top)*(255-bottom)) / 255).</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.PlusFactor">
            <summary>bottom = bottom + top - factor</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.MinusFactor">
            <summary>bottom = bottom - top - factor</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.NegativeAnd">
            <summary>    Performs a negative Logical AND.
    This can only be used with 1-bit images.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.NegativeOR">
            <summary>    Performs a negative Logical OR.
    This can only be used with 1-bit images.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.NegativeXOR">
            <summary>    Performs a negative Logical XOR.
    This can only be used with 1-bit images.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.NoiseGeneratorMode">
            <summary>Specifies the type of noise.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.NoiseGeneratorMode.Perlin">
            <summary>Generate an image filled with Perlin noise.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.NoiseGeneratorMode.Hugo">
            <summary>Generate an image filled with Hugo Elias's implementation of
Perlin noise.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.NoiseGeneratorMode.Gaussian">
            <summary>Specifies the type of noise.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.NoiseGeneratorMode.NegativeExponential">
            <summary>Generate an image using negative exponential noise.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.NoiseGeneratorMode.Rayleigh">
            <summary>Generate an image filled with rayleigh noise.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.NoiseGeneratorMode.Uniform">
            <summary>Generate an image filled with uniform noise.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.NoiseGeneratorMode.DimensionalSlice">
            <summary>Create a single 2D plane of Perlin noise producing a single
slice through a volume of noise at a given Z offset.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.ResampleMethod">
            <summary>Specifies the type of resampling method to apply when using
the ResampleCommand, ResampleColormappedToRgbCommand or the
Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.Default">
            <summary>Uses a predefined resampling method depending on the image
PixelFormat and final size. Uses Nearest Neighbor resampling for
1-bit and 8-bit colormapped images, BiLinear when increasing the
size of continuous tone images. and AreaAverage when reducing
continuous tone images.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.NearestNeighbor">
            <summary>Use the nearest pixel value. This is the fastest
algorithm.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.BiLinear">
            <summary>Uses bi-linear resampling. Yields good results when enlarging
images, and fairly fast.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.BiCubic">
            <summary>Uses bi-cubic interpolation. Better quality then bi-linear
but slower.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.AreaAverage">
            <summary>Average the pixel values when reducing image size. Will cause
an exception to be thrown if increasing image size.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.BoxFilter">
            <summary>BoxFilter resize algorithm.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.TriangleFilter">
            <summary>TriangleFilter resize algorithm.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.HammingFilter">
            <summary>HammingFilter resize algorithm.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.GaussianFilter">
            <summary>GaussianFilter resize algorithm.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.BellFilter">
            <summary>BellFilter resize algorithm.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.BsplineFilter">
            <summary>BsplineFilter resize algorithm.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.Cubic1Filter">
            <summary>CubicFilter resize algorithm.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.Cubic2Filter">
            <summary>Cubic2Filter resize algorithm.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.LanczosFilter">
            <summary>    Generally yields the best results for photographic images
    at the expense of speed. Very similar to Photoshop's Bi-cubic
    reductions.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.MitchellFilter">
            <summary>MitchellFilter resize algorithm.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.SincFilter">
            <summary>SincFilter resize algorithm.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.HermiteFilter">
            <summary>HermiteFilter resize algorithm.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.HanningFilter">
            <summary>HanningFilter resize algorithm.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.CatromFilter">
            <summary>CatromFilter resize algorithm.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.ApplyPaletteCommand">
            <summary>Maps an image into a specified palette, creating an 8-bit
colormapped image.</summary>
            <remarks>This command uses various dithering algorithms to create a
colormapped image that can very closely represent a full color
image. A Palette containing up to 256 colors can be applied.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ApplyPaletteCommand._ctor">
            <summary>Initializes a new instance of ApplyPaletteCommand.Creates an
ApplyPaletteCommand object used to modify an AtalaImage
Palette.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ApplyPaletteCommand._ctor">
            <summary>Creates a new instance of ApplyPaletteCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ApplyPaletteCommand._ctor(Atalasoft.Imaging.Palette)">
            <summary>Initializes a new instance of
ApplyPaletteCommand specifying the
Palette.</summary>
            <param name="palette">The Palette to map the image to.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ApplyPaletteCommand._ctor(Atalasoft.Imaging.Palette,Atalasoft.Imaging.ImageProcessing.DitheringMode)">
            <summary>Initializes a new instance of
ApplyPaletteCommand specifying the
Palette and dithering mode.</summary>
            <param name="palette">The Palette to map the image to.</param>
            <param name="ditherMode">The dithering mode to use when mapping the image to a
palette.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ApplyPaletteCommand._ctor(Atalasoft.Imaging.Palette,Atalasoft.Imaging.ImageProcessing.DitheringMode,System.Int32)">
            <summary>Initializes a new instance of
ApplyPaletteCommand specifying the palette,
dithering mode, and dither error.</summary>
            <param name="palette">The palette to map the image to.</param>
            <param name="ditherMode">The dithering mode to use when mapping the image to a
palette.</param>
            <param name="ditherErrorMax">The amount of dithering. (0 - 127)</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ApplyPaletteCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies this ApplyPaletteCommand using the
current settings to the specified image.</summary>
            <returns>A new AtalaImage containing the processed
image. null (Nothing in Visual Basic) if
cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ApplyPaletteCommand.DitherErrorMax">
            <summary>Gets or sets the amount of dithering to apply.</summary>
            <remarks>    Valid values are between 0 and 127 with 0 being little to
    no dithering and 127 the full amount of possible dithering.
    Defaults to 127.
    For converting a color or grayscale image to 1-bit black
    and white without dithering, see the
    
    SimpleThresholdCommand,
    
    GlobalThresholdCommand, and
    
    AdaptiveThresholdCommand.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ApplyPaletteCommand.DitherMode">
            <summary>    Gets or sets the dithering mode to use when mapping the
    image to a palette.</summary>
            <remarks>Default value is DitheringMode.None.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ApplyPaletteCommand.Palette">
            <summary>    Gets or sets the Palette to map the
    image to.</summary>
            <remarks>The palette must be set before invoking ApplyToImage.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.AutoCropCommand">
            <summary>Automatically crops an image by removing borders around the
edge of an image with a solid color.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.AutoCropCommand._ctor">
            <summary>Creates an AutoCropCommand object used to
remove extra spacing around an image.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.AutoCropCommand._ctor">
            <summary>Initializes a new instance of
AutoCropCommand with 0 tolerance.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.AutoCropCommand._ctor(System.Double)">
            <summary>Initializes a new instance of
AutoCropCommand specifying a tolerance.</summary>
            <param name="tolerance">The tolerance used to locate the edges. (0 - 100)</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.AutoCropCommand._ctor(System.Double,System.Drawing.Color)">
            <summary>Initializes a new instance of
AutoCropCommand specifying a tolerance and
override color.</summary>
            <param name="tolerance">The tolerance used to locate the edges. (0 - 100)</param>
            <param name="overrideColor">    A specific color to represent the image
    'whitespace'.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.AutoCropCommand._ctor(System.Double,System.Drawing.Color,System.Boolean)">
            <summary>Initializes a new instance of
AutoCropCommand specifying a tolerance, override
color, and if uses median filter.</summary>
            <param name="tolerance">The tolerance used to locate the edges. (0 - 100)</param>
            <param name="overrideColor">    A specific color to represent the image
    'whitespace'.</param>
            <param name="useMedianFilter">If true, removed noise from the image prior to getting crop
dimensions.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.AutoCropCommand._ctor(System.Double,System.Int32)">
            <summary>Initializes a new instance of AutoCropCommand specifying a
tolerance and override index.</summary>
            <param name="tolerance">The tolerance used to locate the edges. (0 - 100)</param>
            <param name="overrideIndex">    A palette index value containing the color to represent
    image 'whitespace'.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.AutoCropCommand._ctor(System.Double,System.Int32,System.Boolean)">
            <summary>Initializes a new instance of
AutoCropCommand specifying a tolerance, override
index, and if uses median filter.</summary>
            <param name="tolerance">The tolerance used to locate the edges. (0 - 100)</param>
            <param name="overrideIndex">    A specific color to represent the image
    'whitespace'.</param>
            <param name="useMedianFilter">If true, removed noise from the image prior to getting crop
dimensions.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.AutoCropCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies this AutoCropCommand using the current settings to
the specified image.</summary>
            <returns>A new AtalaImage containing the processed
image. null (Nothing in Visual Basic) if
cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.AutoCropCommand.GetBorder(Atalasoft.Imaging.AtalaImage)">
            <summary>Returns a Rectangle of the border to remove.</summary>
            <param name="sourceImage">The AtalaImage that will be evaluated.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.AutoCropCommand.OverrideColor">
            <summary>Gets or sets a specific color to represent the image
'whitespace'.</summary>
            <remarks>Default value is Color.Empty.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.AutoCropCommand.OverrideIndex">
            <summary>Gets or sets a palette index value containing the color to
represent image 'whitespace'.</summary>
            <remarks>Default value is -1. A value greater than -1 will override
the OverrideColor property.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.AutoCropCommand.Tolerance">
            <summary>Gets or sets the percentage tolerance used to locate the
edges, from 0 to 100.</summary>
            <remarks>Default value is 0.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.AutoCropCommand.UseMedianFilter">
            <summary>Gets or sets a value indicating if the noise is removed prior
to getting the crop dimensions.</summary>
            <remarks>Default value is false.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.ChangePixelFormatCommand">
            <summary>Changes the image to a new
PixelFormat.</summary>
            <remarks>    This is equivalent to the
    
    GetChangedPixelFormat in the
    AtalaImage
    class, but in a Command form. Using this command will not raise
    the
    
    ChangePixelFormat event.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ChangePixelFormatCommand._ctor">
            <summary>Initializes a new instance of ChangePixelFormatCommand.
Creates a ChangePixelFormatCommand object used to change the
current pixel format of an image to a different format.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ChangePixelFormatCommand._ctor">
            <summary>Creates a new instance of ChangePixelFormatCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ChangePixelFormatCommand._ctor(Atalasoft.Imaging.PixelFormat)">
            <summary>Initializes a new instance of ChangePixelFormatCommand
specifying the new pixel format.</summary>
            <param name="newPixelFormat">The PixelFormat of the new image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ChangePixelFormatCommand._ctor(Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.ColorManagement.ColorProfile)">
            <summary>Initializes a new instance of ChangePixelFormatCommand
specifying the new pixel format and color profile.</summary>
            <param name="newPixelFormat">The PixelFormat of the new image.</param>
            <param name="destProfile">This is the destination colorprofile to use when changing
colorspaces.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ChangePixelFormatCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies the ChangePixelFormatCommand using the current
settings to the source image.</summary>
            <returns>A new AtalaImage containing the processed
image. null (Nothing in Visual Basic) if
cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ChangePixelFormatCommand.DestProfile">
            <summary>Gets or sets the color profile to use when converting the
image to a new colorspace.</summary>
            <remarks>This profile will be used as the destination device. By
default the screen profile will be used. If specifying a CMYK
image, a CMYK profile should be set.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ChangePixelFormatCommand.NewPixelFormat">
            <summary>Gets or sets the
PixelFormat
of the new image.</summary>
            <remarks>If the source and destination pixel formats are equal,
ApplyToImage will return null.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.ColormatchedMask">
            <summary>This class is used to get a mask image matching a specified
color or contiguous pixels at a specified point.</summary>
            <remarks>This class can be used for a "magic wand" tool.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ColormatchedMask._ctor">
            <summary>Initializes a new instance of ColormatchedMask.Creates a
ColormatchedMask object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ColormatchedMask._ctor(Atalasoft.Imaging.AtalaImage)">
            <summary>Initializes a new instance of ColormatchedMask specifying the
AtalaImage to evaluate.</summary>
            <param name="image">The AtalaImage to return apply the colormatching to.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ColormatchedMask._ctor(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Initializes a new instance of ColormatchedMask specifying the
AtalaImage to evaluate and a progress callback.</summary>
            <param name="image">The AtalaImage to return apply the colormatching to.</param>
            <param name="progress">The progress callback.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ColormatchedMask.GetEdgeColorMatchedMask(System.Drawing.Point,System.Drawing.Color,System.Double)">
            <summary>Mask area is bounded by pixels matching the edgeColor
parameter.</summary>
            <param name="center">The point to begin the colormatch.</param>
            <param name="edgeColor">The color of the edge to find.</param>
            <param name="tolerance">The tolerance (0 - 100)</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ColormatchedMask.GetSurfaceColorMatchedMask(System.Drawing.Point,System.Double)">
            <summary>All contiguous pixels matching the pixel at the center point
are returned as on in resulting mask.</summary>
            <param name="center">The point to begin the colormatch.</param>
            <param name="tolerance">The tolerance (0 - 100)</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ColormatchedMask.Image">
            <summary>Gets or sets the AtalaImage to apply the colormatching
to.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ColormatchedMask.Progress">
            <summary>Gets or sets the progress callback.</summary>
            <remarks>Defaults value is null.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.CropCommand">
            <summary>Creates a new image from a rectangular section in the source
image.</summary>
            <remarks>This command is equivalent to overlaying the original image
onto a new image at the size and position of the crop
rectangle.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.CropCommand._ctor">
            <summary>Initializes a new instance of CropCommand specifying the crop
rectangle.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.CropCommand._ctor">
            <summary>Creates a new instance of CropCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.CropCommand._ctor(System.Drawing.Rectangle)">
            <summary>Creates a new instance of CropCommand specifying the crop
rectangle.</summary>
            <param name="cropRect">The rectangular portion of the source image to copy into a
new image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.CropCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies the CropCommand using the current settings to the
source image.</summary>
            <returns>A new AtalaImage containing the processed
image. null (Nothing in Visual Basic) if
cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.CropCommand.CropRect">
            <summary>    Gets or sets the rectangular portion of the source image
    to copy into a new image.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Histogram">
            <summary>    This command is used to represent the number of unique
    color channel values or brightness values be returning an array
    containing the number of pixels at the value signified by the
    array index.</summary>
            <remarks>For 8-bit per component images, the array contains 256
values. 16-bit per component images returns an array of 65536
values.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Histogram._ctor">
            <summary>Initializes a new instance of the Histogram object.Creates a
Histogram object used to get brightness and channel histogram
information from an AtalaImage.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Histogram._ctor(Atalasoft.Imaging.AtalaImage)">
            <summary>Initializes a new instance of the Histogram object.</summary>
            <param name="image">The image to evaluate.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Histogram._ctor(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Initializes a new instance of the Histogram object.</summary>
            <param name="image">The image to evaluate.</param>
            <param name="progress">The progress callback.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Histogram._ctor(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
            <summary>Creates a new instance of Histogram specifying the image to
examine and a specific rectangular area of the image to work
with.</summary>
            <param name="image">The image to examine.</param>
            <param name="area">A rectangular area of the image to work with.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Histogram._ctor(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Creates an instance of Histogram specifying the image to
examine, a selection of the image to work with and the progress
event handler.</summary>
            <param name="image">The image to examine.</param>
            <param name="area">A rectangular area of the image to work with.</param>
            <param name="progress">The progress callback.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Histogram.GetBrightnessHistogram">
            <summary>Returns an array containing a histogram of brightness values
in the image.</summary>
            <returns>An array containing a histogram of brightness values in the
image.</returns>
            <remarks>Returns the gray channel with grayscale images.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Histogram.GetChannelHistogram(System.Int32)">
            <summary>Returns an array containing a histogram of color values from
a particular channel in the image.</summary>
            <returns>An array containing a histogram of color values from a
particular channel in the image.</returns>
            <param name="channelIndex">The zero based channel index to evaluate. (0 - 3)</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Histogram.GetDocumentHistogram">
            <summary>Returns a two element array containing the number of black
and white pixels in a binary image.</summary>
            <remarks>In a typical binary image, the first pixel value is white,
and second is black (known as MinIsWhite). Occassionally this is
swapped. Check the palette index color value to be certain.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Histogram.Area">
            <summary>Gets or sets a rectangular area of the image the histogram
methods will work with.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Histogram.Image">
            <summary>Gets or sets the image to evaluate.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Histogram.Progress">
            <summary>Gets or sets the progress delegate.</summary>
            <remarks>Can be null (Nothing in
Visual Basic).</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.ImageCommand">
            <summary>Represents the base class for all image processing routines
that modify image data.</summary>
            <remarks>    An ImageCommand can be used to apply any type of effect
    onto an existing image. The
    
    ApplyToImage method can be used to process the command. If
    the InPlaceProcessing value is true, then the
    source image will be processed and the ApplyToImage
    method will always return null, otherwise a new image will be
    returned.
    Classes that inherit ImageCommand can be
    used in the
    
    ApplyCommand method in the Workspace.
    See Extending ImageCommands for more information on
    creating custom commands.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies the command to the source AtalaImage.</summary>
            <returns>A new
AtalaImage
containing the processed image. For commandTypes that do not return
an image, set this to null.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed. For command types that do not require a
source image, set this to null.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ImageCommand.InPlaceProcessing">
            <summary>Gets a value indicating if the source image data is processed
in-place as opposed to returning a new image.</summary>
            <remarks>By default, this value is false. Implementing classes should
override this and set it to true when processing the source image
directly. When this value is true,

ApplyToImage returns null.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ImageCommand.Progress">
            <summary>Gets or sets the

ProgressEventHandler delegate which can be used to view or
cancel the progress of the current process.</summary>
            <remarks>A null value will ignore progress.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.ImageRegionCommand">
            <summary>Derives from ImageCommand and adds region of
interest capability to ImageCommands.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ImageRegionCommand.RegionOfInterest">
            <summary>    Gets or sets a RegionOfInterest which will only process
    the indicated region of the image.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.LosslessJpeg">
            <summary>This class performs lossless transformations on JPEG
images.</summary>
            <remarks>    JPEG images are compressed with lossy compression,
    meaning that each time the image is saved, quality is lost.
    Some operations, such as rotate, crop, and convert to grayscale
    can be performed without re-encoding the data.
    Do determine of the image can be operated on losslessly,
    check the
    
    CanDoLosslessTransform method. JPEG images are divided into
    rectangular sections called MCU blocks that are typically 8x8
    pixels. If the width and height are both divisible by 8, then
    it usually means that lossless operations can be performed
    without losing or cropping the edges. However some JPEG images
    have MCU blocks other than 8.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.CanDoLosslessTransform">
            <summary>Returns a value indicating the the MCU blocks are arranged
such that a lossless transformation can be performed without
cropping the image.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.CanDoLosslessTransform(System.IO.Stream,Atalasoft.Imaging.ImageProcessing.JpegTransformType)">
            <summary>Returns a value indicating the the MCU blocks are arranged
such that a lossless transformation can be performed without
cropping the image.</summary>
            <param name="source">The source image Stream.</param>
            <param name="transform">The transform to test.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.CanDoLosslessTransform(System.String,Atalasoft.Imaging.ImageProcessing.JpegTransformType)">
            <summary>Returns a value indicating the the MCU blocks are arranged
such that a lossless transformation can be performed without
cropping the image.</summary>
            <param name="source">The source image file.</param>
            <param name="transform">The transform to test.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.Crop">
            <summary>Performs a lossless crop on a JPEG image.</summary>
            <remarks>    Perform a lossless crop on the image in a JPG file,
    without decompressing the JPG data. By not decompressing, you
    don't have to re-compress, thus avoiding adding additional JPG
    artifacts to the output image.
    This works by rearranging the compressed data (DCT
    coefficients), without ever fully decoding the image.
    Therefore, its transformations are lossless: there is no image
    degradation at all, which is not the case if you were to read
    the image to RGB, transform, and save again as JPG.
    Note:JPG files are compressed in
    rectangular blocks. The dimensions of these blocks are always a
    multiple of 8 pixels: 8x8 and 16x16 are common.
    Because the compression blocks on the top and left edges
    cannot be split during a crop, the size of these blocks affects
    the crops that this function can perform. This inability to
    split blocks means that the top-left corner of the crop rect
    you specify will always be rounded down to the next lowest
    multiple of the MCU size (see GetMcuBlackSize). The bottom
    right corner you specify is unaffected.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.Crop(System.IO.Stream,System.IO.Stream,System.Drawing.Rectangle)">
            <summary>Performs a lossless crop on a JPEG image.</summary>
            <param name="source">The source image Stream.</param>
            <param name="dest">The destination image Stream.</param>
            <param name="cropRectangle">The crop rectangle.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.Crop(System.IO.Stream,System.IO.Stream,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.JpegTransformFlags)">
            <summary>Performs a lossless crop on a JPEG image.</summary>
            <param name="source">The source image Stream.</param>
            <param name="dest">The destination image Stream.</param>
            <param name="cropRectangle">The crop rectangle.</param>
            <param name="flags">The transform flags.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.Crop(System.String,System.String,System.Drawing.Rectangle)">
            <summary>Performs a lossless crop on a JPEG image.</summary>
            <param name="source">The source image file.</param>
            <param name="dest">The destination image filename.</param>
            <param name="cropRectangle">The crop rectangle.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.Crop(System.String,System.String,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.JpegTransformFlags)">
            <summary>Performs a lossless crop on a JPEG image.</summary>
            <param name="source">The source image file.</param>
            <param name="dest">The destination image filename.</param>
            <param name="cropRectangle">The crop rectangle.</param>
            <param name="flags">The transform flags.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.GetMcuBlockSize">
            <summary>Get the compression block size for a JPG file.</summary>
            <remarks>This can be used in conjunction with a lossless crop to
determine the range of crop rectangles that are possible.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.GetMcuBlockSize(System.IO.Stream)">
            <summary>Get the compression block size for a JPG file.</summary>
            <remarks>This can be used in conjunction with a lossless crop to
determine the range of crop rectangles that are possible.</remarks>
            <param name="source">The source image Stream.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.GetMcuBlockSize(System.String)">
            <summary>Get the compression block size for a JPG file.</summary>
            <remarks>This can be used in conjunction with a lossless crop to
determine the range of crop rectangles that are possible.</remarks>
            <param name="source">The source image file.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.Transform">
            <summary>Perform a lossless transform on a JPEG image.</summary>
            <remarks>    This can be used to perform one of a set of simple
    transformations without decompressing the JPEG data. By not
    decompressing, you don't have to re-compress, thus avoiding
    adding additional JPG artifacts to the output image.
    This works by rearranging the compressed data (DCT
    coefficients), without ever fully decoding the image.
    Therefore, its transformations are lossless: there is no image
    degradation at all, which is not the case if you were to read
    the image to RGB, transform, and save again as JPG.
    The transpose transformation has no restrictions
    regarding image dimensions. The other transformations operate
    rather oddly if the image dimensions are not a multiple of the
    iMCU size (usually 8 or 16 pixels, though sometimes 32 or 48),
    because they can only transform complete blocks of DCT
    coefficient data in the desired way.
    The default behavior is to discard these "extra" blocks.
    This prevents ugly strips of unmodified data along one edge.
    So, strictly speaking, these transformations are not lossless
    for all images: they are lossless only for images with
    dimensions that are multiples of 8 or 16. You can override this
    discarding the extra blocks, though it is not
    recommended.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.Transform(System.IO.Stream,System.IO.Stream,Atalasoft.Imaging.ImageProcessing.JpegTransformType)">
            <summary>Perform a lossless transform on a JPEG image.</summary>
            <param name="source">The source image Stream.</param>
            <param name="dest">The destination image Stream.</param>
            <param name="type">The transform type to apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.Transform(System.IO.Stream,System.IO.Stream,Atalasoft.Imaging.ImageProcessing.JpegTransformType,Atalasoft.Imaging.ImageProcessing.JpegTransformFlags)">
            <summary>Perform a lossless transform on a JPEG image.</summary>
            <param name="source">The source image Stream.</param>
            <param name="dest">The destination image Stream.</param>
            <param name="type">The transform type to apply.</param>
            <param name="flags">The transform flags.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.Transform(System.String,System.String,Atalasoft.Imaging.ImageProcessing.JpegTransformType)">
            <summary>Perform a lossless transform on a JPEG image.</summary>
            <param name="source">The source image file.</param>
            <param name="dest">The destination image filename.</param>
            <param name="type">The transform type to apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.Transform(System.String,System.String,Atalasoft.Imaging.ImageProcessing.JpegTransformType,Atalasoft.Imaging.ImageProcessing.JpegTransformFlags)">
            <summary>Perform a lossless transform on a JPEG image.</summary>
            <param name="source">The source image file.</param>
            <param name="dest">The destination image filename.</param>
            <param name="type">The transform type to apply.</param>
            <param name="flags">The transform flags.</param>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.NoiseGenerator">
            <summary>Creates a new image containing noise.</summary>
            <remarks>This function has many uses. One is to generate Perlin or
Hugo noise, resize it large, and then use that as random clouds.
There are many different types of noise you can generate.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.NoiseGenerator._ctor">
            <summary>Initializes a new instance of NoiseGenerator.Creates a
NoiseGenerator object used for creating images of random noise
patterns.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.NoiseGenerator._ctor">
            <summary>Initializes a new instance of NoiseGenerator.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.NoiseGenerator._ctor(System.Drawing.Size)">
            <summary>Initializes a new instance of NoiseGenerator specifying the
resulting image size.</summary>
            <param name="imageSize">The size of the resulting image containing noise.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.NoiseGenerator._ctor(System.Drawing.Size,System.Double)">
            <summary>Initializes a new instance of NoiseGenerator specifying the
resulting image size and scale.</summary>
            <param name="imageSize">The size of the resulting image containing noise.</param>
            <param name="scale">The size of the noise.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.NoiseGenerator._ctor(System.Drawing.Size,System.Double,Atalasoft.Imaging.ImageProcessing.NoiseGeneratorMode)">
            <summary>Initializes a new instance of NoiseGenerator specifying the
resulting image size, scale and mode.</summary>
            <param name="imageSize">The size of the resulting image containing noise.</param>
            <param name="scale">The size of the noise.</param>
            <param name="mode">The type of noise to create.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.NoiseGenerator._ctor(System.Drawing.Size,System.Double,Atalasoft.Imaging.ImageProcessing.NoiseGeneratorMode,System.Drawing.Color)">
            <summary>Initializes a new instance of NoiseGenerator specifying the
resulting image size, scale, mode and base color.</summary>
            <param name="imageSize">The size of the resulting image containing noise.</param>
            <param name="scale">The size of the noise.</param>
            <param name="mode">The type of noise to create.</param>
            <param name="baseColor">The color of the image prior to adding noise.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.NoiseGenerator.GenerateImage">
            <summary>Create a new image containing noise.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.NoiseGenerator.GenerateImage">
            <summary>Create a new image containing noise.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.NoiseGenerator.GenerateImage(System.Double)">
            <summary>Create a new image containing noise specifying the z-offset
of dimensional slice noise.</summary>
            <param name="zOffset">The z-axis offset used for DimensionSlice noise.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.NoiseGenerator.GenerateImage(System.Int32,System.Double)">
            <summary>Create a new image containing noise specifying the octaves
and persistence.</summary>
            <param name="octaves">The number of waves contributing to the noise. Only used with
grayscale Hugo noise.</param>
            <param name="persistence">Controls the smoothness. Only used with grayscale Hugo noise.
(0 to 10)</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.NoiseGenerator.BaseColor">
            <summary>Gets or sets the color of the image prior to adding
noise.</summary>
            <remarks>Default value is Color.Empty, which will result in a
grayscale image. Ignored by DimensionalSlice noise, which is always
grayscale.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.NoiseGenerator.ImageSize">
            <summary>    Gets or sets the size of the resulting image containing
    noise.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.NoiseGenerator.Mode">
            <summary>Gets or sets the type of noise to create.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.NoiseGenerator.Scale">
            <summary>Gets or sets the size of the noise.</summary>
            <remarks>Default value is 50.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.OverlayCommand">
            <summary>Overlays a specified image on top of the source image.</summary>
            <remarks>    If the top image has an alpha channel, that alpha will be
    used to control the transparency of the overlay and will
    override the TransparentColor and Opacity values.
    When overlaying one image with alpha, on top of another
    image with alpha, the alpha channels will be merged to take the
    maximum pixel value of each alpha channel. See
    
    OverlayMergedCommand for more specific options.
    The top image will always be converted to the pixel
    format of the bottom image, unless the top image has an alpha
    channel, which it will then use for alpha blending.
    This command supports all pixel formats with the
    exception of 4-bit Indexed.
    This command processes the source image in-place, and
    ApplyToImage always returns null.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayCommand._ctor">
            <summary>Initializes a new instance of OverlayCommand. Create an
OverlayCommand used to overlay one image onto another.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayCommand._ctor">
            <summary>Creates a new instance of OverlayCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayCommand._ctor(Atalasoft.Imaging.AtalaImage,System.Drawing.Point)">
            <summary>Initializes a new instance of OverlayCommand specifying the
top image and position.</summary>
            <param name="topImage">The image that will be overlayed onto the source
image.</param>
            <param name="position">Gets or sets the position of the top image onto the source
image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayCommand._ctor(Atalasoft.Imaging.AtalaImage,System.Drawing.Point,System.Drawing.Color)">
            <summary>Initializes a new instance of OverlayCommand specifying the
top image, position and a transparent color.</summary>
            <param name="topImage">The image that will be overlayed onto the source
image.</param>
            <param name="position">Gets or sets the position of the top image onto the source
image.</param>
            <param name="transparentColor">The color that will be used as a transparent mask for the top
image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayCommand._ctor(Atalasoft.Imaging.AtalaImage,System.Drawing.Point,System.Double)">
            <summary>Initializes a new instance of OverlayCommand specifying the
top image, position and an opacity of the top image.</summary>
            <param name="topImage">The image that will be overlayed onto the source
image.</param>
            <param name="position">Gets or sets the position of the top image onto the source
image.</param>
            <param name="opacity">The opacity of the top image. (0 - 1)</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayCommand._ctor(Atalasoft.Imaging.AtalaImage,System.Drawing.Point,System.Int32)">
            <summary>Initializes a new instance of OverlayCommand specifying the
top image, position and a transparent color index.</summary>
            <param name="topImage">The image that will be overlayed onto the source
image.</param>
            <param name="position">Gets or sets the position of the top image onto the source
image.</param>
            <param name="transparentIndex">The palette index that will be used as a transparent mask for
the top image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies this OverlayCommand using the current settings to the
specified image.</summary>
            <remarks>This method uses in place processing. That is, it
modifies the source image passed to it, rather than creating a new
image to hold the result. Therefore, the return result is always
null (Nothing in Visual
Basic).</remarks>
            <returns>null (Nothing in Visual
Basic)</returns>
            <param name="bottomImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayCommand.InPlaceProcessing">
            <summary>Gets a value indicating whether the command returns a new
image or modified the source image passed into the command.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayCommand.Opacity">
            <summary>Gets or sets the opacity of the top image.</summary>
            <remarks>    Valid values are 0.0 for fully transparent through 1.0
    for fully opaque.
    If the image has an alpha channel, the alpha channel will
    be used for the opacity of each pixel in the top image.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayCommand.Position">
            <summary>Gets or sets the position of the top image with respect to
the source image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayCommand.TopImage">
            <summary>Gets or sets the image that will be overlayed onto the source
image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayCommand.TransparentColor">
            <summary>Gets or sets the color that will be used as a transparent
mask for the top image.</summary>
            <remarks>By default, this color is set to Color.Transparent
and ignored. If the top image has an alpha channel, this value is
ignored.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayCommand.TransparentIndex">
            <summary>Gets or sets the palette index that will be used as a
transparent mask for the top image.</summary>
            <remarks>By default, this color is set to -1 and ignored. It is also
ignored if the top image has an alpha channel.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.OverlayMaskedCommand">
            <summary>Overlay a specified image onto the source image using an
8-bit grayscale mask image to control the transparency of the
overlay.</summary>
            <remarks>    If the top image already contains an alpha channel, use
    
    OverlayCommand, which will alpha blend the images
    automatically.
    The bottom image must be a continuous format, such as
    8-bit grayscale or 24-bit RGB. See
    
    OverlayMaskedDocumentCommand for masking 1-bit binary
    images.
    This command processes the source image in-place, and
    ApplyToImage always returns null.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayMaskedCommand._ctor">
            <summary>Initializes a new instance of OverlayMaskedCommand.Create an
OverlayMaskedCommand object that will use a mask image to filter
the image overlay.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayMaskedCommand._ctor">
            <summary>Creates a new instance of OverlayCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayMaskedCommand._ctor(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage)">
            <summary>Initializes a new instance of OverlayMaskedCommand specifying
the top image and alpha mask.</summary>
            <param name="topImage">The image that will be overlayed onto the source
image.</param>
            <param name="alphaMask">The 8-bit grayscale image representing the transparency of
the overlay.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayMaskedCommand._ctor(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Point)">
            <summary>Initializes a new instance of OverlayMaskedCommand specifying
the top image and alpha mask and position of the top image.</summary>
            <param name="topImage">The image that will be overlayed onto the source
image.</param>
            <param name="alphaMask">The 8-bit grayscale image representing the transparency of
the overlay.</param>
            <param name="position">The position of the top image onto the source image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayMaskedCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies this OverlayMaskedCommand using the current settings
to the specified image.</summary>
            <remarks>This method uses in place processing. That is, it
modifies the source image passed to it, rather than creating a new
image to hold the result. Therefore, the return result is always
null (Nothing in Visual
Basic).</remarks>
            <returns>null (Nothing in Visual
Basic)</returns>
            <param name="bottomImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayMaskedCommand.AlphaMask">
            <summary>Gets or sets the 8-bit grayscale image representing the
transparency mask of the overlay.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayMaskedCommand.InPlaceProcessing">
            <summary>Gets a value indicating whether the command returns a new
image or modified the source image passed into the command.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayMaskedCommand.Position">
            <summary>Gets or sets the position of the top image onto the source
image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayMaskedCommand.TopImage">
            <summary>Gets or sets the image that will be overlayed onto the source
image.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand">
            <summary>    Merge two images of the same PixelFormat together
    specifying various merge types.</summary>
            <remarks>    This functionality is especially useful when combining
    alpha channels with options other than the default "maximum"
    used in the
    
    OverlayCommand when overlaying two RGBA images.
    This command processes the source image in-place, and
    ApplyToImage always returns null.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand._ctor">
            <summary>Initializes a new instance of OverlayMergedCommand. Create an
OverlayMergedCommand that will overlay one image onto another using
a merging algorithm to determine the output pixel.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand._ctor">
            <summary>Creates a new instance of OverlayMergedCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand._ctor(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ImageProcessing.MergeOption)">
            <summary>Initializes a new instance of OverlayMergedCommand specifying
the top image, and the merge option.</summary>
            <param name="topImage">The image that will be overlayed onto the source
image.</param>
            <param name="mergeOption">Specifies how the top and bottom pixels wil be merged
together.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand._ctor(Atalasoft.Imaging.AtalaImage,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.MergeOption)">
            <summary>Initializes a new instance of OverlayMergedCommand specifying
the top image, position of the image, and the merge option.</summary>
            <param name="topImage">The image that will be overlayed onto the source
image.</param>
            <param name="position">The position of the top image onto the source image.</param>
            <param name="mergeOption">Specifies how the top and bottom pixels wil be merged
together.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand._ctor(Atalasoft.Imaging.AtalaImage,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.MergeOption,System.Double)">
            <summary>Initializes a new instance of OverlayMergedCommand specifying
the top image, position of the image, the merge option, and a
factor used for some merge options.</summary>
            <param name="topImage">The image that will be overlayed onto the source
image.</param>
            <param name="position">The position of the top image onto the source image.</param>
            <param name="mergeOption">Specifies how the top and bottom pixels wil be merged
together.</param>
            <param name="factor">A factor applied to some of the merge options. For example
when using the Fast merge option, this value would be opacity (0 to
1).</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies this OverlayMergedCommand using the current settings
to the specified image.</summary>
            <returns>null (Nothing in Visual
Basic)</returns>
            <remarks>This method uses in place processing. That is, it
modifies the source image passed to it, rather than creating a new
image to hold the result. Therefore, the return result is always
null (Nothing in Visual
Basic).</remarks>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand.Factor">
            <summary>Gets or sets a factor applied to some of the merge
options.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand.InPlaceProcessing">
            <summary>Gets a value indicating whether the command returns a new
image or modified the source image passed into the command.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand.MergeOption">
            <summary>Gets or sets a value indicating how the top and bottom pixels
wil be merged together.</summary>
            <remarks>For 1-bit images, this option can only be LogicalAnd,
LogicalOR, LogicalXOR, NegativeAnd, NegativeOR or NegativeXOR.
NegativeAnd, NegativeOR, and NegativeXOR can only be used with
1-bit images.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand.Position">
            <summary>Gets or sets the position of the top image onto the source
image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand.TopImage">
            <summary>Gets or sets the image that will be overlayed onto the source
image.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.RegionOfInterest">
            <summary>This object can be passed into most
ImageCommands to indicate a region of the image to
process. Any shaped region can be used by specifying a
System.Drawing.Region object or a simple
System.Drawing.Rectangle.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.RegionOfInterest._ctor">
            <summary>Initializes a new instance of RegionOfInterest. Create a
RegionOfInterest used by several ImageCommands to specify the area
of an image to process.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.RegionOfInterest._ctor(System.Drawing.Rectangle)">
            <summary>Initializes a new instance of RegionOfInterest specifying a
simple rectangle to use as the region.</summary>
            <param name="rect">The rectangular area of the image to process.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.RegionOfInterest._ctor(System.Drawing.Region)">
            <summary>Initializes a new instance of RegionOfInterest specifying a
.NET Region object to use as the region.</summary>
            <param name="region">The Region used to specify the portion of an image to
process.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.RegionOfInterest.IsSimpleRegion">
            <summary>    Returns true if the Region is a simple
    rectangle.</summary>
            <returns>true if the Region is a simple
rectangle.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.RegionOfInterest.Region">
            <summary>Gets or sets the System.Drawing.Region used
to specify the portion of an image to process.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.RegionOfInterest.SmoothingLevel">
            <summary>Gets or sets the smoothing level of the region.</summary>
            <remarks>By default this is 0. Can be any value greater than 0, and is
the standard deviation of the gaussian kernel.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand">
            <summary>Resamples the source 8-bit colormapped image to a 24-bit RGB
to a specified size.</summary>
            <remarks>This command is used when viewing a colormapped image in the
controls when Antialiasing. It will smooth the lines and create
better displays of colormapped images by efficiently converting the
image from 8-bit colormapped to 24-bit RGB while it's
resampling.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand._ctor">
            <summary>Initializes a new instance of ResampleColormappedToRgbCommand
specifying the source rectangle, destination size, and resampling
method. Create a ResampleColormappedToRgbCommand that will resize
an indexed image directly to a 24-bit image.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand._ctor">
            <summary>Creates a new instance of
ResampleColormappedToRgbCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand._ctor(System.Int32)">
            <summary>Initializes a new instance of ResampleColormappedToRgbCommand
specifying the maximum width or height using the defailt resampling
method.</summary>
            <param name="maxSize">The maximum width or height of the final image while
maintaining the aspect ratio.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand._ctor(System.Int32,Atalasoft.Imaging.ImageProcessing.ResampleMethod)">
            <summary>Initializes a new instance of ResampleColormappedToRgbCommand
specifying final size and resampling method.</summary>
            <param name="maxSize">The maximum width or height of the final image while
maintaining the aspect ratio.</param>
            <param name="method">The resampling algorithm to apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand._ctor(System.Drawing.Rectangle,System.Drawing.Size,Atalasoft.Imaging.ImageProcessing.ResampleMethod)">
            <summary>Initializes a new instance of ResampleColormappedToRgbCommand
specifying the source rectangle, destination size, and resampling
method.</summary>
            <param name="sourceRect">The rectangular region of the source image that will be
resized.</param>
            <param name="destSize">The final size of the image.</param>
            <param name="method">The resampling algorithm to apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand._ctor(System.Drawing.Size)">
            <summary>Initializes a new instance of ResampleColormappedToRgbCommand
specifying final size and using the the default resampling
method.</summary>
            <param name="destSize">The final size of the image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand._ctor(System.Drawing.Size,Atalasoft.Imaging.ImageProcessing.ResampleMethod)">
            <summary>Initializes a new instance of ResampleColormappedToRgbCommand
specifying final size and resampling method.</summary>
            <param name="destSize">The final size of the image.</param>
            <param name="method">The resampling algorithm to apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies the this ResampleColormappedToRgbCommand using the
current settings to the source image.</summary>
            <returns>A new AtalaImage containing the processed
image. null (Nothing in Visual Basic) if
cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.DestSize">
            <summary>Gets or sets the final width and height of the image.</summary>
            <remarks>Ignored when the

MaxSize property is set to a value greater than 0.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.MaxSize">
            <summary>Gets or sets the maximum width or height value for resizing
while maintaining the aspect ratio.</summary>
            <remarks>When this value is 0 (the default), it is ignored and

DestSize is used instead. Use this value to automatically
calculate the new width and height, keeping the same aspect ratio
as the original image.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.Method">
            <summary>Gets or sets the resampling algorithm to apply.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.SourceRect">
            <summary>Gets or sets the rectangular region of the source image that
will be resized.</summary>
            <remarks>The default value is Rectangle.Empty, in which case
the entire image is resized.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.ResampleCommand">
            <summary>Resamples the source image to the specified
dimensions.</summary>
            <remarks>This object is capable of resampling continuous and 8-bit
colormapped images. For resizing 1-bit document images see
Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleCommand._ctor">
            <summary>Initializes a new instance of ResampleCommand.Create a
ResampleCommand used to resize AtalaImage objects.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleCommand._ctor">
            <summary>Creates a new instance of ResampleCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleCommand._ctor(System.Int32)">
            <summary>Initializes a new instance of ResampleCommand specifying the
maximum width or height using the defailt resampling method.</summary>
            <param name="maxSize">The maximum width or height of the final image while
maintaining the aspect ratio.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleCommand._ctor(System.Int32,Atalasoft.Imaging.ImageProcessing.ResampleMethod)">
            <summary>Initializes a new instance of ResampleCommand specifying
final size and resampling method.</summary>
            <param name="maxSize">The maximum width or height of the final image while
maintaining the aspect ratio.</param>
            <param name="method">The resampling algorithm to apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleCommand._ctor(System.Drawing.Rectangle,System.Drawing.Size,Atalasoft.Imaging.ImageProcessing.ResampleMethod)">
            <summary>Initializes a new instance of ResampleCommand specifying the
source rectangle, destination size, and resampling method.</summary>
            <param name="sourceRect">The rectangular region of the source image that will be
resized.</param>
            <param name="destSize">The final size of the image.</param>
            <param name="method">The resampling algorithm to apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleCommand._ctor(System.Drawing.Size)">
            <summary>Initializes a new instance of ResampleCommand specifying
final size and using the the default resampling method.</summary>
            <param name="destSize">The final size of the image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleCommand._ctor(System.Drawing.Size,Atalasoft.Imaging.ImageProcessing.ResampleMethod)">
            <summary>Initializes a new instance of ResampleCommand specifying
final size and resampling method.</summary>
            <param name="destSize">The final size of the image.</param>
            <param name="method">The resampling algorithm to apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies this ResampleCommand using the current settings to
the specified image.</summary>
            <returns>A new AtalaImage containing the processed
image. null (Nothing in Visual Basic) if
cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ResampleCommand.DestSize">
            <summary>Gets or sets the final size of the image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ResampleCommand.MaxSize">
            <summary>Gets or sets the width of height value for resizing while
maintaining the aspect ratio.</summary>
            <remarks>When this value is 0, it is ignored.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ResampleCommand.Method">
            <summary>Gets or sets the the resampling algorithm to apply.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ResampleCommand.SourceRect">
            <summary>Gets or sets the rectangular region of the source image that
will be resized.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.ResampleMaskedCommand">
            <summary>Represents the base class for all image processing routines
that modify image data.</summary>
            <remarks>    An ImageCommand can be used to apply any type of effect
    onto an existing image. The
    
    ApplyToImage method can be used to process the command. If
    the InPlaceProcessing value is true, then the
    source image will be processed and the ApplyToImage
    method will always return null, otherwise a new image will be
    returned.
    Classes that inherit ImageCommand can be
    used in the
    
    ApplyCommand method in the Workspace.
    See Extending ImageCommands for more information on
    creating custom commands.</remarks>
        </member>
        <member name="N:Atalasoft.Imaging.ImageProcessing.Channels">
            <summary>Contains classes that directly manipulate image channels and
colors.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand">
            <summary>This method may be used to adjust a channel by adding or
subtracting a literal value or percentage. A negative value will
reduce the amount of that channel and a positive value will
increase it. A value of 0 will have no effect.</summary>
            <remarks>This method requires a continuous tone image.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand._ctor">
            <summary>Initializes a new instance of the

AdjustChannelCommand class, used to modify each channel value
of an image.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand._ctor">
            <summary>Creates a new instance of
AdjustChannelCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand._ctor(System.Boolean,System.Double)">
            <summary>Initializes a new instance of the
AdjustChannelCommand class.</summary>
            <param name="adjustByPercentage">Determines if the channel values are considered a percentage
rather than a literal value.</param>
            <param name="channel1">Amount to adjust the first channel. Valid values are 0 to 100
when using percentage and 0 to 255 when using literal.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand._ctor(System.Boolean,System.Double,System.Double)">
            <summary>Initializes a new instance of the
AdjustChannelCommand class.</summary>
            <param name="adjustByPercentage">Determines if the channel values are considered a percentage
rather than a literal value.</param>
            <param name="channel1">Amount to adjust the first channel. Valid values are 0 to 100
when using percentage and 0 to 255 when using literal.</param>
            <param name="channel2">Amount to adjust the second channel. Valid values are 0 to
100 when using percentage and 0 to 255 when using literal.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand._ctor(System.Boolean,System.Double,System.Double,System.Double)">
            <summary>Initializes a new instance of the
AdjustChannelCommand class.</summary>
            <param name="adjustByPercentage">Determines if the channel values are considered a percentage
rather than a literal value.</param>
            <param name="channel1">Amount to adjust the first channel. Valid values are 0 to 100
when using percentage and 0 to 255 when using literal.</param>
            <param name="channel2">Amount to adjust the second channel. Valid values are 0 to
100 when using percentage and 0 to 255 when using literal.</param>
            <param name="channel3">Amount to adjust the third channel. Valid values are 0 to 100
when using percentage and 0 to 255 when using literal.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand._ctor(System.Boolean,System.Double,System.Double,System.Double,System.Double)">
            <summary>Initializes a new instance of the
AdjustChannelCommand class.</summary>
            <param name="adjustByPercentage">Determines if the channel values are considered a percentage
rather than a literal value.</param>
            <param name="channel1">Amount to adjust the first channel. Valid values are 0 to 100
when using percentage and 0 to 255 when using literal.</param>
            <param name="channel2">Amount to adjust the second channel. Valid values are 0 to
100 when using percentage and 0 to 255 when using literal.</param>
            <param name="channel3">Amount to adjust the third channel. Valid values are 0 to 100
when using percentage and 0 to 255 when using literal.</param>
            <param name="channel4">Amount to adjust the fourth channel. Valid values are 0 to
100 when using percentage and 0 to 255 when using literal.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies AdjustLiteral using the current settings to the
source image.</summary>
            <returns>null (Nothing in Visual
Basic)</returns>
            <remarks>This method uses in place processing. That is, it
modifies the source image passed to it, rather than creating a new
image to hold the result. Therefore, the return result is always
null (Nothing in Visual
Basic).</remarks>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.AdjustByPercentage">
            <summary>Gets or sets the value which determines if the channel values
are considered a percentage rather than a literal value.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.Channel1">
            <summary>Gets or sets the amount to adjust the first channel.</summary>
            <remarks>When AdjustByPercentage is true, valid values are 0 - 100
otherwise 0 - 255.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.Channel2">
            <summary>Gets or sets the amount to adjust the second channel.</summary>
            <remarks>When AdjustByPercentage is true, valid values are 0 - 100
otherwise 0 - 255.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.Channel3">
            <summary>Gets or sets the amount to adjust the third channel.</summary>
            <remarks>When AdjustByPercentage is true, valid values are 0 - 100
otherwise 0 - 255.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.Channel4">
            <summary>Gets or sets the amount to adjust the fourth channel.</summary>
            <remarks>When AdjustByPercentage is true, valid values are 0 - 100
otherwise 0 - 255.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.InPlaceProcessing">
            <summary>    Gets a value indicating if the source image data is
    processed in-place as opposed to returning a new image.</summary>
            <remarks>By default, this value is false. Implementing classes should
override this and set it to true when processing the source image
directly. When this value is true,

ApplyToImage returns null.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand">
            <summary>    This method may be used to adjust the hue, staturation
    and luminance by adding or subtracting a literal value or
    percentage. A negative value will reduce the amount of that
    channel and a positive value will increase it. A value of 0
    will have no effect.</summary>
            <remarks>This method requires a continuous tone image.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand._ctor">
            <summary>Creates a new instance of
AdjustHslCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand._ctor(System.Boolean,System.Double,System.Double,System.Double)">
            <summary>Creates a new instance of AdjustHslCommand
specifying the Hue, Saturation and Luminance values.</summary>
            <param name="adjustByPercentage">Set to true if you want the hue, saturation and luminance
values to be considered percentages.</param>
            <param name="hue">Amount to adjust the Hue. Valid values are 0 to 100 when
using percentage and 0 to 255 when using literal.</param>
            <param name="saturation">Amount to adjust the Saturation. Valid values are 0 to 100
when using percentage and 0 to 255 when using literal.</param>
            <param name="luminance">Amount to adjust the Luminance. Valid values are 0 to 100
when using percentage and 0 to 255 when using literal.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies AdjustHslLiteral using the current
settings to the source image.</summary>
            <returns>null (Nothing in Visual
Basic)</returns>
            <remarks>This method uses in place processing. That is, it
modifies the source image passed to it, rather than creating a new
image to hold the result. Therefore, the return result is always
null (Nothing in Visual
Basic).</remarks>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.AdjustByPercentage">
            <summary>Gets or sets a value to indicate if the hue, saturation and
luminance values will be considered percentages instead of literal
values.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.Hue">
            <summary>Gets or sets the value of hue.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.InPlaceProcessing">
            <summary>    Gets a value indicating if the source image data is
    processed in-place as opposed to returning a new image.</summary>
            <remarks>By default, this value is false. Implementing classes should
override this and set it to true when processing the source image
directly. When this value is true,

ApplyToImage returns null.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.Luminance">
            <summary>Gets or sets the value of luminance.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.Saturation">
            <summary>Gets or sets the value of saturation.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand">
            <summary>Apply a Look-Up-Table to an image. A Look-Up-Table is an
array of 256 byte values which are used to substitute for the image
pixel data. This allows you to modify each pixel component
value.</summary>
            <remarks>This command will not work on 1-bit or 4-bit images.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand._ctor">
            <summary>Create an ApplyLutCommand used to modify the
Look-up-table of an image.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand._ctor">
            <summary>Creates a new instance of
ApplyLutCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand._ctor(System.Byte[])">
            <summary>Creates a new instance of ApplyLutCommand
specifying channel1.</summary>
            <param name="channel1">An array of 256 bytes, representing the first color channel.
This can be null (Nothing in
Visual Basic).</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand._ctor(System.Byte[],System.Byte[])">
            <summary>Creates a new instance of ApplyLutCommand
specifying channel1 and channel2.</summary>
            <param name="channel1">An array of 256 bytes, representing the first color channel.
This can be null (Nothing in
Visual Basic).</param>
            <param name="channel2">An array of 256 bytes, representing the second color channel.
This can be null (Nothing in
Visual Basic).</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand._ctor(System.Byte[],System.Byte[],System.Byte[])">
            <summary>Creates a new instance of ApplyLutCommand
specifying channel1, channel2 and channel3.</summary>
            <param name="channel1">An array of 256 bytes, representing the first color channel.
This can be null (Nothing in
Visual Basic).</param>
            <param name="channel2">An array of 256 bytes, representing the second color channel.
This can be null (Nothing in
Visual Basic).</param>
            <param name="channel3">An array of 256 bytes, representing the third color channel.
This can be null (Nothing in
Visual Basic).</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand._ctor(System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
            <summary>Creates a new instance of ApplyLutCommand
specifying channel1, channel2, channel3, and channel4.</summary>
            <param name="channel1">An array of 256 bytes, representing the first color channel.
This can be null (Nothing in
Visual Basic).</param>
            <param name="channel2">An array of 256 bytes, representing the second color channel.
This can be null (Nothing in
Visual Basic).</param>
            <param name="channel3">An array of 256 bytes, representing the third color channel.
This can be null (Nothing in
Visual Basic).</param>
            <param name="channel4">An array of 256 bytes, representing the fourth color channel.
This can be null (Nothing in
Visual Basic).</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies ApplyLookUpTable using the current
settings to the source image.</summary>
            <returns>null (Nothing in Visual
Basic)</returns>
            <remarks>This method uses in place processing. That is, it
modifies the source image passed to it, rather than creating a new
image to hold the result. Therefore, the return result is always
null (Nothing in Visual
Basic).</remarks>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.GetChannelLut(Atalasoft.Imaging.ImageProcessing.ChannelFlags)">
            <summary>Returns the look-up-table for a single channel.</summary>
            <param name="channel">The channel you want to retrieve the look-up-table
from.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.SetChannelLut">
            <summary>Sets the look-up-table for a single channel.</summary>
            <remarks>The byte array must have 256 elements.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.SetChannelLut(Atalasoft.Imaging.ImageProcessing.ChannelFlags,System.Byte[])">
            <param name="channel">The channel you want to set.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.SetChannelLut(Atalasoft.Imaging.ImageProcessing.ChannelFlags,System.Byte[])">
            <param name="lut">The look-up-table byte array.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.InPlaceProcessing">
            <summary>    Gets a value indicating if the source image data is
    processed in-place as opposed to returning a new image.</summary>
            <remarks>By default, this value is false. Implementing classes should
override this and set it to true when processing the source image
directly. When this value is true,

ApplyToImage returns null.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Channels.FlattenAlphaCommand">
            <summary>    This command will remove the alpha information from an
    image by blending the transparent areas with a solid
    color.</summary>
            <remarks>This command requires an image containing alpha
information.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.FlattenAlphaCommand._ctor">
            <summary>Creates a

FlattenAlphaCommand that can be used to remove alpha
information from an image.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.FlattenAlphaCommand._ctor">
            <summary>Creates a new instance of
FlattenAlphaCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.FlattenAlphaCommand._ctor(System.Drawing.Color)">
            <summary>Creates a new instance of
FlattenAlphaCommand specifying the color used to
replace the alpha.</summary>
            <param name="color">The background color to blend with.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.FlattenAlphaCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies FlattenAlphaCommand using the
current settings to the source image.</summary>
            <returns>A new AtalaImage containing the processed
image. null (Nothing in Visual Basic) if
cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.FlattenAlphaCommand.Color">
            <summary>Gets or sets the color to use for the transparent areas of
the image.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Channels.InvertCommand">
            <summary>Use this command to invert the image.</summary>
            <remarks>    Uses a highly optimized invert routine on RGB images when
    AllChannels are included. You may specify any or all channels
    to invert.
    Inverting an image creates a photo negative by
    subtracting 255 from each channel value.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.InvertCommand._ctor">
            <summary>Creates a new instance of the InvertCommand
class.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.InvertCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies an InvertCommand using the current
settings to the source image.</summary>
            <returns>null (Nothing in Visual
Basic)</returns>
            <remarks>This method uses in place processing. That is, it
modifies the source image passed to it, rather than creating a new
image to hold the result. Therefore, the return result is always
null (Nothing in Visual
Basic).</remarks>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.InvertCommand.ChannelsToProcess">
            <summary>Gets or sets a bit flag specifying which channels to
process.</summary>
            <remarks>Default value is ChannelFlags.AllChannels</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.InvertCommand.InPlaceProcessing">
            <summary>    Gets a value indicating if the source image data is
    processed in-place as opposed to returning a new image.</summary>
            <remarks>By default, this value is false. Implementing classes should
override this and set it to true when processing the source image
directly. When this value is true,

ApplyToImage returns null.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand">
            <summary>This command allows you to replace the channels of an
existing image by substituting the channel values with those of an
8-bit grayscale image.</summary>
            <remarks>This method requires a continuous tone image.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand._ctor">
            <summary>Creates a new instance of the
ReplaceChannelCommand object specifying a param
array of channels.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand._ctor">
            <summary>Creates a new instance of
ReplaceChannelCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand._ctor(Atalasoft.Imaging.AtalaImage[])">
            <summary>Creates a new instance of
ReplaceChannelCommand specifying the channel
images.</summary>
            <param name="channelImage">A parameter array of grayscale AtalaImage's
representing each channel in the image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies ReplaceChannelCommand using the
current settings to the source image.</summary>
            <returns>null (Nothing in Visual
Basic)</returns>
            <remarks>This method uses in place processing. That is, it
modifies the source image passed to it, rather than creating a new
image to hold the result. Therefore, the return result is always
null (Nothing in Visual
Basic).</remarks>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand.Channel1Image">
            <summary>Gets or sets a grayscale image to represent the first
channel. Set this to null if you want to skip this channel.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand.Channel2Image">
            <summary>Gets or sets an 8-bit image to represent the second channel.
Set this to null if you want to skip this channel.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand.Channel3Image">
            <summary>Gets or sets an 8-bit image to represent the third channel.
Set this to null if you want to skip this channel.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand.Channel4Image">
            <summary>Gets or sets an 8-bit image to represent the fourth channel.
Set this to null if you want to skip this channel.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand.InPlaceProcessing">
            <summary>    Gets a value indicating if the source image data is
    processed in-place as opposed to returning a new image.</summary>
            <remarks>By default, this value is false. Implementing classes should
override this and set it to true when processing the source image
directly. When this value is true,

ApplyToImage returns null.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand">
            <summary>    This command will create an alpha channel for an image
    based on a color value. If the image already contains alpha
    information, the color will be blended into it.</summary>
            <remarks>    This method will convert 1-bit, 4-bit and 8-bit grayscale
    images to 8-bit indexed. 24-bit images will be converted to
    32-bit.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand._ctor">
            <summary>Creates a new instance of the
SetAlphaColorCommand object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand._ctor">
            <summary>Creates a new instance of
SetAlphaColorCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand._ctor(System.Drawing.Color)">
            <summary>Creates a new instance of
SetAlphaColorCommand
specifying color.</summary>
            <param name="color">Color used to create the alpha channel.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand._ctor(System.Drawing.Color,System.Double)">
            <summary>Creates a new instance of
SetAlphaColorCommand
specifying color and tolerance.</summary>
            <param name="color">Color used to create the alpha channel.</param>
            <param name="tolerance">Tolerance percentage for finding matching colors. (0 -
1)</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand._ctor(System.Drawing.Color,System.Double,Atalasoft.Imaging.ImageProcessing.AlphaMergeType)">
            <summary>Creates a new instance of
SetAlphaColorCommand
specifying color, tolerance, and merge type.</summary>
            <param name="color">Color used to create the alpha channel.</param>
            <param name="tolerance">Tolerance percentage for finding matching colors. (0 -
1)</param>
            <param name="mergeType">The type of merge performed.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand._ctor(System.Drawing.Color,System.Double,Atalasoft.Imaging.ImageProcessing.AlphaMergeType,System.Int32,System.Int32)">
            <summary>Creates a new instance of
SetAlphaColorCommand
specifying color, tolerance, merge type, matching alpha, and
non-matching alpha.</summary>
            <param name="color">Color used to create the alpha channel.</param>
            <param name="tolerance">Tolerance percentage for finding matching colors. (0 -
1)</param>
            <param name="mergeType">The type of merge performed.</param>
            <param name="matchAlpha">The alpha value to use when a match of the color is found. (0
- 255)</param>
            <param name="nonMatchAlpha">The alpha value to use when a match of the color is not
found. (0 - 255)</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies SetAlphaColorCommand using the
current settings to the source image.</summary>
            <returns>A new AtalaImage containing the processed
image. null (Nothing in Visual Basic) if
cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.Color">
            <summary>Gets or sets the color used to create the alpha
channel.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.MatchAlpha">
            <summary>Gets or sets the alpha value to use when a match of the color
is found.</summary>
            <remarks>Valid values are from 0 to 255.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.MergeType">
            <summary>Gets or sets the type of merge performed.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.NonMatchAlpha">
            <summary>Gets or sets the alpha value to use when a match of the color
is not found.</summary>
            <remarks>Valid values are from 0 to 255.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.Tolerance">
            <summary>Gets or sets the tolerance percentage for finding matching
colors.</summary>
            <remarks>Valid values are from 0 to 1.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand">
            <summary>    Creates an alpha channel for an image using an 8-bit
    grayscale mask image to control transparency.</summary>
            <remarks>This command will result in a 16-bit grayscale-alpha or
32-bit RGBA image.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand._ctor">
            <summary>Creates a new instance of the
SetAlphaFromMaskCommand object, used to create an
image with alpha by setting the alpha values to the corresponding
pixel value in a mask image.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand._ctor">
            <summary>Creates a new instance of
SetAlphaFromMaskCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand._ctor(Atalasoft.Imaging.AtalaImage,System.Boolean,Atalasoft.Imaging.ImageProcessing.AlphaMergeType)">
            <summary>Creates a new instance of
SetAlphaFromMask
specifying maskImage, resizeMask and mergeType.</summary>
            <param name="maskImage">An 8-bit image used to generate the alpha channel.</param>
            <param name="resizeMask">Set to true if the mask should be resized to fit the
image.</param>
            <param name="mergeType">The type of merge performed.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand._ctor(Atalasoft.Imaging.AtalaImage,System.Boolean,Atalasoft.Imaging.ImageProcessing.AlphaMergeType,System.Drawing.Point)">
            <summary>Creates a new instance of
SetAlphaFromMask
specifying maskImage, resizeMask, mergeType and position.</summary>
            <param name="maskImage">An 8-bit image used to generate the alpha channel.</param>
            <param name="resizeMask">Set to true if the mask should be resized to fit the
image.</param>
            <param name="mergeType">The type of merge performed.</param>
            <param name="position">The x,y position to place the mask image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies SetAlphaFromMaskCommand using the
current settings to the source image.</summary>
            <returns>A new AtalaImage containing the processed
image. null (Nothing in Visual Basic) if
cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand.MaskImage">
            <summary>Gets or sets an 8-bit image used to generate the alpha
channel.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand.MergeType">
            <summary>Gets or sets the type of merge performed.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand.Position">
            <summary>Gets or sets the left, top position of the mask image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand.ResizeMask">
            <summary>Gets or sets a valid to indicate if the mask should be
resized to fit the image.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand">
            <summary>    This command will create an alpha channel based on a
    numeric value.</summary>
            <remarks>    This method will convert 1-bit, 4-bit and 8-bit grayscale
    images to 8-bit indexed. 24-bit images will be converted to
    32-bit.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand._ctor">
            <summary>Creates a new instance of

SetAlphaValueCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand._ctor">
            <summary>Creates a new instance of
SetAlphaValueCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand._ctor(System.Byte,Atalasoft.Imaging.ImageProcessing.AlphaMergeType)">
            <summary>Creates a new instance of
SetAlphaValueCommand specifying the alpha value
and merge type.</summary>
            <param name="alphaValue">A value of 0 to 255 indicating the opacity to use on the
alpha channel.</param>
            <param name="mergeType">The type of merge performed.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies SetAlphaValue using the current settings to the
source image.</summary>
            <returns>A new AtalaImage containing the processed
image. null (Nothing in Visual Basic) if
cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand.AlphaValue">
            <summary>Gets or sets a value of 0 to 255 indicating the opacity to
use on the alpha channel.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand.MergeType">
            <summary>Gets or sets the type of merge performed.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand">
            <summary>This command will shift individual image channels.</summary>
            <remarks>    This command requires an image with at least 2 channels.
    If the image does not contain at least 2 channels, the
    PixelFormat will be changed to a compatible format.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand._ctor">
            <summary>Creates a new instance of the

ShiftChannelsCommand class, used to offset individual channels
in an image.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand._ctor">
            <summary>Creates a new instance of
ShiftChannelsCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand._ctor(System.Int32,System.Int32,Atalasoft.Imaging.ImageProcessing.ChannelFlags)">
            <summary>Creates a new instance of
ShiftChannelsCommand specifying offsetX, offsetY,
channelsToProcess and backgroundValue.</summary>
            <param name="offsetX">Number of pixels to horizontally offset the channels.</param>
            <param name="offsetY">Number of pixels to vertically offset the channels.</param>
            <param name="channelsToProcess">The channels you want to shift.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand._ctor(System.Int32,System.Int32,Atalasoft.Imaging.ImageProcessing.ChannelFlags,System.Int32)">
            <summary>Creates a new instance of
ShiftChannelsCommand specifying offsetX, offsetY,
channelsToProcess and backgroundValue.</summary>
            <param name="offsetX">Number of pixels to horizontally offset the channels.</param>
            <param name="offsetY">Number of pixels to vertically offset the channels.</param>
            <param name="channelsToProcess">The channels you want to shift.</param>
            <param name="backgroundValue">A value used for uncovered areas of the image. (0 -
255)</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies ShiftChannelsCommand using the
current settings to the source image.</summary>
            <returns>A new AtalaImage containing the processed
image. null (Nothing in Visual Basic) if
cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand.BackgroundValue">
            <summary>Gets or set a channel value to use for uncovered channel
areas of the image.</summary>
            <remarks>This value should be between 0 and 255 inclusive.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand.ChannelsToProcess">
            <summary>Gets or sets the ChannelFlags specifying which channels to
process.</summary>
            <remarks>The default value is AllChannels.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand.OffsetX">
            <summary>Gets or sets the number of pixels to horizontally offset the
channels.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand.OffsetY">
            <summary>Gets or sets the number of pixels to vertically offset the
channels.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Channels.SwapChannelsCommand">
            <summary>Swaps one channel with another channel within the same
image.</summary>
            <remarks>This command requires an image with at least 2 channels.nbsp
If the image does not contain at least 2 channels, the PixelFormat
will be changed to a compatible format.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SwapChannelsCommand._ctor">
            <summary>Creates a new instance of the SwapChannelsCommand
object.
Creates a new instance of SwapChannel specifying
channel1, channel2 and channel3.
Creates a new instance of SwapChannel specifying
channel1, channel2, channel3, and channel4.
Creates a new instance of SwapChannel specifying a
param array of channels.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SwapChannelsCommand._ctor">
            <summary>Creates a new instance of SwapChannelsCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SwapChannelsCommand._ctor(System.Int32[])">
            <summary>Creates a new instance of SwapChannelsCommand specifying the
channels to swap.</summary>
            <param name="channel">A parameter array of the channel orders. Values must be
between 1 and 4.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SwapChannelsCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies SwapChannel using the current settings to the source
image.</summary>
            <returns>A new AtalaImage containing the processed
image. null (Nothing in Visual Basic) if
cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SwapChannelsCommand.Channel1">
            <summary>Gets or sets the first channel in the image. Valid values are
1-4.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SwapChannelsCommand.Channel2">
            <summary>Gets or sets the second channel in the image. Valid values
are 1-4.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SwapChannelsCommand.Channel3">
            <summary>Gets or sets the third channel in the image. Valid values are
1-4.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SwapChannelsCommand.Channel4">
            <summary>Gets or sets the fourth channel in the image. Valid values
are 1-4.</summary>
        </member>
        <member name="N:Atalasoft.Imaging.ImageProcessing.Document">
            <summary>Contains classes that are designed to be used with 1-bit
document (binary) images. These classes are enabled in the
professional edition.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCropMode">
            <summary>The crop mode to use in the

AutoDeskewCommand.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCropMode.None">
            <summary>    Do not crop the deskewed image. The resulting image will
    be larger then the source image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCropMode.FullCrop">
            <summary>Crop all of the excess rotated area. The resulting image will
be smaller then the source image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCropMode.OriginalSize">
            <summary>Crop the deskewed image to the original size.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalEdges">
            <summary>Specifies the edges to remove when using

BorderRemovalCommand.</summary>
            <remarks>Values can be or'ed together.</remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalEdges.Left">
            <summary>The left edge of the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalEdges.Right">
            <summary>The right edge of the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalEdges.Top">
            <summary>The top edge of the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalEdges.Bottom">
            <summary>The bottom edge of the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalEdges.Vertical">
            <summary>The left and right edges of the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalEdges.Horizontal">
            <summary>The top and bottom edges of the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalEdges.AllSides">
            <summary>The left, right, top, and bottom edges of the image.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentMode">
            <summary>The type of morphological filter to use in the

MorphoDocumentCommand.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentMode.Dilation">
            <summary>    Used to smooth small dark regions tending to enhance
    black features in the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentMode.Erosion">
            <summary>    Used to smooth small light regions tending to reduce
    black features in the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentMode.Open">
            <summary>The dilation of the erosion of the image used to reduce small
black regions within the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentMode.Close">
            <summary>The erosion of the dilation of the image used to reduce small
white regions within the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentMode.BoundaryExtraction">
            <summary>Perform a boundary detection/extraction on a binary image.
This will generate an outline of the foreground features of the
input image</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentMethod">
            <summary>Specifies the resampling method to apply using the

ResampleDocumentCommand.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentMethod.NearestNeighbor">
            <summary>Uses the color value of the closest neighbor.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentMethod.ScaleToGray">
            <summary>Converts the 1-bit binary image to grayscale as it resizes
which retains the visual detail of the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentMethod.AreaAverage">
            <summary>Performs an area average of the binary image with a specified
"cut-off" factor that will favor black or white pixels. Valid for
reductions only.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand">
            <summary>An ImageCommand used to convert a grayscale
or color image into black and white using a weighted thresholding
technique.</summary>
            <remarks>    The AdaptiveThresholdCommand can be used
    to cleanup a color or grayscale image when converting to black
    and white. It results in an image that generally renders text
    and objects intact, while removing effects from color
    shades.
    Like global thresholding, adaptive
    thresholding is used to separate desirable foreground image
    objects from the background. This is based on the difference in
    pixel intensities of each region, while global thresholding
    uses a fixed threshold for all pixels and therefore works only
    if the intensity histogram of the input image contains
    obviously separated peaks corresponding to the desired subjects
    and backgrounds. Hence it cannot deal with images containing,
    for example, a strong illumination gradient. Local adaptive
    thresholding selects an indiviual threshold for each pixel.
    This allows for thresholding of an image whose global intensity
    hidtogram doesn't contain distinctive peaks.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand._ctor">
            <summary>Initializes a new instance of

AdaptiveThresholdCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand._ctor">
            <summary>Initializes a new instance of

AdaptiveThresholdCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand._ctor(System.Int32)">
            <summary>Initializes a new instance of

AdaptiveThresholdCommand specifying the window size.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand._ctor(System.Int32,System.Int32)">
            <summary>Initializes a new instance of

AdaptiveThresholdCommand specifying the window size and
difference threshold.</summary>
            <param name="windowSize">The filter size.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies

AdaptiveThresholdCommand using the current settings to the
source image.</summary>
            <returns>A new AtalaImage containing the processed
image. null (Nothing in Visual Basic) if
cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand.DifferenceThreshold">
            <summary>Gets or sets a value used to improving the thresholding
results.</summary>
            <remarks>In local adaptive thresholding, an individual threshold for
each pixel is based on the range of intensity values in its local
neighborhood. In this class, a local mean value is used as the
threshold. The situation can be improved if the threshold employed
is not the mean, but "mean - DifferenceThreshold". The default
value is 7.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand.WindowSize">
            <summary>Gets or sets the size of local window acting on each pixel to
find local statistics.</summary>
            <remarks>Default value is 15.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand">
            <summary>Automatically deskews a binary image using Atalasoft's
proprietary auto-deskewing algorithm.</summary>
            <remarks>This command works best with images containing horizontal
text. To improve performance, decrease the limit angle and
precision. Another way to improve performance is to pass in a
smaller rectangular area containing the horizontally aligned text
area.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand._ctor">
            <summary>Initializes a new instance of
the AutoDeskewCommand.Create an
AutoDeskewCommand that will attempt to calculate the amount of
skewing in an image, then rotate the image to correct the
skew.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand._ctor">
            <summary>Initializes a new instance of
the AutoDeskewCommand with
default settings</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand._ctor(System.Int32,System.Int32)">
            <summary>Initializes a new instance of
the AutoDeskewCommand specifying
the precision and limit angle.</summary>
            <param name="precision">The precision of the deskew angle calculation. This value is
the inverse of the degree precision.</param>
            <param name="limitAngle">The maximum deskew angle in degrees.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand._ctor(System.Int32,System.Int32,Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCropMode,System.Drawing.Color,System.Drawing.Rectangle)">
            <summary>Initializes a new instance of
the AutoDeskewCommand specifying
the precision, limit angle, crop mode, background color, and
rectangular area to process.</summary>
            <param name="precision">The precision of the deskew angle calculation. This value is
the inverse of the degree precision.</param>
            <param name="limitAngle">The maximum deskew angle in degrees.</param>
            <param name="cropMode">The method of cropping the resulting deskewed image.</param>
            <param name="backgroundColor">The background color to use when deskewing the image.</param>
            <param name="area">The rectangular area that will be used for determing the
deskew angle.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand._ctor(System.Int32,System.Int32,System.Drawing.Rectangle)">
            <summary>Initializes a new instance of
the AutoDeskewCommand specifying
the precision, limit angle, and rectangular area to process.</summary>
            <param name="precision">The precision of the deskew angle calculation. This value is
the inverse of the degree precision.</param>
            <param name="limitAngle">The maximum deskew angle in degrees.</param>
            <param name="area">The rectangular area that will be used for determing the
deskew angle.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand._ctor(System.Drawing.Rectangle)">
            <summary>Initializes a new instance of
the AutoDeskewCommand with
default settings and a rectangular area to process.</summary>
            <param name="area">A rectangular area that will be used for determining the
deskew angle.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies

AutoDeskewCommand using the current settings to the source
image.</summary>
            <returns>A new AtalaImage containing the processed
image. null (Nothing in Visual Basic) if
cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.GetDeskewAngle(Atalasoft.Imaging.AtalaImage)">
            <summary>Returns the skew angle of the image without changing the
image at all.</summary>
            <returns>The skew angle of the image.</returns>
            <param name="sourceImage">The image to calculate the skew angle from.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.Area">
            <summary>Gets or sets the rectangular area that will be used for
determing the deskew angle.</summary>
            <remarks>This value by default is Rectangle.Empty and will use the
entire image for calculating the angle.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.BackgroundColor">
            <summary>Gets or sets the background color to use when deskewing the
image.</summary>
            <remarks>The background color is only relavent when the CropMode is
set to None or OriginalSize. The default value is White.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.CropMode">
            <summary>Gets or sets a value indicating the method of cropping the
resulting deskewed image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.LimitAngle">
            <summary>Gets or sets the maximum deskew angle in degrees.</summary>
            <remarks>Reducing this value improves performance. The default value
is 4 degrees.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.Precision">
            <summary>Gets or sets the precision of the deskew angle
calculation.</summary>
            <remarks>This value is the inverse of the smallest angle increment
that it will find. For example, a value of 1 = 1 degree precision,
2 = 1/2 degree precision, 4 = 1/4 degree precision, etc. The
smaller the value the more time it takes to calculate the deskew
angle.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand">
            <summary>An ImageCommand that removes solid borders
from document images.</summary>
            <remarks>    This command can be used to remove borders from the edges
    of images. A
    
    Tolerance of 0 will only work with perfect solid borders.
    Use a tolerance between 0 and 100 to account for minor noise in
    the border. Set 
    Edges to any of the sides (AllSides to remove borders from
    all 4 sides). The
    
    Despeckle is true, the image will be despeckled prior to
    calculating the border, only if the image is binary. Note that
    the image that's returned from
    
    ApplyToImage will not be despeckled, only the image uesd in
    the calculation.
    To calculate the border of the image, without cropping,
    use the
    
    GetBorder method. GetBorder
    ignotes the Edges property and returns the border from
    all sides.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand._ctor">
            <summary>Initializes a new instance of

BorderRemovalCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand._ctor">
            <summary>Initializes a new instance of

BorderRemovalCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand._ctor(Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalEdges)">
            <summary>Initializes a new instance of

BorderRemovalCommand specifying the edges to remove.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand._ctor(Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalEdges,System.Double)">
            <summary>Initializes a new instance of

BorderRemovalCommand specifying the edges to remove, and
tolerance.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand._ctor(Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalEdges,System.Double,System.Boolean)">
            <summary>Initializes a new instance of

BorderRemovalCommand specifying the edges to remove, tolerance,
and despeckling.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies the

BorderRemovalCommand using the current settings to the source
image.</summary>
            <returns>A new AtalaImage containing the processed
image. null (Nothing in Visual Basic) if
cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.GetBorder(Atalasoft.Imaging.AtalaImage)">
            <summary>Calculates the border of the image that is used in the
   
BorderRemovalCommand to remove the borders.</summary>
            <returns>A rectangle containing the position, and size of the image
with the borders removed.</returns>
            <remarks>Use this method to calculate the borders of an image, without
actually removing them.</remarks>
            <param name="sourceImage">The image to calculate the borders from.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.Despeckle">
            <summary>Gets or sets a value indicating if the calculated border will
be despeckled first.</summary>
            <remarks>Defaults to true.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.Edges">
            <summary>Gets or sets a value indicating which of the 4 sides are to
be removed.</summary>
            <remarks>Values may be or'ed together to account for more than one
side. Defaults to AllSides.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.Tolerance">
            <summary>Gets or sets a value indicating the tolerance of the border
detection.</summary>
            <remarks>The default value is 0. Valid values range from 0 to
100.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.DocumentDespeckleCommand">
            <summary>The DocumentDespeckleCommand is useful for
removing small isolated features in a bitonal image without eroding
solid features. The most common use is as a despeckle filter for
document images.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentDespeckleCommand._ctor">
            <summary>Initializes a new instance of
DocumentDespeckleCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentDespeckleCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies DocumentDespeckleCommand to the
source image.</summary>
            <returns>A new AtalaImage containing the processed
image. null (Nothing in Visual Basic) if
cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.DocumentHitOrMissCommand">
            <summary>Perform a hit-or-miss transformation on a binary
image.</summary>
            <remarks>    Hit or Miss is a basic tool for finding geometric shapes
    within an image. The masks used determine the shapes that are
    detected.
    The forground mask operates on foreground features and
    the background mask on background features. Together they
    detect foreground-background transitions in the input
    image.
    The two masks used are normally the same size and
    must contain mutually-exclusive elements: if a
    mask position in A contains a 1, the corresponding position in
    B must contain a 0.
    For example, these masks will find vertical edges on the
    left sides of the foreground image.
    mask A: mask B:
     0 0 0 0 0 0
     0 1 1 1 0 0
     0 0 0 0 0 0</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentHitOrMissCommand._ctor">
            <summary>Create a new instance of DocumentHitOrMissCommand specifying
foregroundMask and backgroundMask.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentHitOrMissCommand._ctor">
            <summary>Creates a new instance of DocumentHitOrMissCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentHitOrMissCommand._ctor(Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix,Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix)">
            <summary>Creates a new instance of DocumentHitOrMissCommand specifying
the foregound and background masks.</summary>
            <param name="foregroundMask">A matrix of integer values to act as the foreground
mask.</param>
            <param name="backgroundMask">A matrix of integer values to act as the background
mask.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentHitOrMissCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <returns>A new AtalaImage containing the processed
image. null (Nothing in Visual Basic) if
cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DocumentHitOrMissCommand.BackgroundMask">
            <summary>Gets or sets a matrix of integer values to act as the
background mask.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DocumentHitOrMissCommand.ForegroundMask">
            <summary>Gets or sets a matrix of integer values to act as the
foreground mask.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.DocumentMedianCommand">
            <summary>Applies a median filter to a binary image.</summary>
            <remarks>A median filter will smooth out the image and remove dots and
noise. This makes a good despeckle filter for a binary
image.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentMedianCommand._ctor">
            <summary>Creates a new instance of
DocumentMedianCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentMedianCommand._ctor">
            <summary>Creates a new instance of
DocumentMedianCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentMedianCommand._ctor(System.Int32)">
            <summary>Creates a new instance of
DocumentMedianCommand specifying
filterSize.</summary>
            <param name="filterSize">The size of the filter to use for this command. (3, 5, 7,
etc)</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentMedianCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies DocumentMedianCommand to the source
image.</summary>
            <returns>A new AtalaImage containing the processed
image. null (Nothing in Visual Basic) if
cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DocumentMedianCommand.FilterSize">
            <summary>Gets or sets the size of the filter to use for this
command.</summary>
            <remarks>Should be an odd positive value. The default value is
3.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.DocumentThinningCommand">
            <summary>Apply morphological thinning to a 1-bit image.</summary>
            <remarks>    This will reduce the geometric size of an image, leaving
    only a skeletonized frame behind.
    This function requires two sets of masks. The forground
    masks represents foreground matching masks and the background
    masks should be the compliements of the foreground masks. (swap
    ones and zeros).
    A typical set of foreground masks is:
    0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1
     1 1 1 1 1 0 1 1 0 1 1 0 1 1 1 0 1 1 0 1 1 0 1 1
     1 1 1 1 1 1 1 1 0 1 0 0 0 0 0 0 0 1 0 1 1 1 1 1
    The background masks are compliments of these (1 and 0
    reversed).
    Note that the content of each mask is the preceding mask,
    rotated 45 deg.
    The process works by applying each of these masks in
    pairs (A[x], B[x]) for all pairs, until MaxIterations has been
    reached or until there is no change in the image. This can be a
    long process.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentThinningCommand._ctor">
            <summary>Creates a new instance of DocumentThinningCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentThinningCommand._ctor">
            <summary>Creates a new instance of DocumentThinningCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentThinningCommand._ctor(Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix[],Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix[])">
            <summary>Creates a new instance of DocumentThinningCommand specifying
foregroundMask and backgroundMask.</summary>
            <param name="foregroundMask">A matrix array of integer values to act as the foreground
mask.</param>
            <param name="backgroundMask">A matrix array of integer values to act as the background
mask.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentThinningCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies DocumentThinningCommand to the source image.</summary>
            <returns>A new AtalaImage containing the processed
image. null (Nothing in Visual Basic) if
cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentThinningCommand.GetBackgroundMask">
            <summary>Returns the background mask.</summary>
            <returns>A IntegerMatrix object containing the mask values.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentThinningCommand.GetForegroundMask">
            <summary>Returns the foreground mask.</summary>
            <returns>A IntegerMatrix object containing the mask values.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentThinningCommand.SetBackgroundMask(Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix[])">
            <returns>Sets the background mask to use.</returns>
            <param name="mask">A IntegerMatrix object containing the mask values.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentThinningCommand.SetForegroundMask(Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix[])">
            <returns>Sets the foreground mask to use.</returns>
            <param name="mask">A IntegerMatrix object containing the mask values.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DocumentThinningCommand.MaxIterations">
            <summary>Gets or sets the maximum number of iterations to use when
processing the image.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.GlobalThresholdCommand">
            <summary>An ImageCommand used to convert a grayscale
or color image into black and white using a global thresholding
technique.</summary>
            <remarks>Global thresholding is the simplest of all thresholding
techniques. It will partition the image histogram by using a single
global threshold. Segmentation is then accomplished by scanning the
image pixel by pixel and labelling each pixel as object or
background. The success of this method depends entirely on how well
the histogram can be partitioned.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.GlobalThresholdCommand._ctor">
            <summary>Initializes a new instance of

GlobalThresholdCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.GlobalThresholdCommand._ctor">
            <summary>Initializes a new instance of

GlobalThresholdCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.GlobalThresholdCommand._ctor(System.Int32)">
            <summary>Initializes a new instance of

GlobalThresholdCommand specifying the initial threshold
value.</summary>
            <param name="initThreshold">The initial threshold value.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.GlobalThresholdCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies the

GlobalThresholdingCommand to the source AtalaImage.</summary>
            <returns>A new AtalaImage containing the processed
image. null (Nothing in Visual Basic) if
cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.GlobalThresholdCommand.InitThreshold">
            <summary>Gets or sets the initial threshold value.</summary>
            <remarks>When there is reason to believe that the background and
object occupy comparable areas in the image, a good initial value
for InitThreshold is the average gray level of the image.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentCommand">
            <summary>This class will perform a mathematical morphological
operation to a binary image.</summary>
            <remarks>    Morphology is the study of form and structure. In image
    processing, it encompasses a set of techniques that merge
    traditional image processing with set theory from
    mathematics.
    See Morphological Filters for more information about
    morphology.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentCommand._ctor">
            <summary>Create a new instance of MorphoDocumentCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentCommand._ctor">
            <summary>Creates a new instance of MorphoDocumentCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentCommand._ctor(Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentMode)">
            <summary>Create a new instance of MorphoDocumentCommand specifying
mode.</summary>
            <param name="mode">The type of morphological filter to perform.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentCommand._ctor(Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentMode,Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix)">
            <summary>Create a new instance of MorphoDocumentCommand specifying
mode and mask.</summary>
            <param name="mode">The type of morphological filter to perform.</param>
            <param name="mask">A matrix of integers controlling the behavior and depth of
the filter.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <returns>A new AtalaImage containing the processed
image. null (Nothing in Visual Basic) if
cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentCommand.Mask">
            <summary>Gets or sets a matrix of integers controlling the behavior
and depth of the filter.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentCommand.Mode">
            <summary>Gets or set the type of morphological filter to
perform.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.OverlayMaskedDocumentCommand">
            <summary>Overlay an image using an alpha mask.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.OverlayMaskedDocumentCommand._ctor">
            <summary>Creates a new instance of
OverlayMaskedDocumentCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.OverlayMaskedDocumentCommand._ctor">
            <summary>Creates a new instance of
OverlayMaskedDocumentCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.OverlayMaskedDocumentCommand._ctor(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage)">
            <summary>Creates a new instance of OverlayMaskedDocumentCommand
specifying topImage and mask.</summary>
            <param name="topImage">The top binary image to overlay.</param>
            <param name="mask">A binary image indicating the transparent and opaque regions
of the overlay.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.OverlayMaskedDocumentCommand._ctor(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Point)">
            <summary>Creates a new instance of OverlayMaskedDocumentCommand
specifying topImage, mask and position.</summary>
            <param name="topImage">The top binary image to overlay.</param>
            <param name="mask">A binary image indicating the transparent and opaque regions
of the overlay.</param>
            <param name="position">The position of the top image on the bottom image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.OverlayMaskedDocumentCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies OverlayMaskedDocumentCommand to the source
image.</summary>
            <returns>null (Nothing in Visual
Basic)</returns>
            <remarks>This method uses in place processing. That is, it
modifies the source image passed to it, rather than creating a new
image to hold the result. Therefore, the return result is always
null (Nothing in Visual
Basic).</remarks>
            <param name="bottomImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.OverlayMaskedDocumentCommand.InPlaceProcessing">
            <summary>Gets a value indicating if the image is processed in place
instead of generating a new image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.OverlayMaskedDocumentCommand.Mask">
            <summary>Gets or sets the 1-bit image indicating the transparent and
opaque regions of the overlay.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.OverlayMaskedDocumentCommand.Position">
            <summary>Gets or sets the position of the top image on the bottom
image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.OverlayMaskedDocumentCommand.TopImage">
            <summary>Gets or sets the top 1-bit image to overlay.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand">
            <summary>Resamples a binary image.</summary>
            <remarks>This command can be used to efficiently perform a "scale to
gray" resample on a document image as well as "favor to black"
using the AreaAverage method and speciftying the cut-off
value.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand._ctor">
            <summary>Creates a new instance of
ResampleDocumentCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand._ctor">
            <summary>Creates a new instance of ResampleDocumentCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand._ctor(System.Drawing.Rectangle,System.Drawing.Size,Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentMethod)">
            <summary>Creates a new instance of
ResampleDocumentCommand specifying sourceRect,
destSize and documentMethod.</summary>
            <param name="sourceRect">The rectangular region of the source image which will be
resized.</param>
            <param name="destSize">The final size of the image.</param>
            <param name="documentMethod">The 1-bit specialized resampling method to apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand._ctor(System.Drawing.Rectangle,System.Drawing.Size,Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentMethod,System.Int32)">
            <summary>Creates a new instance of
ResampleDocumentCommand specifying sourceRect,
destSize, documentMethod and cutOff.</summary>
            <param name="sourceRect">The rectangular region of the source image which will be
resized.</param>
            <param name="destSize">The final size of the image.</param>
            <param name="documentMethod">The 1-bit specialized resampling method to apply.</param>
            <param name="cutOff">The grayscale value which is the cutoff value for a black
pixel when using AreaAverage.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand._ctor(System.Drawing.Rectangle,System.Drawing.Size,Atalasoft.Imaging.ImageProcessing.ResampleMethod)">
            <summary>Creates a new instance of
ResampleDocumentCommand specifying sourceRect,
destSize and scaleToGrayMethod.</summary>
            <param name="sourceRect">The rectangular region of the source image which will be
resized.</param>
            <param name="destSize">The final size of the image.</param>
            <param name="scaleToGrayMethod">The ResampleMethod to apply when the ResampleDocumentMethod
is ScaleToGray.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies ResampleDocumentCommand to the source image.</summary>
            <returns>A new AtalaImage containing the processed
image. null (Nothing in Visual Basic) if
cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.CutOff">
            <summary>Gets or sets the grayscale value which is the cutoff value
for a black pixel when using AreaAverage.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.DestSize">
            <summary>Gets or sets the final size of the image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.DocumentMethod">
            <summary>Gets or sets the 1-bit specialized resampling method to
apply.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.ScaleToGrayMethod">
            <summary>Gets or sets the ResampleMethod to apply when the
DocumentMethod is ScaleToGray.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.SourceRect">
            <summary>Gets or sets the rectangular region of the source image which
will be resized.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.SimpleThresholdCommand">
            <summary>This command converts an continuous RGB or grayscale image to
a 1-bit black and white image, given a threshold value.</summary>
            <remarks>SimpleThresholdCommand can result is
considerable better performance over the

GetChangedPixelFormat method in
AtalaImage
or

ApplyPaletteCommand when converting color or grayscale images
to black and white. however the quality of the conversion can vary,
and offers no dithering.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.SimpleThresholdCommand._ctor">
            <summary>Creates a new instance of
SimpleThresholdCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.SimpleThresholdCommand._ctor">
            <summary>Creates a new instance of
SimpleThresholdCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.SimpleThresholdCommand._ctor(System.Int32)">
            <summary>Creates a new instance of
SimpleThresholdCommand indicating the threshold
value.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.SimpleThresholdCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies SimpleThresholdCommand to the source image.</summary>
            <returns>A new AtalaImage containing the processed
image. null (Nothing in Visual Basic) if
cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.SimpleThresholdCommand.InputThreshold">
            <summary>Gets or sets the threshold value.</summary>
            <remarks>This is the value from 0 - 255 of which any pixel that with a
brightness greater then the value will be converted to white, and
any pixel with a brightness less than this value will be converted
to black. Default value is 127.</remarks>
        </member>
        <member name="N:Atalasoft.Imaging.ImageProcessing.Effects">
            <summary>Contains classes that produce an effect on the image.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCurveType">
            <summary>Indicates the curve type used in the

BrightnessContrastCommand.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCurveType.ThreePoint">
            <summary>The three point curve emphasizes mid-tones more than the five
or seven point curves. This is closest to the brightness / contrast
that Adobe Photoshop uses.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCurveType.FivePoint">
            <summary>The default curve type for traditional Brightness/Contrast
adjustment.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCurveType.SevenPoint">
            <summary>The seven point curve forces pixels in the extreme dark and
light ranges to black or white faster than the five point
curve.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.CrackleMode">
            <summary>Specifies the crackle mode to use in the

CrackleCommand.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.CrackleMode.PaintChips">
            <summary>Creates an effect of dried paint chipping off.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.CrackleMode.TinPunch">
            <summary>Makes the image appear to be punched out onto a tin
surface.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.CrackleMode.Erosion">
            <summary>Creates the effect of erosion on the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.CrackleMode.PaintChips2">
            <summary>A more intense version of the PaintChips effect.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.CrackleMode.Erosion2">
            <summary>A more intense version of the Erosion effect.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceMergeMethod">
            <summary>Specifies the merge method used by

DeInterlaceCommand when the Merge method is used.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceMergeMethod.BiLinear">
            <summary>BiLinear filter is applied.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceMergeMethod.BiCubic">
            <summary>BiCubic filter is applied.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceMergeMethod.Lanczos">
            <summary>Lanczos filter is applied.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceMergeMethod.Hanning">
            <summary>Hanning filter is applied.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceMethod">
            <summary>Specifies the method used by the

DeInterlaceCommand.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceMethod.Duplicate">
            <summary>Duplicates the interlaced lines.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceMethod.Interpolate">
            <summary>Uses interpolation when the image is de-interlaced.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceMethod.Merge">
            <summary>Merges the interlaced lines together.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceRetention">
            <summary>Specifies the retention used in

DeInterlaceCommand when

Duplicate or

Interpolate methods are used.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceRetention.EvenLines">
            <summary>Even lines are retained.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceRetention.OddLines">
            <summary>Odd lines are retained.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.GauzyMode">
            <summary>Indicates the type of effect to apply in the

GauzyCommand.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.GauzyMode.Desaturated">
            <summary>Applies a desaturated effect to the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.GauzyMode.HighContrastForeground">
            <summary>Creates a high contrast effect on the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.GauzyMode.FullColor">
            <summary>Applies a full color gauzy effect.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.GauzyMode.Max">
            <summary>Applies a maximum filter effect to the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.GauzyMode.Min">
            <summary>Applies a minimum filter effect to the image.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleMode">
            <summary>Indicates the type of blurring to use on the

ScribbleCommand.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleMode.Blurred">
            <summary>Applies a blurring effect to the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleMode.Filtered">
            <summary>Applies a filtered effect to the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleMode.Posterized">
            <summary>Applies a posterized effect to the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleMode.Despeckled">
            <summary>Applies a despeckle effect to the image.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.StippleFilterType">
            <summary>Indicates the type of blurring to use in the

StippleCommand.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.StippleFilterType.ArithmeticMean">
            <summary>Applies an arithmetic mean filter to the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.StippleFilterType.Minimum">
            <summary>Applies a minimum filter to the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.StippleFilterType.Maximum">
            <summary>Applies a maximum filter to the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.StippleFilterType.GeometricMean">
            <summary>Applies a geometric mean filter to the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.StippleFilterType.YPMean">
            <summary>Applies a YP mean filter to the image.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.StippleMode">
            <summary>Indicates how to process the image in the

StippleCommand.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.StippleMode.NoiseFirst">
            <summary>Applies the noise before the filter.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.StippleMode.FilterFirst">
            <summary>Applies the filter before adding the noise.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintMode">
            <summary>Specifies the tint mode for

WatercolorTintCommand.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintMode.Darken">
            <summary>Darkens the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintMode.Lighten">
            <summary>Lightens the image.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.GammaColor">
            <summary>This structure is used with WatercolorTintCommand to specify
the gamma levels used during the command process.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GammaColor._ctor">
            <summary>Create a GammaColor object for use with
WatercolorTintCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GammaColor._ctor(System.Double)">
            <summary>Creates a new instance of GammaColor specifying a single
value for all channels.</summary>
            <param name="gamma">The gamma value.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GammaColor._ctor(System.Double,System.Double,System.Double)">
            <summary>Creates a new instance of GammaColor specifying the gamma
value for blue, green and red channels.</summary>
            <param name="blue">The blue gamma value.</param>
            <param name="green">The green gamma value.</param>
            <param name="red">The red gamma value.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GammaColor._ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>Creates a new instance of GammaColor specifying the gamma
value for blue, green, red and alpha channels.</summary>
            <param name="blue">The blue gamma value.</param>
            <param name="green">The green gamma value.</param>
            <param name="red">The red gamma value.</param>
            <param name="alpha">The alpha gamma value.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.GammaColor.Default">
            <summary>Gets the default GammaColor object.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.GammaColor.A">
            <summary>The alpha channel.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.GammaColor.B">
            <summary>The blue channel.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.GammaColor.G">
            <summary>The green channel.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.GammaColor.R">
            <summary>The red channel.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.AdjustTintCommand">
            <summary>    Adjusts the tint of an image by specifying a
    value.</summary>
            <remarks>This method requires an RGB or RGBA image.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AdjustTintCommand._ctor">
            <summary>Creates a new instance of
AdjustTintCommand specifying
tint.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AdjustTintCommand._ctor">
            <summary>Creates a new instance of AdjustTintCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AdjustTintCommand._ctor(System.Int32)">
            <summary>Creates a new instance of AdjustTintCommand specifying the
tint value.</summary>
            <param name="tint">A value from -180 to +180. Positive values enhance green,
negative values enhance red.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AdjustTintCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies AdjustTintCommand using the current
settings to the source image.</summary>
            <returns>null (Nothing in Visual
Basic)</returns>
            <remarks>This method uses in place processing. That is, it
modifies the source image passed to it, rather than creating a new
image to hold the result. Therefore, the return result is always
null (Nothing in Visual
Basic).</remarks>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AdjustTintCommand.InPlaceProcessing">
            <summary>    Gets a value indicating if the source image data is
    processed in-place as opposed to returning a new image.</summary>
            <remarks>By default, this value is false. Implementing classes should
override this and set it to true when processing the source image
directly. When this value is true,

ApplyToImage returns null.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AdjustTintCommand.Tint">
            <summary>Gets or sets a value from -180 to +180. Positive values
enhance green, negative values enhance red.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.AutoColorCommand">
            <summary>Automatically corrects the color and contrast of an image. A
combination of

AutoLevelsComand and

AutoContrastCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoColorCommand._ctor">
            <summary>Creates a new instance of AutoColorCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoColorCommand._ctor(System.Double)">
            <summary>Creates a new instance of AutoColorCommand specifying the
clip amount.</summary>
            <param name="clip">The percentage of pixels to ignore when calculating the white
and black points.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoColorCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies AutoColorCommand using the current settings to the
source image.</summary>
            <returns>null (Nothing in Visual
Basic)</returns>
            <remarks>This method uses in place processing. That is, it
modifies the source image passed to it, rather than creating a new
image to hold the result. Therefore, the return result is always
null (Nothing in Visual
Basic).</remarks>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoColorCommand.Clip">
            <summary>Gets or sets the percentage of pixels to ignore when
calculating the white and black points.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoColorCommand.InPlaceProcessing">
            <summary>    Gets a value indicating if the source image data is
    processed in-place as opposed to returning a new image.</summary>
            <remarks>By default, this value is false. Implementing classes should
override this and set it to true when processing the source image
directly. When this value is true,

ApplyToImage returns null.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand">
            <summary>Adjusts the overall contrast of an image
automatically.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand._ctor">
            <summary>Creates a new instance of AutoConstrastCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand._ctor(System.Int32,System.Int32)">
            <summary>Creates a new instance of AutoContrastCommand specifying the
output range.</summary>
            <param name="outputRangeLow">The low pixel value to stretch the histogram to.</param>
            <param name="outputRangeHigh">The high pixel value to stretch the histogram to.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand._ctor(System.Int32,System.Int32,System.Double)">
            <summary>Creates a new instance of AutoContrastCommand specifying the
output range and gamma.</summary>
            <param name="outputRangeLow">The low pixel value to stretch the histogram to.</param>
            <param name="outputRangeHigh">The high pixel value to stretch the histogram to.</param>
            <param name="gamma">The gamma adjustment to apply when running the filter.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand._ctor(System.Int32,System.Int32,System.Double,System.Double)">
            <summary>Creates a new instance of AutoContrastCommand specifying the
output range, gamma and clip values.</summary>
            <param name="outputRangeLow">The low pixel value to stretch the histogram to.</param>
            <param name="outputRangeHigh">The high pixel value to stretch the histogram to.</param>
            <param name="gamma">The gamma adjustment to apply when running the filter.</param>
            <param name="clip">The percentage of pixels to ignore when calculating the white
and black points.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies AutoContrastCommand to the source image.</summary>
            <returns>null (Nothing in Visual
Basic)</returns>
            <remarks>This method uses in place processing. That is, it
modifies the source image passed to it, rather than creating a new
image to hold the result. Therefore, the return result is always
null (Nothing in Visual
Basic).</remarks>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand.Clip">
            <summary>Gets or sets the percentage of pixels to ignore when
calculating the white and black points.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand.Gamma">
            <summary>Gets or sets the gamma adjustment to apply when running the
filter.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand.InPlaceProcessing">
            <summary>    Gets a value indicating if the source image data is
    processed in-place as opposed to returning a new image.</summary>
            <remarks>By default, this value is false. Implementing classes should
override this and set it to true when processing the source image
directly. When this value is true,

ApplyToImage returns null.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand.OutputRangeHigh">
            <summary>Gets or sets the high pixel value to stretch the histogram
to.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand.OutputRangeLow">
            <summary>Gets or sets the low pixel value to stretch the histogram
to.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand">
            <summary>Enhances the contrast of an image by automatically defining
the light and dark pixels, then redistributing the histogram
proportionately.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand._ctor">
            <summary>Creates a new instance of AutoLevelsCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand._ctor(System.Drawing.Color,System.Drawing.Color)">
            <summary>Creates a new instance of AutoLevelsCommand specifying the
output range.</summary>
            <param name="outputRangeLow">The low pixel value to stretch the histogram to.</param>
            <param name="outputRangeHigh">The high pixel value to stretch the histogram to.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand._ctor(System.Drawing.Color,System.Drawing.Color,System.Double)">
            <summary>Creates a new instance of AutoLevelsCommand specifying the
output range and gamma.</summary>
            <param name="outputRangeLow">The low pixel value to stretch the histogram to.</param>
            <param name="outputRangeHigh">The high pixel value to stretch the histogram to.</param>
            <param name="gamma">The gamma adjustment to apply when running the filter.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand._ctor(System.Drawing.Color,System.Drawing.Color,System.Double,System.Double)">
            <summary>Creates a new instance of AutoLevelsCommand specifying the
output range, gamma and clip.</summary>
            <param name="outputRangeLow">The low pixel value to stretch the histogram to.</param>
            <param name="outputRangeHigh">The high pixel value to stretch the histogram to.</param>
            <param name="gamma">The gamma adjustment to apply when running the filter.</param>
            <param name="clip">The percentage of pixels to ignore when calculating the white
and black points.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies AutoLevelsCommand to the source image.</summary>
            <returns>null (Nothing in Visual
Basic)</returns>
            <remarks>This method uses in place processing. That is, it
modifies the source image passed to it, rather than creating a new
image to hold the result. Therefore, the return result is always
null (Nothing in Visual
Basic).</remarks>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.Clip">
            <summary>Gets or sets the percentage of pixels to ignore when
calculating the white and black points.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.Gamma">
            <summary>Gets or sets the gamma adjustment to apply when running the
filter.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.InPlaceProcessing">
            <summary>    Gets a value indicating if the source image data is
    processed in-place as opposed to returning a new image.</summary>
            <remarks>By default, this value is false. Implementing classes should
override this and set it to true when processing the source image
directly. When this value is true,

ApplyToImage returns null.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.OutputRangeHigh">
            <summary>Gets or sets the high pixel value to stretch the histogram
to.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.OutputRangeLow">
            <summary>Gets or sets the low pixel value to stretch the histogram
to.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.AutoWhiteBalanceCommand">
            <summary>Automatically adjusts the white point in an image.</summary>
            <remarks>Auto White Balance is based on "Gray World" algorithm and
balances the source image. It is best applied after the translation
to gamma-corrected RGB space.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoWhiteBalanceCommand._ctor">
            <summary>Creates a new instance of AutoWhiteBalanceCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoWhiteBalanceCommand._ctor(System.Double)">
            <summary>Creates a new instance of AutoWhiteBalanceCommand specifying
dampening.</summary>
            <param name="dampening">The amount of dampening to use.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoWhiteBalanceCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies AutoWhiteBalanceCommand to the source image.</summary>
            <returns>null (Nothing in Visual
Basic)</returns>
            <remarks>This method uses in place processing. That is, it
modifies the source image passed to it, rather than creating a new
image to hold the result. Therefore, the return result is always
null (Nothing in Visual
Basic).</remarks>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoWhiteBalanceCommand.Dampening">
            <summary>Gets or sets a value indicating the amount of dampening to
use.</summary>
            <remarks>Dampening is used to mitigate the algorithm since full
correction is often too extreme for real world scenes.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoWhiteBalanceCommand.InPlaceProcessing">
            <summary>    Gets a value indicating if the source image data is
    processed in-place as opposed to returning a new image.</summary>
            <remarks>By default, this value is false. Implementing classes should
override this and set it to true when processing the source image
directly. When this value is true,

ApplyToImage returns null.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand">
            <summary>Apply a bevel effect to the edges of an image.</summary>
            <remarks>This method requires a continuous tone image.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand._ctor">
            <summary>Creates a new instance of
BevelEdgeCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand._ctor">
            <summary>Creates a new instance of BevelEdgeCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand._ctor(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>Creates a new instance of BevelEdgeCommand specifying the
bevel size and brightness levels.</summary>
            <param name="bevelSize">Size of the bevel along the edge, in pixels.</param>
            <param name="leftBrightness">Brightness level of the left facet. (0-255)</param>
            <param name="topBrightness">Brightness level of the top facet. (0-255)</param>
            <param name="rightBrightness">Brightness level of the right facet. (0-255)</param>
            <param name="bottomBrightness">Brightness level of the bottom facet. (0-255)</param>
            <param name="smoothFactor">Smooth the bevel edge. (0-500)</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies BevelEdgeCommand using the current settings to the
source image.</summary>
            <returns>null (Nothing in Visual
Basic)</returns>
            <remarks>This method uses in place processing. That is, it
modifies the source image passed to it, rather than creating a new
image to hold the result. Therefore, the return result is always
null (Nothing in Visual
Basic).</remarks>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.BevelSize">
            <summary>Gets or sets the size of the bevel along the edge, in
pixels.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.BottomBrightness">
            <summary>Gets or sets the brightness level of the bottom facet.
(0-255)</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.InPlaceProcessing">
            <summary>    Gets a value indicating if the source image data is
    processed in-place as opposed to returning a new image.</summary>
            <remarks>By default, this value is false. Implementing classes should
override this and set it to true when processing the source image
directly. When this value is true,

ApplyToImage returns null.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.LeftBrightness">
            <summary>Gets or sets the brightness level of the left facet.
(0-255)</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.RightBrightness">
            <summary>Gets or sets the brightness level of the right facet.
(0-255)</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.SmoothFactor">
            <summary>Gets or sets the smooth the bevel edge. (0-500)</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.TopBrightness">
            <summary>Gets or sets the brightness level of the top facet.
(0-255)</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand">
            <summary>Modifies the brightness and/or contrast of an image.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand._ctor">
            <summary>Initializes a new instance of
BrightnessContrastCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand._ctor">
            <summary>Creates a new instance of BrightnessContrastCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand._ctor(System.Double,System.Double)">
            <summary>Initializes a new instance of BrightnessContrastCommand
specifying the brightness and contrast.</summary>
            <param name="newBrightness">The percent to increase or decrease brightness. (-100 to
100)</param>
            <param name="newContrast">The percent to increate or decrease the contrast. (-100 to
100)</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand._ctor(System.Double,System.Double,Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCurveType)">
            <summary>Initializes a new instance of BrightnessContrastCommand
specifying the brightness, contrast, and curve shape.</summary>
            <param name="newBrightness">The percent to increase or decrease brightness. (-100 to
100)</param>
            <param name="newContrast">The percent to increase or decrease contrast. (-100 to
100)</param>
            <param name="curveShape">The curve shape.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies this BrightnessContrastCommand using
the current settings to the specified image.</summary>
            <remarks>This method uses in place processing. That is, it
modifies the source image passed to it, rather than creating a new
image to hold the result. Therefore, the return result is always
null (Nothing in Visual
Basic).</remarks>
            <returns>null (Nothing in Visual
Basic)</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand.CurveShape">
            <summary>Gets or sets a value indicating the curve shape.</summary>
            <remarks/>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand.InPlaceProcessing">
            <summary>    Gets a value indicating if the source image data is
    processed in-place as opposed to returning a new image.</summary>
            <remarks>By default, this value is false. Implementing classes should
override this and set it to true when processing the source image
directly. When this value is true,

ApplyToImage returns null.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand.NewBrightness">
            <summary>Gets or sets the percent to increase or decrease
brightness.</summary>
            <remarks>Valid values are from -100 to 100.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand.NewContrast">
            <summary>Gets or sets the percent to increase or decrease
contrast.</summary>
            <remarks>Valid values are from -100 to 100.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramEqualizeCommand">
            <summary>Perform histogram equalization on an image while preventing
colors from shifting.</summary>
            <remarks>    
        This function will re-distribute the pixel values across
        the given range so that there will be (approximately) equal
        numbers of pixels with each pixel value (0 to 255). Input
        pixels with values above or below the threshold values are
        not modified in the output. 
        Can be used to extend the dynamic range of an
        image.
    </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramEqualizeCommand._ctor">
            <summary>Creates a new instance of BrightnessHistogramEqualizeCommand
specifying the threshold values.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramEqualizeCommand._ctor">
            <summary>Creates a new instance of
BrightnessHistogramEqualizeCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramEqualizeCommand._ctor(System.Int32,System.Int32)">
            <summary>Creates a new instance of BrightnessHistogramEqualizeCommand
specifying the threshold levels.</summary>
            <param name="lowThreshold">Pixels are uneffected below this value. (0 - 255)</param>
            <param name="highThreshold">Pixels are uneffected above this value. (0 - 255)</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramEqualizeCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies BrightnessHistogramEqualizeCommand to the source
image.</summary>
            <returns>null (Nothing in Visual
Basic)</returns>
            <remarks>This method uses in place processing. That is, it
modifies the source image passed to it, rather than creating a new
image to hold the result. Therefore, the return result is always
null (Nothing in Visual
Basic).</remarks>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramEqualizeCommand.HighThreshold">
            <summary>Gets or sets a high threshold value above which pixels are
uneffected.</summary>
            <remarks>Valid values are from 0 to 255.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramEqualizeCommand.InPlaceProcessing">
            <summary>    Gets a value indicating if the source image data is
    processed in-place as opposed to returning a new image.</summary>
            <remarks>By default, this value is false. Implementing classes should
override this and set it to true when processing the source image
directly. When this value is true,

ApplyToImage returns null.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramEqualizeCommand.LowThreshold">
            <summary>Gets or sets a low threshold value below which pixels are
uneffected.</summary>
            <remarks>Valid values are from 0 to 255.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand">
            <summary>Performs a histogram stretch on an image while preventing
colors from shifting.</summary>
            <remarks>    
        Re-distribute the pixel values across the given range by
        first setting values above and below the thresholds to zero
        and 255 respectively and then scaling the remaining values
        to span the entire zero to 255 range. 
        This can be used to increase the contrast and extend
        the dynamic range of an image.
    </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand._ctor">
            <summary>Creates a new instance of
BrightnessHistogramStretchCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand._ctor">
            <summary>Creates a new instance of
BrightnessHistogramStretchCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand._ctor(System.Double,System.Double)">
            <summary>Creates a new instance of
BrightnessHistogramStretchCommand specifying the
limit values.</summary>
            <param name="lowLimit">Percent of pixels to set to 0. (0 to 100)</param>
            <param name="highLimit">Percent of pixels to set to 255. (0 to 100)</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand._ctor(System.Double,System.Double,System.Boolean)">
            <summary>Creates a new instance of
BrightnessHistogramStretchCommand specifying the
limit values and if the HSL colorspace should be used.</summary>
            <param name="lowLimit">Percent of pixels to set to 0. (0 to 100)</param>
            <param name="highLimit">Percent of pixels to set to 255. (0 to 100)</param>
            <param name="hslColorSpace">Indicates if the Histogram Stretch is performed in the HSL
colorspace.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies BrightnessHistogramStretchCommand to the source
image.</summary>
            <returns>null (Nothing in Visual
Basic)</returns>
            <remarks>This method uses in place processing. That is, it
modifies the source image passed to it, rather than creating a new
image to hold the result. Therefore, the return result is always
null (Nothing in Visual
Basic).</remarks>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.HighLimit">
            <summary>Gets or sets the percent of pixels to set to 255.</summary>
            <remarks>Valid values are from 0 to 100.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.HslColorSpace">
            <summary>Gets or sets a value indicating if the Histogram Stretch is
performed in the HSL colorspace.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.InPlaceProcessing">
            <summary>    Gets a value indicating if the source image data is
    processed in-place as opposed to returning a new image.</summary>
            <remarks>By default, this value is false. Implementing classes should
override this and set it to true when processing the source image
directly. When this value is true,

ApplyToImage returns null.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.LowLimit">
            <summary>Gets or sets the percent of pixels to set to 0.</summary>
            <remarks>Valid values are from 0 to 100.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.CrackleCommand">
            <summary>    Generates an image which looks like a cracked ceramic
    glaze.</summary>
            <remarks>This method requires a continuous tone image. If the source
image is not continuous, it will raise the
ChangePixelFormat event and convert the image to a
compatible format.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.CrackleCommand._ctor">
            <summary>Initalize a new instance of the
CrackleCommand class.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.CrackleCommand._ctor">
            <summary>Creates a new instance of CrackleCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.CrackleCommand._ctor(Atalasoft.Imaging.ImageProcessing.Effects.CrackleMode,System.Int32)">
            <summary>Creates a new instance of CrackleCommand specifying the
crackle mode and definition.</summary>
            <param name="mode">The crackle mode.</param>
            <param name="definition">A value which controls sharpness of cracks. (0 to 100)</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.CrackleCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies the CrackleCommand Effects using the current settings
to the source image.</summary>
            <returns>A new AtalaImage containing the processed
image. null (Nothing in VB) if cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.CrackleCommand.Definition">
            <summary>Gets or sets a value which controls sharpness of
cracks.</summary>
            <remarks>Valid values are from 0 to 100.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.CrackleCommand.Mode">
            <summary>Gets or sets the crackle mode.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.CurvesCommand">
            <summary>    Applies a color curve to an image, similar to the
    Photoshop Curves method.
    The curves are defined by an array of one or more
    
    PointF objects.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.CurvesCommand._ctor">
            <summary>Creates a CurvesCommand object that can be used to apply a
color curve to an image.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.CurvesCommand._ctor">
            <summary>Creates a new instance of CurvesCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.CurvesCommand._ctor(System.Drawing.PointF[],Atalasoft.Imaging.ImageProcessing.ChannelFlags)">
            <summary>Creates a new instance of CurvesCommand specifying the points
of the curve and channels to process.</summary>
            <param name="points">An array of PointF objects specifying the curve.</param>
            <param name="channels">A channel mask containing the channels to process.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.CurvesCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies the CurvesCommand to the sourceImage.</summary>
            <returns>null (Nothing in Visual
Basic)</returns>
            <remarks>This method uses in place processing. That is, it
modifies the source image passed to it, rather than creating a new
image to hold the result. Therefore, the return result is always
null (Nothing in Visual
Basic).</remarks>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.CurvesCommand.Channels">
            <summary>Gets or sets the channel flags that specify which color
channels to process.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.CurvesCommand.InPlaceProcessing">
            <summary>Gets a value indicating if the source image data is processed
in-place as opposed to returning a new image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.CurvesCommand.Points">
            <summary>Gets or sets the points that define the curve.</summary>
            <remarks>    At least one point must be provided, with a maximum of
    256 points.
    Each point value must have a range from 0.0 to 1.0. There
    can be no duplicate PointF.X values can be in the
    array.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand">
            <summary>This command will de-interlace an image.</summary>
            <remarks>    Interlacing is when two frames, usually in video, are
    mixed together in one frame with odd lines being from one frame
    and even lines being from the other frame. De-Interlacing can
    fix this with one of three options:
    
        Duplicating every other line
        Interpolating every other line
        Merging the odd and even lines
    </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand._ctor">
            <summary>    Initializes a new instance of
    DeInterlaceCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand._ctor">
            <summary>    Initializes a new instance of
    DeInterlaceCommand
    with default settings.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand._ctor(Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceMethod)">
            <summary>    Initializes a new instance of
    DeInterlaceCommand specifying the
    method.</summary>
            <param name="method">The de-interlace method.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand._ctor(Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceMethod,Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceMergeMethod)">
            <summary>    Initializes a new instance of
    DeInterlaceCommand specifying the de-interlace
    method and merging mode.</summary>
            <param name="method">The de-interlace method.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand._ctor(Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceMethod,Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceRetention)">
            <summary>    Initializes a new instance of
    DeInterlaceCommand specifying the de-interlace
    method and which lines to retain.</summary>
            <param name="method">The de-interlace method.</param>
            <param name="retention">Specifies which lines to retain.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies the DeInterlaceCommand using the current settings to
the source image.</summary>
            <returns>null (Nothing in Visual
Basic)</returns>
            <remarks>This method uses in place processing. That is, it
modifies the source image passed to it, rather than creating a new
image to hold the result. Therefore, the return result is always
null (Nothing in Visual
Basic).</remarks>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand.InPlaceProcessing">
            <summary>    Gets a value indicating if the source image data is
    processed in-place as opposed to returning a new image.</summary>
            <remarks>By default, this value is false. Implementing classes should
override this and set it to true when processing the source image
directly. When this value is true,

ApplyToImage returns null.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand.MergeMethod">
            <summary>Gets or sets the merge method to use when merging the odd and
even interpolated images.</summary>
            <remarks>Only used for the Merge method.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand.Method">
            <summary>Gets or sets the method used to de-interlace the
image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand.Retention">
            <summary>Gets or sets the odd or even line to retain.</summary>
            <remarks>Only used for the Duplicate and Interpolate methods.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand">
            <summary>Apply a drop shadow behind the image.</summary>
            <remarks>This method requires a continuous tone image. If the source
image is not continuous, it will raise the
ChangePixelFormat event and convert the image to a
compatible format.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand._ctor">
            <summary>Initialize a new instance of the
DropShadowCommand class.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand._ctor">
            <summary>Creates a new instance of DropShadowCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand._ctor(System.Int32)">
            <summary>Initializes a new instance of
DropShadowCommand specifying offset.</summary>
            <param name="offset">The number of pixels to offset the the shadow.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand._ctor(System.Drawing.Point)">
            <summary>Initialize a new instance of
DropShadowCommand specifying offset.</summary>
            <param name="offset">The number of pixels to offset the the shadow.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand._ctor(System.Drawing.Point,System.Drawing.Color)">
            <summary>Creates a new instance of DropShadowCommand
specifying offset and shadowColor.</summary>
            <param name="offset">The number of pixels to offset the the shadow.</param>
            <param name="shadowColor">The color to use for the shadow.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand._ctor(System.Drawing.Point,System.Drawing.Color,System.Double)">
            <summary>Initialize a new instance of
DropShadowCommand specifying offset, shadowColor
and blurLevel.</summary>
            <param name="offset">The number of pixels to offset the the shadow.</param>
            <param name="shadowColor">The color to use for the shadow.</param>
            <param name="blurLevel">The amount of blur to add to the shadow.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand._ctor(System.Drawing.Point,System.Drawing.Color,System.Double,System.Boolean)">
            <summary>Initialize a new instance of
DropShadowCommand specifying offset, shadowColor,
blurLevel and increaseCanvas.</summary>
            <param name="offset">The number of pixels to offset the the shadow.</param>
            <param name="shadowColor">The color to use for the shadow.</param>
            <param name="blurLevel">The amount of blur to add to the shadow.</param>
            <param name="increaseCanvas">A value to indicate if you want the canvas to be increased to
include the shadow.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies the DropShadowCommand using the current settings to
the source image.</summary>
            <returns>A new AtalaImage containing the processed
image. null (Nothing in VB) if cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.BlurLevel">
            <summary>Gets or sets the amount of blur to add to the shadow.</summary>
            <remarks>This is the standard deviation of the gaussian kernal.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.IncreaseCanvas">
            <summary>Gets or sets a value to indicate if you want the canvas to be
increased to include the shadow.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.Offset">
            <summary>Gets or set the number of pixels to offset the the
shadow.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.ShadowColor">
            <summary>Gets or sets the color to use for the shadow.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.DuotoneCommand">
            <summary>Derives from ImageCommand and adds region of
interest capability to ImageCommands.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.EmbossShapeCommand">
            <summary>Represents the base class for all image processing routines
that modify image data.</summary>
            <remarks>    An ImageCommand can be used to apply any type of effect
    onto an existing image. The
    
    ApplyToImage method can be used to process the command. If
    the InPlaceProcessing value is true, then the
    source image will be processed and the ApplyToImage
    method will always return null, otherwise a new image will be
    returned.
    Classes that inherit ImageCommand can be
    used in the
    
    ApplyCommand method in the Workspace.
    See Extending ImageCommands for more information on
    creating custom commands.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.FingerprintCommand">
            <summary>Creates an effect which looks like fingerprint smuges on the
image.</summary>
            <remarks>This method requires an 8-bit grayscale. If the source image
is of a different format, it will raise the
ChangePixelFormat event and convert the image to a
compatible format.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.FingerprintCommand._ctor">
            <summary>Creates a new instance of
FingerprintCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.FingerprintCommand._ctor">
            <summary>Creates a new instance of FingerprintCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.FingerprintCommand._ctor(System.Double)">
            <summary>Creates a new instance of FingerprintCommand
specifying depth.</summary>
            <param name="depth">A positive number indicating the depth of the effect.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.FingerprintCommand._ctor(System.Double,System.Int32,System.Boolean)">
            <summary>Creates a new instance of FingerprintCommand
specifying depth, filterSize and dilation.</summary>
            <param name="depth">A positive number indicating the depth of the effect.</param>
            <param name="filterSize">Gets or sets the filter size of the effect. Should be an odd
number greater than or equal to 3.</param>
            <param name="dilation">Indicates if dilation should be used.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.FingerprintCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies the FingerprintCommand using the
current settings to the source image.</summary>
            <returns>A new AtalaImage containing the processed
image. null (Nothing in VB) if cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.FingerprintCommand.Depth">
            <summary>Gets or sets a positive number indicating the depth of the
effect.</summary>
            <remarks>50 is a good number to start with.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.FingerprintCommand.Dilation">
            <summary>Gets or sets a value indicating if dilation mode should be
used.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.FingerprintCommand.FilterSize">
            <summary>Gets or sets the filter size of the effect.</summary>
            <remarks>Values of 3, 5 and 7 are good choices.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.FloodFillCommand">
            <summary>Performs a flood fill on an image. You can use it to fill an
area of an image surrounded by FillColor by setting Mode to Edge,
or you can fill the pixel color at Position with FillColor.</summary>
            <remarks>    This command requires one of the following image
    formats:
    
        PixelFormat24bppBgr
        PixelFormat32bppBgr
        PixelFormat32bppBgra
    
    If any other image format is passed, you will recieve a
    System.ArgumentException.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.FloodFillCommand._ctor">
            <summary>Creates a new instance of FloodFillCommand specifying
position, fillColor, tolerance and mode.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.FloodFillCommand._ctor">
            <summary>Creates a new instance of FloodFillCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.FloodFillCommand._ctor(System.Drawing.Point,System.Drawing.Color,System.Double,Atalasoft.Imaging.ImageProcessing.ColorMatchMode)">
            <summary>Creates a new instance of FloodFillCommand specifying the
position, fill color, tolerance and color match mode.</summary>
            <param name="position">The X, Y pixel position where the fill should start.</param>
            <param name="fillColor">The color used for the fill.</param>
            <param name="tolerance">The percentage of color variation. (0 to 100)</param>
            <param name="mode">The ColorMatchMode used for the fill.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.FloodFillCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies the FloodFillCommand using the current settings to
the source image.</summary>
            <returns>null (Nothing in Visual
Basic)</returns>
            <remarks>This method uses in place processing. That is, it
modifies the source image passed to it, rather than creating a new
image to hold the result. Therefore, the return result is always
null (Nothing in Visual
Basic).</remarks>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.FloodFillCommand.FillColor">
            <summary>Gets or sets the Color used for the
fill.</summary>
            <remarks>    If
    
    Mode is Edge, this color also represents the the edge color
    and will fill the area until it finds the edge color.
    If Mode is Surface, this color will be used to fill the
    pixel color located at
    
    Position until it reaches a different color.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.FloodFillCommand.InPlaceProcessing">
            <summary>    Gets a value indicating if the source image data is
    processed in-place as opposed to returning a new image.</summary>
            <remarks>By default, this value is false. Implementing classes should
override this and set it to true when processing the source image
directly. When this value is true,

ApplyToImage returns null.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.FloodFillCommand.Mode">
            <summary>Gets or sets the ColorMatchMode used for the
fill.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.FloodFillCommand.Position">
            <summary>Gets or sets the X, Y pixel position where the fill should
start.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.FloodFillCommand.Tolerance">
            <summary>Gets or sets the percentage of color variation.</summary>
            <remarks>Valid values are 0 to 100. A value of 0 requires an exact
color match, where a value of 100 will match any color.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.GammaCommand">
            <summary>Increases or descreases the gamma value of an image.</summary>
            <remarks>This method requires a continuous tone image.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GammaCommand._ctor">
            <summary>Creates a new instance of the GammaCommand object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GammaCommand._ctor">
            <summary>Creates a new instance of GammaCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GammaCommand._ctor(System.Double)">
            <summary>Creates a new instance of GammaCommand specifying the gamma
level.</summary>
            <param name="gammaLevel">The gamma correction level. A value &lt; 1 decreases
brightness and a value &gt; 1 increases brightness.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GammaCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies the GammaCommand using the current settings to the
source image.</summary>
            <returns>null (Nothing in Visual
Basic)</returns>
            <remarks>This method uses in place processing. That is, it
modifies the source image passed to it, rather than creating a new
image to hold the result. Therefore, the return result is always
null (Nothing in Visual
Basic).</remarks>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.GammaCommand.GammaLevel">
            <summary>Gets or sets the gamma correction level.</summary>
            <remarks>    This value must be greater than or equal to 0. The effect
    of this value is as follows:
    
        &lt; 1 - decreases brightness
        &gt; 1 - increases brightness
        = 1 - no change.
    </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.GammaCommand.InPlaceProcessing">
            <summary>    Gets a value indicating if the source image data is
    processed in-place as opposed to returning a new image.</summary>
            <remarks>By default, this value is false. Implementing classes should
override this and set it to true when processing the source image
directly. When this value is true,

ApplyToImage returns null.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.GauzyCommand">
            <summary>Generate a soft focus, gauzed image.</summary>
            <remarks>This method requires a continuous tone image. If the source
image is not continuous, it will raise the
ChangePixelFormat event and convert the image to a
compatible format.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GauzyCommand._ctor">
            <summary>Creates a new instance of GauzyCommand specifying blurAmount,
sharpAmount, clarity, mode and regionOfInterest.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GauzyCommand._ctor">
            <summary>Creates a new instance of GauzyCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GauzyCommand._ctor(System.Double,System.Double,System.Double,Atalasoft.Imaging.ImageProcessing.Effects.GauzyMode)">
            <summary>Creates a new instance of GauzyCommand specifying the blur
and sharpen amounts.</summary>
            <param name="blurAmount">The amount of blur to apply. (0 to 100)</param>
            <param name="sharpAmount">The amount of original pixels in the image. (0 to 100)</param>
            <param name="clarity">The amount to clarify the result. (0 to 100)</param>
            <param name="mode">    The
    
    GauzyMode to use.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GauzyCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies the GauzyCommand Effects using the current settings
to the source image.</summary>
            <returns>A new AtalaImage containing the processed
image. null (Nothing in VB) if cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.GauzyCommand.BlurAmount">
            <summary>Gets or sets the amount of blur to apply.</summary>
            <remarks>Valid values are from 0 to 100.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.GauzyCommand.Clarity">
            <summary>Gets or sets the amount to clarify the result.</summary>
            <remarks>Valid values are from 0 to 100.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.GauzyCommand.Mode">
            <summary>Gets or sets the

GauzyMode to use.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.GauzyCommand.SharpAmount">
            <summary>Gets or sets the amount of original pixels in the
image.</summary>
            <remarks>Valid values are from 0 to 100.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.HalftoneCommand">
            <summary>Generates a black and white image dithered to "halftone"
dots.</summary>
            <remarks>This method requires a 24-bit image.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HalftoneCommand._ctor">
            <summary>Creates a new instance of the HalftoneCommand object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HalftoneCommand._ctor">
            <summary>Creates a new instance of HalftoneCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HalftoneCommand._ctor(System.Int32,System.Boolean)">
            <summary>Creates a new instance of HalftoneCommand specifying the dot
size and smoothing values.</summary>
            <param name="maxDotSize">The maximum size of the dots.</param>
            <param name="smoothDots">A value indicating if the dots will be smooth or
sharp.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HalftoneCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies HalftoneCommand using the current settings to the
source image.</summary>
            <returns>null (Nothing in Visual
Basic)</returns>
            <remarks>This method uses in place processing. That is, it
modifies the source image passed to it, rather than creating a new
image to hold the result. Therefore, the return result is always
null (Nothing in Visual
Basic).</remarks>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HalftoneCommand.InPlaceProcessing">
            <summary>    Gets a value indicating if the source image data is
    processed in-place as opposed to returning a new image.</summary>
            <remarks>By default, this value is false. Implementing classes should
override this and set it to true when processing the source image
directly. When this value is true,

ApplyToImage returns null.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HalftoneCommand.MaxDotSize">
            <summary>Gets or sets the maximum size of the dots.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HalftoneCommand.SmoothDots">
            <summary>Gets or sets a value indicating if the dots will be smooth or
sharp.</summary>
            <remarks>If false, dots are solid black, with sharp
edges.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.HistogramEqualizeCommand">
            <summary>Performs histogram equalization on an image.</summary>
            <remarks>    
        This function will re-distribute the pixel values across
        the given range so that there will be (approximately) equal
        numbers of pixels with each pixel value (0 to 255). Input
        pixels with values above or below the threshold values are
        not modified in the output. 
        Can be used to extend the dynamic range of an
        image.
        When applied to multi-channel (RGB, RGBA) images,
        each channel is modified independently of the others;
        because of this, colors may shift. See
        
        BrightnessHistogramEqualizeCommand for a similar
        command that doesn't cause this color shift.
        This command processes the image
        In-Place.
    </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HistogramEqualizeCommand._ctor">
            <summary>Creates a new instance of HistogramEqualizeCommand specifying
the threshold values.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HistogramEqualizeCommand._ctor">
            <summary>Creates a new instance of HistogramEqualizeCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HistogramEqualizeCommand._ctor(System.Int32,System.Int32)">
            <summary>Creates a new instance of HistogramEqualizeCommand specifying
the threshold levels.</summary>
            <param name="lowThreshold">Pixels are uneffected below this value. (0 - 255)</param>
            <param name="highThreshold">Pixels are uneffected above this value. (0 - 255)</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HistogramEqualizeCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies HistogramEqualizeCommand using the current settings
to the source image.</summary>
            <returns>    null (Nothing in Visual
    Basic)</returns>
            <remarks>This method uses in place processing. That is, it
modifies the source image passed to it, rather than creating a new
image to hold the result. Therefore, the return result is always
null (Nothing in Visual
Basic).</remarks>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HistogramEqualizeCommand.ChannelsToProcess">
            <summary>Gets or sets a bit flag indicating the channels to
process.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HistogramEqualizeCommand.HighThreshold">
            <summary>Gets or sets a high threshold value above which pixels are
uneffected.</summary>
            <remarks>Valid values are from 0 to 255.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HistogramEqualizeCommand.InPlaceProcessing">
            <summary>    Gets a value indicating if the source image data is
    processed in-place as opposed to returning a new image.</summary>
            <remarks>By default, this value is false. Implementing classes should
override this and set it to true when processing the source image
directly. When this value is true,

ApplyToImage returns null.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HistogramEqualizeCommand.LowThreshold">
            <summary>Gets or sets a low threshold value below which pixels are
uneffected.</summary>
            <remarks>Valid values are from 0 to 255.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand">
            <summary>Performs a histogram stretch on an image.</summary>
            <remarks>    
        Re-distribute the pixel values across the given range by
        first setting values above and below the thresholds to zero
        and 255 respectively and then scaling the remaining values
        to span the entire zero to 255 range. 
        This can be used to increase the contrast and extend
        the dynamic range of an image.
        When applied to multi-channel (RGB, RGBA) images,
        each channel is modified independently of the others;
        because of this, colors may shift. See
        
        BrightnessHistogramStretchCommand for a similar command
        that doesn't cause this color shift.
    </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand._ctor">
            <summary>Creates a new instance of HistogramStretchCommand specifying
the limit values.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand._ctor">
            <summary>Creates a new instance of HistogramStretchCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand._ctor(System.Double,System.Double)">
            <summary>Creates a new instance of HistogramStretchCommand specifying
the low and high limits.</summary>
            <param name="lowLimit">Percent of pixels to set to 0. (0 to 100)</param>
            <param name="highLimit">Percent of pixels to set to 255. (0 to 100)</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies HistogramStretchCommand to the source image.</summary>
            <returns>null (Nothing in Visual
Basic)</returns>
            <remarks>This method uses in place processing. That is, it
modifies the source image passed to it, rather than creating a new
image to hold the result. Therefore, the return result is always
null (Nothing in Visual
Basic).</remarks>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand.ChannelsToProcess">
            <summary>Gets or sets a bit flag indicating the channels to
process.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand.HighLimit">
            <summary>Gets or sets the percent of pixels to set to 255.</summary>
            <remarks>Valid values are from 0 to 100.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand.InPlaceProcessing">
            <summary>    Gets a value indicating if the source image data is
    processed in-place as opposed to returning a new image.</summary>
            <remarks>By default, this value is false. Implementing classes should
override this and set it to true when processing the source image
directly. When this value is true,

ApplyToImage returns null.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand.LowLimit">
            <summary>Gets or sets the percent of pixels to set to 0.</summary>
            <remarks>Valid values are from 0 to 100.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand">
            <summary>Corrects the tonal range and color balance by adjusting the
shadow, midtone, and highlights of an image.</summary>
            <remarks>The shadow, midtone, and highlights are often manually
determined from an "eyedropper" tool.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand._ctor">
            <summary>Creates a new instance of LevelsCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand._ctor(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)">
            <summary>Creates a new instance of LevelsCommand specifying the shadow
and highlight colors, and the output range.</summary>
            <param name="shadowColor">The black point in the image used as an input clipping
point.</param>
            <param name="highlightColor">The white point in the image used as an input clipping
point.</param>
            <param name="outputRangeLow">The dark color value to stretch the histogram to.</param>
            <param name="outputRangeHigh">The light color value to stretch the histogram to.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand._ctor(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)">
            <summary>Creates a new instance of LevelsCommand specifying shadow,
midtone and highlight colors, and the output range.</summary>
            <param name="shadowColor">The black point in the image used as an input clipping
point.</param>
            <param name="midtoneColor">The gray point in the image used as a gamma
adjustment.</param>
            <param name="highlightColor">The white point in the image used as an input clipping
point.</param>
            <param name="outputRangeLow">The dark color value to stretch the histogram to.</param>
            <param name="outputRangeHigh">The light color value to stretch the histogram to.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand._ctor(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,Atalasoft.Imaging.ImageProcessing.Effects.GammaColor)">
            <summary>Creates a new instance of LevelsCommand specifying shadow
color, highlight color, output range and gamma.</summary>
            <param name="shadowColor">The black point in the image used as an input clipping
point.</param>
            <param name="highlightColor">The white point in the image used as an input clipping
point.</param>
            <param name="outputRangeLow">The dark color value to stretch the histogram to.</param>
            <param name="outputRangeHigh">The light color value to stretch the histogram to.</param>
            <param name="gamma">The gamma adjustment to apply when running the filter.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies LevelsCommand to the source image.</summary>
            <returns>null (Nothing in Visual
Basic)</returns>
            <remarks>This method uses in place processing. That is, it
modifies the source image passed to it, rather than creating a new
image to hold the result. Therefore, the return result is always
null (Nothing in Visual
Basic).</remarks>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.Gamma">
            <summary>Gets or sets the gamma adjustment to apply when running the
filter.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.HighlightColor">
            <summary>Gets or sets the white point in the image used as an input
clipping point.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.InPlaceProcessing">
            <summary>    Gets a value indicating if the source image data is
    processed in-place as opposed to returning a new image.</summary>
            <remarks>By default, this value is false. Implementing classes should
override this and set it to true when processing the source image
directly. When this value is true,

ApplyToImage returns null.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.MidtoneColor">
            <summary>Gets or sets the gray point in the image used as a gamma
adjustment.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.OutputRangeHigh">
            <summary>Gets or sets the light color value to stretch the histogram
to.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.OutputRangeLow">
            <summary>Gets or sets the dark color value to stretch the histogram
to.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.ShadowColor">
            <summary>Gets or sets the black point in the image used as an input
clipping point.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.MosaicCommand">
            <summary>Generate a mosaic (large pixel) image.</summary>
            <remarks>This method requires a 24 or 32 bit image.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.MosaicCommand._ctor">
            <summary>Creates a new instance of MosaicCommand specifying
squareSize.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.MosaicCommand._ctor">
            <summary>Creates a new instance of MosaicCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.MosaicCommand._ctor(System.Int32)">
            <summary>Creates a new instance of MosaicCommand specifying the square
size.</summary>
            <param name="squareSize">The size of the mosaic tiles.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.MosaicCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies MosaicCommand using the current settings to the
source image.</summary>
            <returns>null (Nothing in Visual
Basic)</returns>
            <remarks>This method uses in place processing. That is, it
modifies the source image passed to it, rather than creating a new
image to hold the result. Therefore, the return result is always
null (Nothing in Visual
Basic).</remarks>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.MosaicCommand.InPlaceProcessing">
            <summary>    Gets a value indicating if the source image data is
    processed in-place as opposed to returning a new image.</summary>
            <remarks>By default, this value is false. Implementing classes should
override this and set it to true when processing the source image
directly. When this value is true,

ApplyToImage returns null.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.MosaicCommand.SquareSize">
            <summary>Gets or sets the size of the mosaic tiles.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand">
            <summary>Derives from ImageCommand and adds region of
interest capability to ImageCommands.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.OilPaintCommand">
            <summary>This effect makes an image appear as if it's an oil
painting.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.OilPaintCommand._ctor">
            <summary>Creates a new instance of OilPaintCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.OilPaintCommand._ctor(System.Int32,System.Int32)">
            <summary>Creates a new instance of OilPaintCommand specifying brush
width and max density.</summary>
            <param name="brushWidth">The width of the virtual brush.</param>
            <param name="maxDensity">The internal quantization level.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.OilPaintCommand._ctor(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>Creates a new instance of OilPaintCommand specifying the
brush width, max density, color edges and contrast
enhancement.</summary>
            <param name="brushWidth">The width of the virtual brush.</param>
            <param name="maxDensity">The internal quantization level.</param>
            <param name="blendColorEdges">A value indicating whether the edges use color
blending.</param>
            <param name="enhanceContrast">A value indicating whether the image constrat is
enhanced.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.OilPaintCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies OilPaintCommand to the source image.</summary>
            <returns>A new AtalaImage containing the processed
image. null (Nothing in VB) if cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.OilPaintCommand.BlendColorEdges">
            <summary>Gets or sets a value indicating whether the edges use color
blending.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.OilPaintCommand.BrushWidth">
            <summary>Gets or set the width of the virtual brush.</summary>
            <remarks>Low number work best ( 3, 4, 5, ... ).</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.OilPaintCommand.EnhanceContrast">
            <summary>Gets or sets a value indicating whether the image constrat is
enhanced.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.OilPaintCommand.MaxDensity">
            <summary>Gets or sets the internal quantization level.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.PosterizeCommand">
            <summary>Generate an image made up of primary and secondary colors of
the source image.</summary>
            <remarks>This method requires a 24-bit image.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.PosterizeCommand._ctor">
            <summary>Creates a new instance of
PosterizeCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.PosterizeCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies PosterizeCommand using the current
settings to the source image.</summary>
            <returns>null (Nothing in Visual
Basic)</returns>
            <remarks>This method uses in place processing. That is, it
modifies the source image passed to it, rather than creating a new
image to hold the result. Therefore, the return result is always
null (Nothing in Visual
Basic).</remarks>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.PosterizeCommand.InPlaceProcessing">
            <summary>    Gets a value indicating if the source image data is
    processed in-place as opposed to returning a new image.</summary>
            <remarks>By default, this value is false. Implementing classes should
override this and set it to true when processing the source image
directly. When this value is true,

ApplyToImage returns null.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand">
            <summary>Attempt to eliminate "red-eye" from a region of an RGB
image.</summary>
            <remarks>You must select an "eye" region from the image, then choose a
saturation level and color range. These should be done
interactively, as the color and saturation of the "red-eye" effect
varies greatly between images. See the Rubberbanding features in
WinControls for selecting the eye region.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand._ctor">
            <summary>Creates a new instance of RedEyeRemovalCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand._ctor(System.Int32)">
            <summary>Creates a new instance of RedEyeRemovalCommand specifying the
saturation threshold.</summary>
            <param name="saturationThreshold">The percent that red is allowed to dominates the other colors
before it is reduced.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand._ctor(System.Int32,System.Int32)">
            <summary>Creates a new instance of RedEyeRemovalCommand specifying the
saturation threshold and color range.</summary>
            <param name="saturationThreshold">The percent that red is allowed to dominates the other colors
before it is reduced.</param>
            <param name="colorRange">The red band width.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies RedEyeRemovalCommand to the source image.</summary>
            <returns>null (Nothing in Visual
Basic)</returns>
            <remarks>This method uses in place processing. That is, it
modifies the source image passed to it, rather than creating a new
image to hold the result. Therefore, the return result is always
null (Nothing in Visual
Basic).</remarks>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand.ColorRange">
            <summary>Gets or sets the red band width.</summary>
            <remarks>Higher values cause pixels with more cyan and yellow to be
reduced.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand.InPlaceProcessing">
            <summary>    Gets a value indicating if the source image data is
    processed in-place as opposed to returning a new image.</summary>
            <remarks>By default, this value is false. Implementing classes should
override this and set it to true when processing the source image
directly. When this value is true,

ApplyToImage returns null.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand.SaturationThreshold">
            <summary>Gets or sets the percent that red is allowed to dominates the
other colors before it is reduced.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.ReduceColorsCommand">
            <summary>Use this command to convert an image into an 8-bit indexed
image with a specified number of colors.</summary>
            <remarks>This method requires a 24 or 32 bit image. If the source
image is of a different format, it will raise the
ChangePixelFormat event and convert the image to a
compatible format.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReduceColorsCommand._ctor">
            <summary>Creates a new instance of the ReduceColorsCommand
object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReduceColorsCommand._ctor">
            <summary>Creates a new instance of ReduceColorsCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReduceColorsCommand._ctor(System.Int32)">
            <summary>Creates a new instance of
ReduceColorsCommand specifying
colors.</summary>
            <param name="colors">The number of colors you want the resulting image to
contain.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReduceColorsCommand._ctor(System.Int32,Atalasoft.Imaging.ImageProcessing.DitheringMode,System.Int32)">
            <summary>Creates a new instance of
ReduceColorsCommand specifying
colors, ditherMode, and ditherMaxError.</summary>
            <param name="colors">The number of colors you want the resulting image to
contain.</param>
            <param name="ditherMode">The type of

DitheringMode to perform.</param>
            <param name="ditherMaxError">The maximum error value that can be carried between pixels.
(0 to 127)</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReduceColorsCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies the ReduceColorsCommand Effects using the current
settings to the source image.</summary>
            <returns>A new AtalaImage containing the processed
image. null (Nothing in VB) if cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.ReduceColorsCommand.Colors">
            <summary>Gets or sets the number of colors you want the resulting
image to contain.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.ReduceColorsCommand.DitherMaxError">
            <summary>Gets or sets the maximum error value that can be carried
between pixels.</summary>
            <remarks>Valid values are from 0 to 127.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.ReduceColorsCommand.DitherMode">
            <summary>Gets or sets the type of

DitheringMode to perform.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand">
            <summary>Replaces a color in an image with another using the specified
color tolerance.</summary>
            <remarks>This method requires a continuous tone or an 8-bit indexed
image.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand._ctor">
            <summary>Creates a new instance of ReplaceColorCommand specifying
oldColor, newColor, and tolerance.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand._ctor">
            <summary>Creates a new instance of ReplaceColorCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand._ctor(System.Drawing.Color,System.Drawing.Color,System.Double)">
            <summary>Creates a new instance of ReplaceColorCommand specifying
color to replace, the new color and tolerance.</summary>
            <param name="oldColor">The color you want to replace.</param>
            <param name="newColor">The color used to replace the old color.</param>
            <param name="tolerance">The maximum color distance to match. A value of 0 will
provide strict matching. (0 to 100)</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies ReplaceColorCommand using the current settings to the
source image.</summary>
            <returns>null (Nothing in Visual
Basic)</returns>
            <remarks>This method uses in place processing. That is, it
modifies the source image passed to it, rather than creating a new
image to hold the result. Therefore, the return result is always
null (Nothing in Visual
Basic).</remarks>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand.InPlaceProcessing">
            <summary>    Gets a value indicating if the source image data is
    processed in-place as opposed to returning a new image.</summary>
            <remarks>By default, this value is false. Implementing classes should
override this and set it to true when processing the source image
directly. When this value is true,

ApplyToImage returns null.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand.NewColor">
            <summary>Gets or sets the color used to replace the old color.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand.OldColor">
            <summary>Gets or sets the color you want to replace.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand.Tolerance">
            <summary>Gets or sets the maximum color distance to match. A value of
0 will provide strict matching.</summary>
            <remarks>Valid values are from 0 to 100.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.SaturationCommand">
            <summary>Modify the saturation levels of an image.</summary>
            <remarks>This method requires a continuous tone image.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.SaturationCommand._ctor">
            <summary>Creates a new instance of SaturationCommand specifying
saturationLevel.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.SaturationCommand._ctor">
            <summary>Creates a new instance of SaturationCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.SaturationCommand._ctor(System.Double)">
            <summary>Creates a new instance of SaturationCommand specifying the
saturation level.</summary>
            <param name="saturationLevel">The saturation level to apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.SaturationCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies the SaturationCommand using the current settings to
the source image.</summary>
            <returns>null (Nothing in Visual
Basic)</returns>
            <remarks>This method uses in place processing. That is, it
modifies the source image passed to it, rather than creating a new
image to hold the result. Therefore, the return result is always
null (Nothing in Visual
Basic).</remarks>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.SaturationCommand.InPlaceProcessing">
            <summary>    Gets a value indicating if the source image data is
    processed in-place as opposed to returning a new image.</summary>
            <remarks>By default, this value is false. Implementing classes should
override this and set it to true when processing the source image
directly. When this value is true,

ApplyToImage returns null.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.SaturationCommand.SaturationLevel">
            <summary>Gets or sets the saturation level to apply.</summary>
            <remarks>    Any value is valid with 0 being fully
    desaturated, 1 with no change, greater than 1 increases
    saturation. Use a value less than zero for photo-negative
    resaturation.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleCommand">
            <summary>Represents the base class for all image processing routines
that modify image data.</summary>
            <remarks>    An ImageCommand can be used to apply any type of effect
    onto an existing image. The
    
    ApplyToImage method can be used to process the command. If
    the InPlaceProcessing value is true, then the
    source image will be processed and the ApplyToImage
    method will always return null, otherwise a new image will be
    returned.
    Classes that inherit ImageCommand can be
    used in the
    
    ApplyCommand method in the Workspace.
    See Extending ImageCommands for more information on
    creating custom commands.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.SolarizeCommand">
            <summary>    Use this command to adjust the curves to generate a
    classic "solarize" effect.</summary>
            <remarks>This method requires a continuous tone image.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.SolarizeCommand._ctor">
            <summary>Creates a new instance of
SolarizeCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.SolarizeCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies SolarizeCommand using the current settings to the
source image.</summary>
            <returns>null (Nothing in Visual
Basic)</returns>
            <remarks>This method uses in place processing. That is, it
modifies the source image passed to it, rather than creating a new
image to hold the result. Therefore, the return result is always
null (Nothing in Visual
Basic).</remarks>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.SolarizeCommand.InPlaceProcessing">
            <summary>    Gets a value indicating if the source image data is
    processed in-place as opposed to returning a new image.</summary>
            <remarks>By default, this value is false. Implementing classes should
override this and set it to true when processing the source image
directly. When this value is true,

ApplyToImage returns null.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.StippleCommand">
            <summary>This command generates a bumped image effect.</summary>
            <remarks>This method requires a continuous tone image. If the source
image is not continuous, it will raise the
ChangePixelFormat event and convert the image to a
compatible format.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.StippleCommand._ctor">
            <summary>Creates a new instance of

StippleCommand specifying size, filter, and mode.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.StippleCommand._ctor">
            <summary>Creates a new instance of StippleCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.StippleCommand._ctor(System.Int32,Atalasoft.Imaging.ImageProcessing.Effects.StippleFilterType,Atalasoft.Imaging.ImageProcessing.Effects.StippleMode)">
            <summary>Creates a new instance of StippleCommand specifying the size,
filter and stipple mode.</summary>
            <param name="size">The size of the spots.</param>
            <param name="filter">    The
    
    StippleFilterType used to control blurring.</param>
            <param name="mode">    The
    
    StippleMode to use for this command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.StippleCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies the StippleCommand Effects using the current settings
to the source image.</summary>
            <returns>A new AtalaImage containing the processed
image. null (Nothing in VB) if cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.StippleCommand.Filter">
            <summary>Gets or sets the

StippleFilterType used to control blurring.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.StippleCommand.Mode">
            <summary>Gets or sets the

StippleMode to use for this command.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.StippleCommand.Size">
            <summary>Gets or sets the size of the spots.</summary>
            <remarks>Valid values are from 0 to 100.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.TintGrayscaleCommand">
            <summary>    Converts a grayscale image into a RGB or RGBA image and
    applies a color tint in the same process.</summary>
            <remarks>This method requires an 8-bit or 16-bit grayscale w/ alpha
image.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.TintGrayscaleCommand._ctor">
            <summary>Creates a new instance of

TintGrayscaleCommand specifying colorToTint.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.TintGrayscaleCommand._ctor">
            <summary>Creates a new instance of TintGrayscaleCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.TintGrayscaleCommand._ctor(System.Drawing.Color)">
            <summary>Creates a new instance of TintGrayscaleCommand specifying the
tint color.</summary>
            <param name="colorToTint">The color to tint the output.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.TintGrayscaleCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies the TintGrayscaleCommand using the current settings
to the source image.</summary>
            <returns>A new AtalaImage containing the processed
image. null (Nothing in VB) if cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.TintGrayscaleCommand.ColorToTint">
            <summary>Gets or sets the color to tint the output.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintCommand">
            <summary>This command modifies an image to appear as if it was drawn
using watercolors.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintCommand._ctor">
            <summary>Creates a new instance of WatercolorTintCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintCommand._ctor(System.Double,Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintMode)">
            <summary>Creates a new instance of WatercolorTintCommand specifying
the blur and tint mode.</summary>
            <param name="blur">The amount of blurring to add during processing.</param>
            <param name="mode">Indicates if the image should be lightened or
darkened.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintCommand._ctor(System.Double,Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintMode,System.Boolean)">
            <summary>Creates a new instance of WatercolorTintCommand specifying
blur, tint mode and contrast enhancement.</summary>
            <param name="blur">The amount of blurring to add during processing.</param>
            <param name="mode">Indicates if the image should be lightened or
darkened.</param>
            <param name="enhanceContrast">A value indicating whether the image contrast is enhanced
during processing.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies WatercolorTintCommand using the current settngs to
the source image.</summary>
            <returns>A new AtalaImage containing the processed
image. null (Nothing in VB) if cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintCommand.Blur">
            <summary>Gets or sets the amount of blurring to add during
processing.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintCommand.EnhanceContrast">
            <summary>Gets or sets a value indicating whether the image contrast is
enhanced during processing.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintCommand.Tint">
            <summary>Gets or sets a value indicating if the image should be
lightened or darkened.</summary>
        </member>
        <member name="N:Atalasoft.Imaging.ImageProcessing.Fft">
            <summary>Contains classes for specialized filters that are processed
using Fast Fourier Transformations (FFT).</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Fft.BandPassFftCommand">
            <summary>Combines low pass and high pass to filters at a low and high
cutoff radius.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.BandPassFftCommand._ctor">
            <summary>Initializes a new instance of
BandPassFftCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.BandPassFftCommand._ctor">
            <summary>Initializes a new instance of BandPassFftCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.BandPassFftCommand._ctor(System.Double,System.Double)">
            <summary>Initializes a new BandPassFftCommand specifying the cut off
values.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.BandPassFftCommand.ApplyToGrid(Atalasoft.Imaging.ImageProcessing.Fft.FftGrid)">
            <summary>Applies BandPassFftComand to a grid.</summary>
            <returns>null (Nothing in Visual
Basic)</returns>
            <param name="grid">The FftGrid to process.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.BandPassFftCommand.HighCutoff">
            <summary>Gets or sets the high cutoff radius in the frequency
domain.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.BandPassFftCommand.LowCutoff">
            <summary>Gets or sets the low cutoff radius in the frequency
domain.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighBoostFftCommand">
            <summary>Similar to the high pass butterworth filter with an additive
offset and multiplier.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighBoostFftCommand._ctor">
            <summary>Initializes a new instance of
ButterworthHighBoostFftCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighBoostFftCommand._ctor">
            <summary>Initializes a new instance of
ButterworthHighBoostFftCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighBoostFftCommand._ctor(System.Double,System.Double,System.Double)">
            <summary>Initializes a new instance of
ButterworthHighBoostFftCommand specifying the
cutoff radius, factor, and offset.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighBoostFftCommand.ApplyToGrid(Atalasoft.Imaging.ImageProcessing.Fft.FftGrid)">
            <summary>Applies the filter on an FftGrid.</summary>
            <returns>null (Nothing in Visual
Basic)</returns>
            <param name="grid">The FftGrid to process.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighBoostFftCommand.Cutoff">
            <summary>Gets or sets the cutoff radius in the frequency
domain.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighBoostFftCommand.Factor">
            <summary>Gets or sets the multiplier applied to the high pass
filter.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighBoostFftCommand.Offset">
            <summary>Gets or sets the offset applied to the high pass
filter.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighPassFftCommand">
            <summary>Similar to the ideal high pass filter, but with smoother
transitions and less "ringing".</summary>
            <remarks>High pass filters clip low frequencies tending to sharpen
images.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighPassFftCommand._ctor">
            <summary>Initializes a new instance of
ButterworthHighPassFftCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighPassFftCommand._ctor">
            <summary>Initializes a new instance of
ButterworthHighPassFftCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighPassFftCommand._ctor(System.Double,System.Double)">
            <summary>Initializes a new instance of
ButterworthHighPassFftCommand specifying the
cutoff radius and order.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighPassFftCommand.ApplyToGrid(Atalasoft.Imaging.ImageProcessing.Fft.FftGrid)">
            <summary>Applies the filter on an FftGrid.</summary>
            <returns>null (Nothing in Visual
Basic)</returns>
            <param name="grid">The FftGrid to process.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighPassFftCommand.Cutoff">
            <summary>Gets or sets the cutoff radius in the frequency
domain.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighPassFftCommand.Order">
            <summary>Gets or sets the function order.</summary>
            <remarks>A good value to start with is 2.0.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthLowPassFftCommand">
            <summary>Similar to the ideal low pass filter, but with smoother
transitions and less "ringing".</summary>
            <remarks>Low pass filters clip high frequencies tending to blur
images.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthLowPassFftCommand._ctor">
            <summary>Initializes a new instance of
ButterworthLowPassFftCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthLowPassFftCommand._ctor">
            <summary>Initializes a new instance of
ButterworthLowPassFftCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthLowPassFftCommand._ctor(System.Double,System.Double)">
            <summary>Initializes a new instance of
ButterworthLowPassFftCommand specifying the cutoff
radius and order.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthLowPassFftCommand.ApplyToGrid(Atalasoft.Imaging.ImageProcessing.Fft.FftGrid)">
            <summary>Applies the filter on an FftGrid.</summary>
            <returns>null (Nothing in Visual
Basic)</returns>
            <param name="grid">The FftGrid to process.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthLowPassFftCommand.Cutoff">
            <summary>Gets or sets the cutoff radius in the frequency
domain.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthLowPassFftCommand.Order">
            <summary>Gets or sets the function order.</summary>
            <remarks>A good value to start with is 2.0.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Fft.FftCommand">
            <summary>The base class used for all FFT (Fast Fourier Transform)
filters for frequency domain image processing.</summary>
            <remarks>Includes the method ApplyToGrid which allows
multiple FFT filters to be applied without converting back and
forth to the frequency domain. Can also be used normally with the
ApplyToImage method for processing a single FFT
filter.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.FftCommand.ApplyToGrid(Atalasoft.Imaging.ImageProcessing.Fft.FftGrid)">
            <summary>Applies the filter on an FftGrid.</summary>
            <returns>null (Nothing in Visual
Basic)</returns>
            <param name="grid">The FftGrid to process.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.FftCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies the filter on an AtalaImage.</summary>
            <remarks>    This method will convert the image to a
    FftGrid, process the grid, then convert it
    back.</remarks>
            <returns>A new AtalaImage containing the processed
image. null (Nothing in VB) if cancelled.</returns>
            <param name="image">The grayscale AtalaImage to process.</param>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Fft.FftGrid">
            <summary>The FftGrid is used as an intermediate step
in FFT processing. It transforms a grayscale image into the FFT
domain, and is required prior to all FFT filters.</summary>
            <remarks>When using the Grid as the intermediate step, multiple FFT
filters can be applied. Each FFT Command has an ApplyToGrid method
that uses an FftGrid to process. Once the image
has completed processing, be sure to return the changed image with
the GetProcessedImage method.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.FftGrid._ctor">
            <remarks>Initializes a new instance of
FftGrid.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.FftGrid._ctor(Atalasoft.Imaging.AtalaImage)">
            <param name="image">The grayscale AtalaImage to initialize the
FftGrid with.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.FftGrid.Dispose">
            <summary>Cleans up unmanaged resources.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.FftGrid.GetNextPowerOfTwo(System.Int32)">
            <summary>A helper function that retrieves the next power of two (128,
256, 512, 1024, etc). x^2</summary>
            <returns>The next power of two.</returns>
            <param name="value">    The value to use when testing the next power of
    two.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.FftGrid.GetProcessedImage">
            <summary>Returns the processed image from the frequency domain.</summary>
            <returns>The processed image.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.FftGrid.Height">
            <summary>Gets the height of this FftGrid.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.FftGrid.Image">
            <summary>Gets or sets the
AtalaImage
associated with this

FftGrid.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.FftGrid.Width">
            <summary>Gets the width of this FftGrid.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighBoostFftCommand">
            <summary>Similar to the high pass gaussian filter with an additive
offset and multiplier.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighBoostFftCommand._ctor">
            <summary>Initializes a new instance of
GaussianHighBoostFftCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighBoostFftCommand._ctor">
            <summary>Initializes a new instance of
GaussianHighBoostFftCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighBoostFftCommand._ctor(System.Double,System.Double,System.Double)">
            <summary>Initializes a new instance of
GaussianHighBoostFftCommand specifying cutoff
radius, factor, and offset.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighBoostFftCommand.ApplyToGrid(Atalasoft.Imaging.ImageProcessing.Fft.FftGrid)">
            <summary>Applies the filter on an FftGrid.</summary>
            <returns>null (Nothing in Visual
Basic)</returns>
            <param name="grid">The FftGrid to process.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighBoostFftCommand.Cutoff">
            <summary>Gets or sets the cutoff radius in the frequency
domain.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighBoostFftCommand.Factor">
            <summary>Gets or sets the multiplier applied to the high pass
filter.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighBoostFftCommand.Offset">
            <summary>Gets or sets the offset applied to the high pass
filter.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighPassFftCommand">
            <summary>Similar to the ideal high pass filter, but with smoother
transitions and less "ringing".</summary>
            <remarks>High pass filters clip low frequencies tending to sharpen
images.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighPassFftCommand._ctor">
            <summary>Initializes a new instance of
GaussianHighPassFftCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighPassFftCommand._ctor">
            <summary>itializes a new instance of
GaussianHighPassFftCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighPassFftCommand._ctor(System.Double)">
            <summary>itializes a new instance of
GaussianHighPassFftCommand specifying the cutoff
frequency.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighPassFftCommand.ApplyToGrid(Atalasoft.Imaging.ImageProcessing.Fft.FftGrid)">
            <summary>Applies the filter on an FftGrid.</summary>
            <returns>null (Nothing in Visual
Basic)</returns>
            <param name="grid">The FftGrid to process.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighPassFftCommand.Cutoff">
            <summary>Gets or sets the cutoff radius in the frequency
domain.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Fft.GaussianLowPassFftCommand">
            <summary>Similar to the ideal low pass filter, but with smoother
transitions and less "ringing".</summary>
            <remarks>Low pass filters clip high frequencies tending to blur
images.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.GaussianLowPassFftCommand._ctor">
            <summary>Initializes a new instance of
GaussianLowPassFftCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.GaussianLowPassFftCommand._ctor">
            <summary>Initializes a new instance of
GaussianLowPassFftCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.GaussianLowPassFftCommand._ctor(System.Double)">
            <summary>Initializes a new instance of
GaussianLowPassFftCommand specifying the cutoff
radius.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.GaussianLowPassFftCommand.ApplyToGrid(Atalasoft.Imaging.ImageProcessing.Fft.FftGrid)">
            <summary>Applies the filter on an FftGrid.</summary>
            <returns>null (Nothing in Visual
Basic)</returns>
            <param name="grid">The FftGrid to process.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.GaussianLowPassFftCommand.Cutoff">
            <summary>Gets or sets the cutoff radius in the frequency
domain.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Fft.IdealHighPassFftCommand">
            <summary>The ideal high pass filter zeros out all frequencies inside a
specified cutoff radius.</summary>
            <remarks>High pass filters clip low frequencies tending to sharpen
images. Ideal filters use a strict cutoff, tending to cause a
ringing effect when converted back to the spatial domain. This
"ringing" is similar to how JPEG's generate artifacts at sharp
color changes. In practice, Ideal filters are rarely used due to
this side effect.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.IdealHighPassFftCommand._ctor">
            <summary>Initializes a new instance of
IdealHighPassFftCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.IdealHighPassFftCommand._ctor">
            <summary>Initializes a new instance of
IdealHighPassFftCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.IdealHighPassFftCommand._ctor(System.Double)">
            <summary>Initializes a new instance of
IdealHighPassFftCommand specifying the cutoff
radius.</summary>
            <param name="cutoff">The cutoff radius</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.IdealHighPassFftCommand.ApplyToGrid(Atalasoft.Imaging.ImageProcessing.Fft.FftGrid)">
            <summary>Applies the filter on an FftGrid.</summary>
            <returns>null (Nothing in Visual
Basic)</returns>
            <param name="grid">The FftGrid to process.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.IdealHighPassFftCommand.Cutoff">
            <summary>Gets or sets the cutoff radius in the frequency
domain.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Fft.IdealLowPassFftCommand">
            <summary>The ideal low pass filter zeros out all frequencies outside a
specified cutoff radius.</summary>
            <remarks>Low pass filters clip high frequencies tending to blur
images. Ideal filters use a strict cutoff, tending to cause a
ringing effect when converted back to the spatial domain. This
"ringing" is similar to how JPEG's generate artifacts at sharp
color changes. In practice, Ideal filters are rarely used due to
this side effect.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.IdealLowPassFftCommand._ctor">
            <summary>Initializes a new instance of
IdealLowPassFftCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.IdealLowPassFftCommand._ctor">
            <summary>Initializes a new instance of
IdealLowPassFftCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.IdealLowPassFftCommand._ctor(System.Double)">
            <summary>Initializes a new instance of
IdealLowPassFftCommand specifying the cutoff
radius.</summary>
            <param name="cutoff">The cutoff radius</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.IdealLowPassFftCommand.ApplyToGrid(Atalasoft.Imaging.ImageProcessing.Fft.FftGrid)">
            <summary>Applies the filter on an FftGrid.</summary>
            <returns>null (Nothing in Visual
Basic)</returns>
            <param name="grid">The FftGrid to process.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.IdealLowPassFftCommand.Cutoff">
            <summary>Gets or sets the cutoff radius in the frequency
domain.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Fft.InversePowerFftCommand">
            <summary>The base class used for all FFT (Fast Fourier Transform)
filters for frequency domain image processing.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.InversePowerFftCommand._ctor">
            <summary>Initializes a new instance of
InversePowerFftCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.InversePowerFftCommand._ctor">
            <summary>Initializes a new instance of
InversePowerFftCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.InversePowerFftCommand._ctor(System.Double)">
            <summary>Initializes a new instance of
InversePowerFftCommand specifying the
power.</summary>
            <param name="power">The power applied to the function controlling the cutoff
radius.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.InversePowerFftCommand.ApplyToGrid(Atalasoft.Imaging.ImageProcessing.Fft.FftGrid)">
            <summary>Applies the filter on an FftGrid.</summary>
            <returns>null (Nothing in Visual
Basic)</returns>
            <param name="grid">The FftGrid to process.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.InversePowerFftCommand.Power">
            <summary>Gets or sets the power applied to the function controlling
the cutoff radius.</summary>
        </member>
        <member name="N:Atalasoft.Imaging.ImageProcessing.Filters">
            <summary>Contains classes that apply a filter to an image.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpQuality">
            <summary>Indicates the quality level in the
AdaptiveUnsharpMaskCommand.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpQuality.Low">
            <summary>Less accurate results, but very fast.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpQuality.Middle">
            <summary>Good results, slower to process.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpQuality.High">
            <summary>Highest quality with the best results. Very slow.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseFilterType">
            <summary>The type of noise to add to an image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseFilterType.Gaussian">
            <summary>A type of noise whose histogram is bell-shaped: most of the
noise will occur in the middle of the pixel value range, and less
noise will occur at the extremes.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseFilterType.Negative">
            <summary>Negative Exponential Noise.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseFilterType.Rayleigh">
            <summary>Rayleigh noise.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseFilterType.Uniform">
            <summary>Uniform Noise.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionDirection">
            <summary>Specifies the direction of the edge detection</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionDirection.Top">
            <summary>Emphasizes top edges</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionDirection.Right">
            <summary>Emphasizes right edges</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionDirection.Bottom">
            <summary>Emphasizes bottom edges</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionDirection.Left">
            <summary>Emphasizes left edges</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionType">
            <summary>Specified the type of the edge detection.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionType.Laplacian">
            <summary>Laplacian Edge Detection</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionType.Prewitt">
            <summary>Prewitt Edge Detection</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionType.Gradient">
            <summary>Gradient Edge Detection</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.MeanFilterType">
            <summary>The type of mean filter to apply.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.MeanFilterType.Arithmetic">
            <summary>Finds average values under the filter.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.MeanFilterType.Geometric">
            <summary>Removes Gaussian type noise from an image better than the
arithmetic mean filter. Unlike the YP mean filter, this is
susceptible to low-valued outliers: a zero pixel under the filter
will cause the filter to output zero.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.MeanFilterType.Harmonic">
            <summary>Removes Gaussian type noise from an image better than the
arithmetic mean filter. It is good at removing positive outliers,
but it is susceptible to low-valued outliers: a zero pixel under
the filter will cause the filter to output zero.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.MeanFilterType.YP">
            <summary>A non-linear mean filter which is better at removing Gaussian
type noise and preserving edge features than the basic arithmetic
mean filter. It is also very good at removing outliers (positive or
negative, depending on the order of the filter) from images.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayMode">
            <summary>The type of morphological filter to use in the
MorphoGrayCommand.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayMode.Dilation">
            <summary>    Used to smooth small dark regions tending to enhance
    black features in the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayMode.Erosion">
            <summary>    Used to smooth small light regions tending to reduce
    black features in the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayMode.Open">
            <summary>The dilation of the erosion of the image used to reduce small
black regions within the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayMode.Close">
            <summary>The erosion of the dilation of the image used to reduce small
white regions within the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayMode.Tophat">
            <summary>Used to enhance low-contrast, high frequency details within
an image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayMode.Gradient">
            <summary>Highlights sharp gray-level transitions (edges) in an
image.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpMaskCommand">
            <summary>    Uses a powerful technique for sharpening images in the
    presence of low noise levels via an adaptive filtering
    algorithm.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpMaskCommand._ctor">
            <summary>Initializes a new instance of AdaptiveUnsharpMask.</summary>
            <remarks>Region of Interest is available in the Professional edition
only.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpMaskCommand._ctor">
            <summary>Creates a new instance of AdaptiveUnsharpMaskCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpMaskCommand._ctor(System.Int32,System.Double,Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpQuality)">
            <summary>Creates a new instance of AdaptiveUnsharpMaskCommand
specifying the threshold, sharpen amount and filter quality.</summary>
            <param name="threshold">    A value controlling the depth of the effect with the
    lower the value, the greater the effect. (0 to 255)</param>
            <param name="amount">The amount of the sharpened signal to add to the output
image.</param>
            <param name="filterQuality">Quality of the filter.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpMaskCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies an Adaptive Unsharp Mask filter using the current
settings to the specified image.</summary>
            <returns>A new
AtalaImage
containing the processed image. null (Nothing in
Visual Basic) if cancelled.</returns>
            <param name="sourceImage">The source AtalaImage which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpMaskCommand.Amount">
            <summary>Gets or sets the amount of the sharpened signal to add to the
output image.</summary>
            <remarks>    0 = no change
    1 = full change
    You can use any number (even negative), but the intended
    use is between 0 and 1.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpMaskCommand.FilterQuality">
            <summary>Gets or sets the quality of the filter.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpMaskCommand.Threshold">
            <summary>    Gets or sets a value controlling the depth
    of the effect.</summary>
            <remarks>    Any value between 0 and 255 is valid. The
    lower the value, the greater the effect.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand">
            <summary>Add different types of noise to an image.</summary>
            <remarks>See the Workspace or WorkspaceViewer for applying this
command to an image.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand._ctor">
            <summary>Initialize a new instance of AddNoiseCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand._ctor">
            <summary>Creates a new instance of AddNoiseCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand._ctor(Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseFilterType,System.Double,System.Boolean)">
            <summary>    Initializes a new instance of AddNoiseCommand specifying
    the filter type, variance, and monochromatic setting.</summary>
            <param name="noiseType">The type of noise to apply.</param>
            <param name="variance">Controls the intensity.</param>
            <param name="monochromatic">If True, the same noise is applied equally to all pixel
channels.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand._ctor(Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseFilterType,System.Double,System.Boolean,System.Double)">
            <summary>    Initializes a new instance of AddNoiseCommand specifying
    the filter type, variance, monochromatic setting, and
    mean.</summary>
            <param name="noiseType">The type of noise to apply.</param>
            <param name="variance">Controls the intensity.</param>
            <param name="monochromatic">When true applies the same noise equally to each
channel.</param>
            <param name="mean">Adds additional noise to the output for Gaussian and Uniform
noise types.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies this AddNoiseCommand using the current settings to
the specified image.</summary>
            <returns>null (Nothing in Visual
Basic)</returns>
            <remarks>This method uses in place processing. That is, it
modifies the source image passed to it, rather than creating a new
image to hold the result. Therefore, the return result is always
null (Nothing in Visual
Basic).</remarks>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.ChannelsToProcess">
            <summary>Gets or sets a bit flag indicating the channels to
process.</summary>
            <remarks>    Only the fourth channel can be set using this flag. By
    default, with a value of 0, the fourth channel is ignored for
    RGBA images.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.InPlaceProcessing">
            <summary>    Gets a value indicating if the source image data is
    processed in-place as opposed to returning a new image.</summary>
            <remarks>By default, this value is false. Implementing classes should
override this and set it to true when processing the source image
directly. When this value is true,

ApplyToImage returns null.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.Mean">
            <summary>Gets or sets a value which adds additional noise to the
output for Gaussian and Uniform noise types.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.Monochromatic">
            <summary>Gets or sets a value that when true applies the same noise
equally to each channel.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.NoiseType">
            <summary>Gets or sets the type of noise to apply.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.Variance">
            <summary>Gets or sets a value controlling the intensity.</summary>
            <remarks>There is no upper limit to this value. A good value to start
with is around 500.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.BlurCommand">
            <summary>Applies a Blur filter onto an image.</summary>
            <remarks>Requires a continous tone image.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurCommand._ctor">
            <summary>Initializes a new instance of BlurCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurCommand._ctor">
            <summary>Creates a new instance of BlurCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurCommand._ctor(System.Double)">
            <summary>Initializes a new instance of BlurCommand specifying the
intensity.</summary>
            <param name="intensity">The intensity of the filter. (0 to 100)</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurCommand._ctor(System.Double,System.Int32)">
            <summary>Initializes a new instance of BlurCommand specifying the
intensity and matrix size.</summary>
            <param name="intensity">The intensity of the filter. (0 to 100)</param>
            <param name="matrixSize">The size of the matrix. Should be an odd value greater than
or equal to 3.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies a Blur filter using the current settings to the
specified image.</summary>
            <returns>A new
AtalaImage
containing the processed image or null (Nothing in
Visual Basic) if cancelled.</returns>
            <param name="sourceImage">The source AtalaImage which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.BlurCommand.ChannelsToProcess">
            <summary>Gets or sets a bit flag indicating the channels to
process.</summary>
            <remarks>    A value of 0 or AllChannels will process each channel in
    the image. Remove the fourth channel from the bit flag to
    ignore the alpha in an RGBA image.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.BlurCommand.Intensity">
            <summary>Gets or sets a value controlling the intensity of the
filter.</summary>
            <remarks>Valid values are between 0 and 100.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.BlurCommand.MatrixSize">
            <summary>Gets or sets the size of the matrix.</summary>
            <remarks>The larger the matrix, the greater depth of the effect.
Should be an odd value greater than or equal to 3.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.BlurGaussianCommand">
            <summary>Performs a Gaussian blur filter on the image. This has a more
dispersed effect then the traditional blur filter, but
slower.</summary>
            <remarks>    This method requires a continuous tone image. If the source
    image is not continuous, it will raise the
    ChangePixelFormat event and convert the image
    to a continuous tone format, which can be 8-bit grayscale, RGB,
    or RGBA. 
    Our ActiveX version, ImgX, uses Intensity for this method
    where Intensity = (sigma - 0.5) * 100. A good value to start
    with is around 2.0.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurGaussianCommand._ctor">
            <summary>Initializes a new instance of BlurGaussianCommand.</summary>
            <remarks>Region of Interest is available in the Professional edition
only.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurGaussianCommand._ctor">
            <summary>Creates a new instance of BlurGaussianCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurGaussianCommand._ctor(System.Double)">
            <summary>Creates a new instance of BlurGaussianCommand specifying the
amount of blur.</summary>
            <param name="sigma">The standard deviation of the gaussian kernal, controlling
the amount of blur.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurGaussianCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies a Guassian Blur filter using the current settings to
the specified image.</summary>
            <returns>A new
AtalaImage
containing the processed image or null (Nothing in
Visual Basic) if cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.BlurGaussianCommand.ChannelsToProcess">
            <summary>Gets or sets a bit flag indicating the channels to
process.</summary>
            <remarks>    A value of 0 or AllChannels will process each channel in
    the image.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.BlurGaussianCommand.Sigma">
            <summary>Gets or sets the standard deviation of the gaussian kernal,
controlling the amount of blur.</summary>
            <remarks>Good values to start with are between 0.6 and 2.4. The higher
the value the greater the blur depth and longer the processing
time.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand">
            <summary>Find edges in an image using the Canny algorithm.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand._ctor">
            <summary>Initializes a new instance of
CannyEdgeDetectorCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand._ctor">
            <summary>Creates a new instance of CannyEdgeDetectorCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand._ctor(System.Double,System.Double,System.Double)">
            <summary>Creates a new instance of CannyEdgeDetectorCommand specifying
the deviation and hysteresis.</summary>
            <param name="sigma">Standard deviation of the gaussian kernal.</param>
            <param name="lowHysteresis">The low hysteresis value. (0 to 100)</param>
            <param name="highHysteresis">The high hysteresis value. (0 to 100)</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies a Canny Edge Detection filter using the current
settings to the specified image.</summary>
            <returns>A new AtalaImage containing the processed image or
null (Nothing in Visual Basic) if cancelled.</returns>
            <param name="sourceImage">The source AtalaImage which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand.HighHysteresis">
            <summary>Gets or sets a value used to specify the high hysteresis
value.</summary>
            <remarks>This fraction (0 to 100) specifies the percentage point in a
histogram of the gradient of the magnitude. Magnitude values of
zero are not counted in the histogram. Good starting values are
between 60 and 90.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand.LowHysteresis">
            <summary>Gets or sets a value used to specify the low hysteresis
value.</summary>
            <remarks>This is a percentage of the computed high threshold edge
strength value. Good starting values are between 20 and 50.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand.Sigma">
            <summary>Gets or sets the standard deviation of the gaussian
kernal.</summary>
            <remarks>Good values to start with are between 0.6 and 2.4. Higher
values increase processing time.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand">
            <summary>This command can be used to replace the hue, saturation and
luminance values in an image with those of a specified
color.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand._ctor">
            <summary>Creates a new instance of ColorizeCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand._ctor(System.Drawing.Color)">
            <summary>Creates a new instance of ColorizeCommand specifying the base
color.</summary>
            <param name="baseColor">The color used for processing.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand._ctor(System.Drawing.Color,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Creates a new instance of ColorizeCommand specifying the base
color and values indicating whether to process the hue, saturation
and luminace.</summary>
            <param name="baseColor">The color used for processing.</param>
            <param name="applyHue">Set to true to replace the pixel hue with the hue from
baseColor.</param>
            <param name="applySaturation">Set to true to replace the pixel saturation with the
saturation from baseColor.</param>
            <param name="applyLuminance">Set to true to replace the pixel luminance with the luminance
from baseColor.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies ColorizeCommand to the source image.</summary>
            <returns>A new
AtalaImage
containing the processed image. null (Nothing in
Visual Basic) if cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand.ApplyHue">
            <summary>Gets or sets a value indicating whether the hue pixel values
is replaced by the BaseColor hue.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand.ApplyLuminance">
            <summary>Gets or sets a value indicating whether the luminance pixel
values is replaced by the BaseColor luminance.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand.ApplySaturation">
            <summary>Gets or sets a value indicating whether the saturation pixel
values is replaced by the BaseColor saturation.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand.BaseColor">
            <summary>Gets or sets the base color used for processing.</summary>
            <remarks>The hue, saturation and luminance of this color is used to
process the image.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionFilterCommand">
            <summary>Applies a custom Convolution Filter to an image.</summary>
            <remarks>    This should only be used on continuous-tone images (RGBA,
    grayscale, RGB, etc.).
    If Traditional is true, this can be used to do things
    like a Gaussian blur, etc., depending on the matrix
    used.
    The number of columns and the number of rows in the
    matrix must both be odd.
    The filter is applied as follows :
    
        M = matrix ( 3 x 3, in this example)
        
            
                
                    M
                    =
                    1
                    1
                    1
                    
                    this is a sharpening matrix
                
                
                    1
                    -8
                    1
                
                
                    1
                    1
                    1
                
            
        
        The matrix is centered on the current pixel. In this
        example, M[4] is the center of the matrix.
        k is the inteisity.
        P = pixels . Since the matrix is centered on the
        current pixel, P(x,y), the pixels used in this calculation
        will be :
        
            
                
                    P(x-1,y-1)
                    P(x, y-1)
                    P(x+1, y-1)
                
                
                    P(x-1,y)
                    P(x, y)
                    P(x+1, y)
                
                
                    P(x-1,y+1)
                    P(x, y+1)
                    P(x+1, y+1)
                
            
        
        t = sum ( M[i] * P[i] ) [for all elements of the
        matrix]
        if "traditional" processing (see uFlags)
         outPixel = k * t
        else
         outPixel = curPixel - (k * t)
        outPixel is then clipped to 0..255
    
    Matrix M in this example demonstrates the sharpening
    filter used by this library, if bTraditional is FALSE.
    Besides the ability to use matricies of arbitrary size,
    this object differs from ConvolutionMatrixCommand in the way
    the final caluclation is performed.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionFilterCommand._ctor">
            <summary>Initializes a new instance of
ConvolutionFilterCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionFilterCommand._ctor">
            <summary>Creates a new instance of ConvolutionFilterCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionFilterCommand._ctor(Atalasoft.Imaging.ImageProcessing.Filters.DoubleMatrix,System.Double)">
            <summary>Creates a new instance of ConvolutionFilterCommand specifying
the matrix and intensity.</summary>
            <param name="matrix">The matrix to apply to the image.</param>
            <param name="intensity">The intensity of the filter.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionFilterCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies the ConvolutionFilterCommand filter using the current
settings to the source image.</summary>
            <returns>A new
AtalaImage
containing the processed image. null (Nothing in VB)
if cancelled.
A new System.Drawing.Bitmap containing the
processed image. null (Nothing in VB) if
cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionFilterCommand.ChannelsToProcess">
            <summary>Gets or sets a bit flag indicating the channels to
process.</summary>
            <remarks>A value of 0 or AllChannels will process each channel in the
image.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionFilterCommand.Intensity">
            <summary>Gets or sets a value controlling the intensity of the
filter.</summary>
            <remarks>Must be a value greater than 0.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionFilterCommand.Matrix">
            <summary>Gets or sets the matrix to apply to the image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionFilterCommand.Traditional">
            <summary>Gets or sets a value indicating if the traditional version is
used.</summary>
            <remarks>The traditional filter can be used to perform gaussian blur
and some others.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionMatrixCommand">
            <summary>Applies a custom Convolution Matrix to an image.</summary>
            <remarks>    This method requires a continuous tone image. If the
    source image is not continuous, it will raise the
    ChangePixelFormat event and convert the image
    to a continuous tone format, which can be 8-bit grayscale, RGB,
    or RGBA.
    The matrix is an array of 9 doubles, arranged as
    :
    
        
            
                
                    0
                    1
                    2
                
                
                    3
                    4
                    5
                
                
                    6
                    7
                    8
                
            
        
    
    
    where "4" is the source pixel.
    
    It is applied for pixel(x,y) as :
    
    Step 1
     double tempSum = (
     pMatrix[0] * pixel(x-1, y-1) +
     pMatrix[1] * pixel(x, y-1) +
     pMatrix[2] * pixel(x+1, y-1) +
     pMatrix[3] * pixel(x-1, y ) +
     pMatrix[4] * pixel(x, y ) +
     pMatrix[5] * pixel(x+1, y ) +
     pMatrix[6] * pixel(x-1, y+1) +
     pMatrix[7] * pixel(x, y+1) +
     pMatrix[8] * pixel(x+1, y+1));
    
    Step 2
     if doFeedback = true
     tempSum = pixel(x,y) * (1.0 - k) + (k * tempSum);
     else
     tempSum = tempSum * k;
    
     where k is the intensity
    
    Step 3
     tempSum = min(tempSum, 255);
    
    Step 4
     tempSum = max(tempSum, 0);
    
    Step 5
     outval = tempSum;</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionMatrixCommand._ctor">
            <summary>Initializes a new instance of the
ConvolutionMatrixCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionMatrixCommand._ctor">
            <summary>Creates a new instance of ConvolutionMatrixCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionMatrixCommand._ctor(Atalasoft.Imaging.ImageProcessing.Filters.DoubleMatrix,System.Boolean,System.Double)">
            <summary>Creates a new instance of ConvolutionMatrixCommand specifying
the matrix, feedback and intensity.</summary>
            <param name="matrix">The matrix to apply to the image.</param>
            <param name="feedback">Indicates if a feedback calculation is performed.</param>
            <param name="intensity">The intensity of the filter.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionMatrixCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies the ConvolutionMatrixCommand filter using the current
settings to the source image.</summary>
            <returns>A new
AtalaImage
containing the processed image. null (Nothing in VB)
if cancelled.
A new System.Drawing.Bitmap containing the
processed image. null (Nothing in VB) if
cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionMatrixCommand.ChannelsToProcess">
            <summary>Gets or sets a bit flag indicating the channels to
process.</summary>
            <remarks>A value of 0 or AllChannels will process each channel in the
image.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionMatrixCommand.Feedback">
            <summary>Gets or sets a value indicating if a feedback calculation is
performed.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionMatrixCommand.Intensity">
            <summary>Gets or sets a value controlling the intensity of the
filter.</summary>
            <remarks>Must be a value greater than 0.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionMatrixCommand.Matrix">
            <summary>Gets or sets the matrix to apply to the image.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.DespeckleCommand">
            <summary>This filter cleans the image by removing stray pixel spikes
(speckles).</summary>
            <remarks>For despeckling document images, see

DocumentDespeckleCommand.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DespeckleCommand._ctor">
            <summary>Initializes a new instance of
DespeckleCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DespeckleCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies a Despeckle filter using the current settings to the
specified image.</summary>
            <returns>Null</returns>
            <remarks>This method uses in place processing. That is, it
modifies the source image passed to it, rather than creating a new
image to hold the result. Therefore, the return result is always
null (Nothing in Visual
Basic).</remarks>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.DespeckleCommand.ChannelsToProcess">
            <summary>Gets or sets a bit flag indicating the channels to
process.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.DespeckleCommand.InPlaceProcessing">
            <summary>    Gets a value indicating if the source image data is
    processed in-place as opposed to returning a new image.</summary>
            <remarks>By default, this value is false. Implementing classes should
override this and set it to true when processing the source image
directly. When this value is true,

ApplyToImage returns null.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.DoubleMatrix">
            <summary>This object composes of a matrix of doubles that is used in
various filters including ConvolutionFilterCommand and
ConvolutionMatrixCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DoubleMatrix._ctor">
            <summary>Initializes a new instance of DoubleMatrix.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DoubleMatrix.GetArray">
            <summary>Return a one-dimentional array that composes of the matrix
elements.</summary>
            <returns>A one-dimentional array that composes of the matrix
elements.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DoubleMatrix.GetItem(System.Int32,System.Int32)">
            <summary>Gets a value in the specified location of the matrix.</summary>
            <returns>A value in the specified location of the matrix.</returns>
            <param name="row">The row containing the element to get. (zero based)</param>
            <param name="column">The column containing the element to get. (zero based)</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DoubleMatrix.GetRow(System.Int32)">
            <summary>Returns a one-dimensional array containing en entire row of
the matrix.</summary>
            <returns>A one-dimensional array containing en entire row of the
matrix.</returns>
            <param name="rowIndex">The zero based row to retreive.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DoubleMatrix.SetItem(System.Int32,System.Int32,System.Double)">
            <summary>Set the value of an element in the array.</summary>
            <param name="row">The row containing the element to set. (zero based)</param>
            <param name="column">The column containing the element to set. (zero based)</param>
            <param name="itemValue">The value to set.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DoubleMatrix.SetRow(System.Int32,System.Double[])">
            <summary>Set the entire row of the matrix to a parameter list of
values.</summary>
            <param name="rowIndex">The zero based row index to set.</param>
            <param name="rowList">A parameter array of doubles that are set to the matrix
row.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.DoubleMatrix.Columns">
            <summary>Gets or sets the number of columns in the matrix.</summary>
            <remarks>Most methods require an odd and equal number of columns and
rows.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.DoubleMatrix.Rows">
            <summary>Gets or sets the number of rows in the matrix.</summary>
            <remarks>Most methods require an odd and equal number of columns and
rows.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.DustAndScratchRemovalCommand">
            <summary>This command is used to remove dust and scratch marks from an
image.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DustAndScratchRemovalCommand._ctor">
            <summary>Creates a new instance of DustAndScratchRemovalCommand
specifying the filter size, threshold and blending values.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DustAndScratchRemovalCommand._ctor">
            <summary>Creates a new instance of
DustAndScratchRemovalCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DustAndScratchRemovalCommand._ctor(System.Int32,System.Int32,System.Double)">
            <summary>Creates a new instance of DustAndScratchRemovalCommand
specifying the filter size, threshold and blending.</summary>
            <param name="filterSize">The size of the features that will be removed.</param>
            <param name="threshold">The minimum detail intensity required to trigger
removal.</param>
            <param name="blending">The blending of original image with the removed image
detail.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DustAndScratchRemovalCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies DustAndScratchRemovalCommand to the source
image.</summary>
            <returns>A new
AtalaImage
containing the processed image. null (Nothing in
Visual Basic) if cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.DustAndScratchRemovalCommand.Blending">
            <summary>Gets or sets the blending of original image with the removed
image detail.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.DustAndScratchRemovalCommand.ChannelsToProcess">
            <summary>Gets or sets the channels of the image to process.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.DustAndScratchRemovalCommand.FilterSize">
            <summary>Gets or sets the size of the features that will be
removed.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.DustAndScratchRemovalCommand.Threshold">
            <summary>Gets or sets the minimum detail intensity required to trigger
removal.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand">
            <summary>This filter enhances edges in an image.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand._ctor">
            <summary>Initializes a new instance of
EdgeDetectionCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand._ctor">
            <summary>Creates a new instance of EdgeDetectionCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand._ctor(Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionType)">
            <summary>Initializes a new instance of
EdgeDetectionCommand specifying the type.</summary>
            <param name="type">Type of edge detection filter to apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand._ctor(Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionType,System.Double)">
            <summary>Initializes a new instance of
EdgeDetectionCommand specifying the type and
intensity.</summary>
            <param name="type">Type of edge detection filter to apply.</param>
            <param name="intensity">Intensity of the edge detection.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand._ctor(Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionType,System.Double,Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionDirection)">
            <summary>Initializes a new instance of
EdgeDetectionCommand specifying the type,
intensity, and direction.</summary>
            <param name="type">Type of edge detection filter to apply.</param>
            <param name="intensity">Intensity of the edge detection.</param>
            <param name="direction">The edge detection for Gradient and Prewitt filters.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies EdgeDetectionCommand to the source image.</summary>
            <returns>A new
AtalaImage
containing the processed image. null (Nothing in
Visual Basic) if cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand.ChannelsToProcess">
            <summary>Gets or sets the image channels to process.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand.Direction">
            <summary>Gets or sets the edge direction for Gradient and Prewitt
filters.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand.Intensity">
            <summary>Gets or sets the intensity of the edge detection.</summary>
            <remarks>Generally values should be from 0 to 1.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand.Type">
            <summary>    Gets or sets the type of edge detection
    filter to apply.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand">
            <summary>Applies an embossing filter to the source image.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand._ctor">
            <summary>Initializes a new instance of the EmbossCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand._ctor">
            <summary>Creates a new instance of EmbossCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand._ctor(System.Int32,System.Int32,System.Int32)">
            <summary>Initializes a new instance of the EmbossCommand specifying
the angle, elevation, and depth.</summary>
            <param name="angle">    Angle of the light source in
    degrees.</param>
            <param name="elevation">    Height of the light source in
    degrees.</param>
            <param name="depth">    Controls the depth of the
    emboss.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand._ctor(System.Int32,System.Int32,System.Int32,Atalasoft.Imaging.AtalaImage)">
            <summary>Initializes a new instance of the EmbossCommand specifying
the angle, elevation, depth, and texture.</summary>
            <param name="angle">    Angle of the light source in
    degrees.</param>
            <param name="elevation">    Height of the light source in
    degrees.</param>
            <param name="depth">    Controls the depth of the
    emboss.</param>
            <param name="textureMap">An AtalaImage that is used as a texture map.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand._ctor(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>Initializes a new instance of the EmbossCommand specifying
the angle, elevation, depth, and texture.</summary>
            <param name="angle">    Angle of the light source in
    degrees.</param>
            <param name="elevation">    Height of the light source in
    degrees.</param>
            <param name="depth">    Controls the depth of the
    emboss.</param>
            <param name="selfTexture">Indicates if the source image should be used as the
texture.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies an emboss filter using the current settings to the
specified image.</summary>
            <returns>A new
AtalaImage
containing the processed image or null (Nothing in
Visual Basic) if cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.Angle">
            <summary>    Gets or sets the angle of the light source
    in degrees.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.Depth">
            <summary>Gets or sets a value controlling the depth of the
emboss.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.Elevation">
            <summary>    Gets or sets the Height of the light
    source in degrees.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.SelfTexture">
            <summary>Gets or sets a value indicating if the source image should be
used as the texture.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.TextureMap">
            <summary>Gets or sets an AtalaImage that is used as a texture
map.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.HighPassCommand">
            <summary>Removes Low Frequency signals from an image.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.HighPassCommand._ctor">
            <summary>Initializes a new instance of the HighPassCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.HighPassCommand._ctor">
            <summary>Creates a new instance of HighPassCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.HighPassCommand._ctor(System.Double)">
            <summary>Initializes a new instance of the HighPassCommand specifying
the sigma value.</summary>
            <param name="sigma">A value indicating the amount of effect to apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.HighPassCommand._ctor(System.Double,System.Double)">
            <summary>Initializes a new instance of the HighPassCommand specifying
the sigma and mix value.</summary>
            <param name="sigma">A value indicating the amount of effect to apply.</param>
            <param name="mix">The percentage of the filter to mix into the original image.
(0 to 100)</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.HighPassCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies the HighPassCommand filter using the current settings
to the source image.</summary>
            <returns>Null</returns>
            <remarks>This method uses in place processing. That is, it
modifies the source image passed to it, rather than creating a new
image to hold the result. Therefore, the return result is always
null (Nothing in Visual
Basic).</remarks>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.HighPassCommand.InPlaceProcessing">
            <summary>    Gets a value indicating if the source image data is
    processed in-place as opposed to returning a new image.</summary>
            <remarks>By default, this value is false. Implementing classes should
override this and set it to true when processing the source image
directly. When this value is true,

ApplyToImage returns null.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.HighPassCommand.Mix">
            <summary>Gets or sets the percentage of the filter to mix into the
original image.</summary>
            <remarks>Valid values are from 0 to 100.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.HighPassCommand.Sigma">
            <summary>Gets or sets a value indicating the amount of effect to
apply.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix">
            <summary>This object composes of a matrix of integers that is used in
various morphological and related filters.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix._ctor">
            <summary>Initializes a new instance of IntegerMatrix.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix.GetArray">
            <summary>Return a one-dimentional array that composes of the matrix
elements.</summary>
            <returns>A one-dimentional array that composes of the matrix
elements.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix.GetItem(System.Int32,System.Int32)">
            <summary>Gets a value in the specified location of the matrix.</summary>
            <returns>A value in the specified location of the matrix.</returns>
            <param name="row">The row containing the element to get. (zero based)</param>
            <param name="column">The column containing the element to get. (zero based)</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix.GetRow(System.Int32)">
            <summary>Returns a one-dimensional array containing en entire row of
the matrix.</summary>
            <returns>A one-dimensional array containing en entire row of the
matrix.</returns>
            <param name="rowIndex">The zero based row to retreive.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix.SetItem(System.Int32,System.Int32,System.Int32)">
            <summary>Set the value of an element in the array.</summary>
            <param name="row">The row containing the element to set. (zero based)</param>
            <param name="column">The column containing the element to set. (zero based)</param>
            <param name="itemValue">The value to set.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix.SetRow(System.Int32,System.Int32[])">
            <summary>Set the entire row of the matrix to a parameter list of
values.</summary>
            <param name="rowIndex">The zero based row index to set.</param>
            <param name="rowList">A parameter array of integers that are set to the matrix
row.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix.Columns">
            <summary>Gets or sets the number of columns in the matrix.</summary>
            <remarks>Most methods require an odd and equal number of columns and
rows.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix.Rows">
            <remarks>Most methods require an odd and equal number of columns and
rows.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.IntensifyCommand">
            <summary>Increases the color intensity as if a flash of light from a
camera hit it.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.IntensifyCommand._ctor">
            <summary>Initializes a new instance of the IntensifyCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.IntensifyCommand._ctor">
            <summary>Creates a new instance of IntensifyCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.IntensifyCommand._ctor(System.Double)">
            <summary>Creates a new instance of IntensifyCommand specifying the
intensity.</summary>
            <param name="intensity">The new intensity value.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.IntensifyCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies the IntensifyCommand filter using the current
settings to the source image.</summary>
            <returns>A new
AtalaImage
containing the processed image or null (Nothing in
Visual Basic) if cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.IntensifyCommand.ChannelsToProcess">
            <summary>Gets or sets a bit flag indicating the channels to
process.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.IntensifyCommand.Intensity">
            <summary>    Gets or sets a value increasing the color
    intensity.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.MaximumCommand">
            <summary>    Sets each color value to the maximum value under the
    filter.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MaximumCommand._ctor">
            <summary>Initializes a new instance of the MaximumCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MaximumCommand._ctor">
            <summary>Creates a new instance of MaximumCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MaximumCommand._ctor(System.Int32)">
            <summary>Creates a new instance of MaximumCommand specifying the
filter size.</summary>
            <param name="filterSize">Size of the filter. Should be an odd value greater than or
equal to 3.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MaximumCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies the MaximumCommand filter using the current settings
to the source image.</summary>
            <returns>A new
AtalaImage
containing the processed image. null (Nothing in VB)
if cancelled.</returns>
            <param name="sourceImage">The source AtalaImage which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MaximumCommand.ChannelsToProcess">
            <summary>Gets or sets a bit flag indicating the channels to
process.</summary>
            <remarks>A value of 0 or AllChannels will process each channel in the
image.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MaximumCommand.FilterSize">
            <summary>Gets or sets the size of the filter.</summary>
            <remarks>Should be an odd value (3, 5, 7, 9, etc.). The larger the
value, the greater the effect at the expense of speed. An even
value will be incremented by 1.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand">
            <summary>    Applies an Arithmetic, Harmonic, Geometric, or Yp mean
    filter to an image.</summary>
            <remarks>Mean filtering is a simple method of smoothing images
(reducing the amount of intensity variation between one pixel and
the next) and ofen used to reduce noise.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand._ctor">
            <summary>Initializes a new instance of the MeanCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand._ctor">
            <summary>Creates a new instance of MeanCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand._ctor(Atalasoft.Imaging.ImageProcessing.Filters.MeanFilterType)">
            <summary>Initializes a new instance of the MeanCommand specifying the
type.</summary>
            <param name="meanType">The type of mean filter to apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand._ctor(Atalasoft.Imaging.ImageProcessing.Filters.MeanFilterType,System.Int32)">
            <summary>Initializes a new instance of the MeanCommand specifying the
type, filter size.</summary>
            <param name="meanType">The type of mean filter to apply.</param>
            <param name="filterSize">The size of the filter. Should be an odd value greater than
or equal to 3.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand._ctor(Atalasoft.Imaging.ImageProcessing.Filters.MeanFilterType,System.Int32,System.Int32)">
            <summary>Initializes a new instance of the MeanCommand specifying the
type, size, and power.</summary>
            <param name="meanType">The type of mean filter to apply.</param>
            <param name="filterSize">The size of the filter. Should be an odd value greater than
or equal to 3.</param>
            <param name="power">A non-zero integer that controls power for the Yp mean
filter.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies the MeanCommand filter using the current settings to
the source image.</summary>
            <returns>A new
AtalaImage
containing the processed image. null (Nothing in VB)
if cancelled.</returns>
            <param name="sourceImage">The source AtalaImage which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand.ChannelsToProcess">
            <summary>Gets or sets a bit flag indicating the channels to
process.</summary>
            <remarks>A value of 0 or AllChannels will process each channel in the
image.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand.FilterSize">
            <summary>Gets or sets the size of the filter.</summary>
            <remarks>Should be an odd value (3, 5, 7, 9, etc.). The larger the
value, the greater the effect at the expense of speed. An even
value will be incremented by 1.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand.MeanType">
            <summary>Gets or sets the type of mean filter to apply.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand.Power">
            <summary>Gets or sets the a non-zero integer that controls power for
the Yp mean filter.</summary>
            <remarks>Ignored if meanType is not MeanFilterType.Yp.
power &lt; 0, removes positive outliers
power &gt; 0, removes negative outliers</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.MedianCommand">
            <summary>    Reduces noise in an image, similarly to the mean filter,
    however doing a better job preserving useful detail in the
    image.</summary>
            <remarks>A value of 0 or AllChannels will process each channel in the
image. For document images, please see

DocumentMedianCommand instead.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MedianCommand._ctor">
            <summary>Initializes a new instance of the MedianCommand.
Initializes a new instance of the MedianCommand.
Initializes a new instance of the MedianCommand specifying the size
of the filter.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MedianCommand._ctor">
            <summary>Creates a new instance of MedianCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MedianCommand._ctor(System.Int32)">
            <summary>Creates a new instance of MedianCommand specifying the filter
size.</summary>
            <param name="filterSize">The size of the matrix used for processing this
command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MedianCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies the MedianCommand filter using the current settings
to the source image.</summary>
            <returns>A new
AtalaImage
containing the processed image. null (Nothing in VB)
if cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MedianCommand.ChannelsToProcess">
            <summary>Gets or sets a bit flag indicating the channels to
process.</summary>
            <remarks>A value of 0 or AllChannels will process each channel in the
image.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MedianCommand.FilterSize">
            <summary>Gets or sets the size of the matrix.</summary>
            <remarks>The filter size should be an odd value. The larger the value,
the greater the effect at the expense of speed. An even value will
be incremented by 1.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.MidpointCommand">
            <summary>    Find the average of minimum and maximum values under the
    filter.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MidpointCommand._ctor">
            <summary>Initializes a new instance of the MidpointCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MidpointCommand._ctor">
            <summary>Initializes a new instance of the MidpointCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MidpointCommand._ctor(System.Int32)">
            <summary>Initializes a new instance of the MidpointCommand specifying
the filter size.</summary>
            <param name="filterSize">The size of the filter. Should be an odd value greater than
or equal to 3.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MidpointCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies the Midpoint filter using the current settings to the
source image.</summary>
            <returns>A new
AtalaImage
containing the processed image. null (Nothing in VB)
if cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MidpointCommand.ChannelsToProcess">
            <summary>Gets or sets the

ChannelFlags specifying which channels to process.</summary>
            <remarks>A value of 0 or AllChannels will process each channel in the
image.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MidpointCommand.FilterSize">
            <summary>Gets or sets the size of the filter.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.MinimumCommand">
            <summary>Find the minimum values under the filter.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MinimumCommand._ctor">
            <summary>Initializes a new instance of the MinimumCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MinimumCommand._ctor">
            <summary>Initializes a new instance of the MinimumCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MinimumCommand._ctor(System.Int32)">
            <summary>Initializes a new instance of the MinimumCommand specifying
the filter size.</summary>
            <param name="filterSize">The size of the filter. Should be an odd value greater than
or equal to 3.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MinimumCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies the Minimum filter using the current settings to the
source image.</summary>
            <returns>A new
AtalaImage
containing the processed image. null (Nothing in VB)
if cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MinimumCommand.ChannelsToProcess">
            <summary>Gets or sets a bit flag indicating the channels to
process.</summary>
            <remarks>A value of 0 or AllChannels will process each channel in the
image.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MinimumCommand.FilterSize">
            <summary>Gets or sets the size of the filter.</summary>
            <remarks>Should be an odd value (3, 5, 7, 9, etc.). The larger the
value, the greater the effect at the expense of speed. An even
value will be incremented by 1.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayCommand">
            <summary>Applies a morphological Erosion, Dilation, Open, Close, or
TopHat to a grayscale image.</summary>
            <remarks>    Morphology is the study of form and structure. In image
    processing, it encompasses a set of techniques that merge
    traditional image processing with set theory from
    mathematics.
    See Morphological Filters for more information about
    morphology.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayCommand._ctor">
            <summary>Initializes a new instance of the MorphoGrayCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayCommand._ctor">
            <summary>Creates a new instance of MorphoGrayCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayCommand._ctor(Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayMode)">
            <summary>Initializes a new instance of the MorphoGrayCommand
specifying the filter mode.</summary>
            <param name="mode">The type of morphological to apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayCommand._ctor(Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayMode,Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix)">
            <summary>Initializes a new instance of the MorphoGrayCommand
specifying the filter mode and a structuring element.</summary>
            <param name="mode">The type of morphological to apply.</param>
            <param name="mask">The structuring element to use.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies the Morphological filter using the current settings
to the source image.</summary>
            <returns>A new
AtalaImage
containing the processed image. null
(Nothing in Visual Basic) if cancelled.</returns>
            <param name="sourceImage">The source AtalaImage which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayCommand.Mask">
            <summary>Gets or sets a structuring element to use with the
morphological filter.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayCommand.Mode">
            <summary>Gets or sets the type of morphological filter to
apply.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.SharpenCommand">
            <summary>    Applies a traditional sharpening filter to the
    image.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.SharpenCommand._ctor">
            <summary>Creates a new instance of
SharpenCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.SharpenCommand._ctor">
            <summary>Creates a new instance of SharpenCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.SharpenCommand._ctor(System.Double)">
            <summary>Creates a new instance of SharpenCommand
specifying intensity.</summary>
            <param name="intensity">Filter intensity. (0-100)</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.SharpenCommand._ctor(System.Double,System.Int32)">
            <summary>Creates a new instance of SharpenCommand
specifying intensity, and matrixSize.</summary>
            <param name="intensity">Filter intensity. (0-100)</param>
            <param name="matrixSize">The larger the matrixSize, the stronger the effect</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.SharpenCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies the SharpenCommand filter using the current settings
to the source image.</summary>
            <returns>A new
AtalaImage
containing the processed image. null (Nothing in VB)
if cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.SharpenCommand.ChannelsToProcess">
            <summary>Gets or sets the

ChannelFlags specifying which channels to process.</summary>
            <remarks>The default value is AllChannels.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.SharpenCommand.Intensity">
            <summary>Gets or sets the value of intensity</summary>
            <remarks>Valid values are from 0 to 100.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.SharpenCommand.MatrixSize">
            <summary>Gets or sets the size of the filter.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand">
            <summary>Set pixel components above a high threshold value to 255 and
below a low threshold value to 0.</summary>
            <remarks>This is not the same as the thresholding commands in the
Document namespace. See

GlobalThresholdCommand and

AdaptiveThresholdCommand for binerarizing color or grayscale
images into binary images.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand._ctor">
            <summary>Creates a new instance of ThresholdCommand specifying
minValue and maxValue.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand._ctor">
            <summary>Creates a new instance of ThresholdCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand._ctor(System.Int32,System.Int32)">
            <summary>Creates a new instance of

ThresholdCommand specifying minValue, and maxValue.</summary>
            <param name="minValue">Pixels below this level are set to 0. Valid values (0 -
255).</param>
            <param name="maxValue">Pixels above this level are set to 255. (0 - 255)</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand._ctor(System.Int32,System.Int32,Atalasoft.Imaging.ImageProcessing.ChannelFlags)">
            <summary>Creates a new instance of ThresholdCommand specifying
minValue, maxValue and channelsToProcess.</summary>
            <param name="minValue">Pixels below this level are set to 0. Valid values (0 -
255).</param>
            <param name="maxValue">Pixels above this level are set to 255. (0 - 255)</param>
            <param name="channelsToProcess">The

ChannelFlags specifying which channels to process.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies ThresholdCommand using the current settings to the
source image.</summary>
            <returns>Null</returns>
            <remarks>This method uses in place processing. That is, it
modifies the source image passed to it, rather than creating a new
image to hold the result. Therefore, the return result is always
null (Nothing in Visual
Basic).</remarks>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand.ChannelsToProcess">
            <summary>Gets or sets the

ChannelFlags specifying which channels to process.</summary>
            <remarks>The default value is AllChannels.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand.InPlaceProcessing">
            <summary>    Gets a value indicating if the source image data is
    processed in-place as opposed to returning a new image.</summary>
            <remarks>By default, this value is false. Implementing classes should
override this and set it to true when processing the source image
directly. When this value is true,

ApplyToImage returns null.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand.MaxValue">
            <summary>Gets or sets a value indicating that pixels above this value
are set to 255.</summary>
            <remarks>Valid values are from 0 to 255.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand.MinValue">
            <summary>Gets or sets a value indicating that pixels below this value
are set to 0.</summary>
            <remarks>Valid values are from 0 to 255.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.UnsharpMaskCommand">
            <summary>The unsharp mask is a sharpening filter which derives its
name from the fact that it enhances edges and other high frequency
components in an image via a procedure which subtracts an unsharp,
or gaussian blurred, version of an image from the original image.
The unsharp mask filter is commonly used in the photographic and
printing industries for crispening edges.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.UnsharpMaskCommand._ctor">
            <summary>Creates a new instance of

UnsharpMaskCommand specifying threshold, amount, and
sigma.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.UnsharpMaskCommand._ctor">
            <summary>Creates a new instance of UnsharpMaskCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.UnsharpMaskCommand._ctor(System.Int32,System.Double,System.Double)">
            <summary>Creates a new instance of UnsharpMaskCommand specifying the
threshold, amount of effect and deviation.</summary>
            <param name="threshold">Controls the depth of the effect; the lower the value, the
greater the effect. Any value between 0 and 255 is valid.</param>
            <param name="amount">Controls the intensity of the effect. Values should be
between 0.0 (no effect) and 1.0 (full effect). Higher values will
give unpredictable results.</param>
            <param name="sigma">The standard deviation (sigma) of the gaussian kernal,
controlling the amount of blur. Good values to start with are
between 0.6 and 2.4. The higher the value the greater the blur
depth and longer the processing time.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.UnsharpMaskCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies the UnsharpMaskCommand filter using the current
settings to the source image.</summary>
            <returns>A new
AtalaImage
containing the processed image. null (Nothing in VB)
if cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.UnsharpMaskCommand.Amount">
            <summary>Gets or sets the value of amount</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.UnsharpMaskCommand.ChannelsToProcess">
            <summary>Gets or sets the

ChannelFlags specifying which channels to process.</summary>
            <remarks>The default value is AllChannels.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.UnsharpMaskCommand.Sigma">
            <summary>Gets or sets the value of sigma</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.UnsharpMaskCommand.Threshold">
            <summary>Gets or sets the value of threshold</summary>
        </member>
        <member name="N:Atalasoft.Imaging.ImageProcessing.Transforms">
            <summary>Contains classes that transform pixel data from one location
to another.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.CompressTransformMode">
            <summary>Enumeration used by

EllipticalTransform and

PolygonTransform.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.CompressTransformMode.Horizontal">
            <summary>Only the horizontal sides will be compressed.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.CompressTransformMode.Vertical">
            <summary>Only the vertical sides will be compressed.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.CompressTransformMode.Both">
            <summary>Both horizontal and vertical sides will be compressed.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransformMode">
            <summary>Enumeration used by

OffsetTransform.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransformMode.DontWrapEdges">
            <summary>Don't wrap the image at the edges.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransformMode.WrapBothEdges">
            <summary>Wrap both X and Y edges.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransformMode.WrapOnlyX">
            <summary>Wrap only the X edges.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransformMode.WrapOnlyY">
            <summary>Wrap only the Y edges.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransformMode">
            <summary>Enumeration used by

RippleTransform.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransformMode.Full">
            <summary>Waves remain at full intensity.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransformMode.Linear">
            <summary>Waves diminish linearly with their distance from
center.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransformMode.Square">
            <summary>Waves diminish with the square of their distance.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransformMode.Sine">
            <summary>Waves diminish with the sine of their distance
(inverse!).</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransformMode.Cosine">
            <summary>Waves diminish with the cosine of their distance.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.SkewDirection">
            <summary>Enumeration used by

SkewCommand.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.SkewDirection.Horizontal">
            <summary>Makes the image skew on the top or bottom.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.SkewDirection.Vertical">
            <summary>Makes the image skew on the left or right.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransformMode">
            <summary>Enumeration used by

WaveTransform.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransformMode.LeftToRightSine">
            <summary>The wave moves from left to right as a sine wave.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransformMode.TopToBottomSine">
            <summary>The wave moves from top to bottom as a sine wave.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransformMode.LeftToRightCosine">
            <summary>The wave moves from left to right as a cosine wave.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransformMode.TopToBottomCosine">
            <summary>The wave moves from top to bottom as a cosine wave.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.BumpMapTransform">
            <summary>    This transform applies a bump map texture to an
    image.</summary>
            <remarks>This method requires a continuous tone image. If the source
image is not continuous, it will attempt to convert the image into
one.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.BumpMapTransform._ctor">
            <summary>Initializes a new instance of BumpMapTransform.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.BumpMapTransform._ctor">
            <summary>Creates a new instance of BumpMapTransform.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.BumpMapTransform._ctor(System.Double,Atalasoft.Imaging.AtalaImage)">
            <summary>Creates a new instance of

BumpMapTransform specifying smoothness, and
bumpMapImage.</summary>
            <param name="smoothness">Controls smoothness of the effect (try between .5 and 1.5 to
start).</param>
            <param name="bumpMapImage">An 8-bit grayscale image to use as the bump map.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.BumpMapTransform._ctor(System.Double,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary>Creates a new instance of the BumpMapTransform effect.</summary>
            <param name="smoothness">Controls smoothness of the effect (try between .5 and 1.5 to
start).</param>
            <param name="bumpMapImage">An 8-bit grayscale image to use as the bump map.</param>
            <param name="transformMode">Specifies the interpolation used with this transform.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.BumpMapTransform.AddToChain(System.Int32,System.Int32)">
            <summary>Adds this transform to the transforms chain.</summary>
            <param name="width">The width of the image to which this transform will be
applied.</param>
            <param name="height">The height of the image to which this transform will be
applied.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.BumpMapTransform.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies BumpMapTransform using the current settings to the
source image.</summary>
            <returns>A new
AtalaImage
containing the processed image. null
(Nothing in VB) if cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.BumpMapTransform.BumpMapImage">
            <summary>Gets or sets the bump map image used in this
transform.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.BumpMapTransform.Smoothness">
            <summary>Gets or sets the smoothness value which controls the
smoothness of the effect (try between .5 and 1.5 to start).</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.BumpMapTransform.TransformMode">
            <summary>Gets or sets the

InterpolationMode used for this transform.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform">
            <summary>Rounds the image into an ellipse or sphere.</summary>
            <remarks>This method requires a continuous tone image. If the source
image is not continuous, it will attempt to convert the image into
one.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform._ctor">
            <summary>Creates a new instance of the EllipticalTransform
object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform._ctor">
            <summary>Creates a new instance of EllipticalTransform.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform._ctor(System.Drawing.Size,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.Transforms.CompressTransformMode)">
            <summary>Creates a new instance of EllipticalTransform specifying
radius, offset and mode.</summary>
            <param name="radius">The width and height of the ellipse.</param>
            <param name="offset">The offset position from the center of the image.</param>
            <param name="mode">The type of

CompressTransformMode used in this transform.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform._ctor(System.Drawing.Size,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.Transforms.CompressTransformMode,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary>Creates a new instance of EllipticalTransform specifying
radius, offset, mode and transformMode.</summary>
            <param name="radius">The width and height of the ellipse.</param>
            <param name="offset">The offset position from the center of the image.</param>
            <param name="mode">The type of

CompressTransformMode used in this transform.</param>
            <param name="transformMode">The

InterpolationMode used for this transform.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform._ctor(System.Drawing.Size,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.Transforms.CompressTransformMode,Atalasoft.Imaging.ImageProcessing.InterpolationMode,System.Drawing.Color)">
            <summary>Creates a new instance of EllipticalTransform specifying
radius, offset, mode, transformMode and backColor.</summary>
            <param name="radius">The width and height of the ellipse.</param>
            <param name="offset">The offset position from the center of the image.</param>
            <param name="mode">The type of

CompressTransformMode used in this transform.</param>
            <param name="transformMode">The

InterpolationMode used for this transform.</param>
            <param name="backColor">The background color to use for newly uncovered areas of the
image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform.AddToChain(System.Int32,System.Int32)">
            <summary>Adds this transform to the transforms chain.</summary>
            <param name="width">The width of the image to be used with this transform.</param>
            <param name="height">The height of the image to be used with this
transform.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies EllipticalTransform using the current settings to the
source image.</summary>
            <returns>AtalaImage
Bitmap</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform.BackColor">
            <summary>Gets or sets the background color to use for newly uncovered
areas of the image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform.Mode">
            <summary>Gets or sets the type of

CompressTransformMode used in this transform.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform.Offset">
            <summary>Gets or set the offset position from the center of the
image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform.Radius">
            <summary>Gets or set the width and height of the ellipse.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform.TransformMode">
            <summary>Gets or sets the

InterpolationMode for this transform.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.FlipCommand">
            <summary>Flips an image horizontally or vertically.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.FlipCommand._ctor">
            <summary>Creates a new instance of the FlipCommand object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.FlipCommand._ctor">
            <summary>Creates a new instance of FlipCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.FlipCommand._ctor(Atalasoft.Imaging.FlipDirection)">
            <summary>Creates a new instance of FlipCommand specifying the type of
flip to perform.</summary>
            <param name="direction">Specifies which direction, horizontal or vertical, to flip
the image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.FlipCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies the FlipCommand using the current settings to the
source image.</summary>
            <returns>null (Nothing in Visual
Basic)</returns>
            <remarks>This method uses in place processing. That is, it
modifies the source image passed to it, rather than creating a new
image to hold the result. Therefore, the return result is always
null (Nothing in Visual
Basic).</remarks>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.FlipCommand.Direction">
            <summary>Gets or sets the type of flip to perform.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.FlipCommand.InPlaceProcessing">
            <summary>    Gets a value indicating if the source image data is
    processed in-place as opposed to returning a new image.</summary>
            <remarks>By default, this value is false. Implementing classes should
override this and set it to true when processing the source image
directly. When this value is true,

ApplyToImage returns null.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.LensTransform">
            <summary>Used to create a zoomed camera lens effect.</summary>
            <remarks>This method requires a continuous tone image. If the source
image is not continuous, it will attempt to convert the image into
one.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.LensTransform._ctor">
            <summary>Creates a new instance of the LensTransform object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.LensTransform._ctor">
            <summary>Creates a new instance of LensTransform.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.LensTransform._ctor(System.Double,System.Drawing.Point)">
            <summary>    Creates a new instance of LensTransform specifying radius
    and offset.</summary>
            <param name="radius">Maximum distance from the center for this effect.</param>
            <param name="offset">The offset position from the center of the image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.LensTransform._ctor(System.Double,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary>Creates a new instance of LensTransform specifying radius,
offset and transformMode.</summary>
            <param name="radius">Maximum distance from the center for this effect.</param>
            <param name="offset">The offset position from the center of the image.</param>
            <param name="transformMode">The

InterpolationMode used for this transform.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.LensTransform.AddToChain(System.Int32,System.Int32)">
            <summary>Adds this transform to the transforms chain.</summary>
            <param name="width">The width of the image to be process.</param>
            <param name="height">The height of the image to be processed.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.LensTransform.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies LensTransformCommand using the current settings to
the source image.</summary>
            <returns>A new
AtalaImage
containing the processed image. null
(Nothing in VB) if cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.LensTransform.Offset">
            <summary>Gets or set the offset position from the center of the
image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.LensTransform.Radius">
            <summary>Gets or sets the maximum distance from the center for this
effect.</summary>
            <remarks>Pixels past this distance will not be affected.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.LensTransform.TransformMode">
            <summary>The

InterpolationMode used with this transform.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.LineSliceTransform">
            <summary>    This transform produces a center-shift transform which
    runs from one side of the image to the other, in a straight
    line.</summary>
            <remarks>This method requires a continuous tone image. If the source
image is not continuous, it will attempt to convert the image into
one.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.LineSliceTransform._ctor">
            <summary>Creates an instance of the LineSliceTransform object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.LineSliceTransform._ctor">
            <summary>Creates a new instance of LineSliceTransform.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.LineSliceTransform._ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>Creates a new instance of

LineSliceTransform object.</summary>
            <param name="endPoint1">Left or top edge of the transform.</param>
            <param name="endPoint2">Right or bottom edge of the transform.</param>
            <param name="horizontalTransform">Specifies if the transform will be horizontal or
vertical.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.LineSliceTransform._ctor(System.Int32,System.Int32,System.Boolean,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary>Creates a new instance of

LineSliceTransform object.</summary>
            <param name="endPoint1">Left or top edge of the transform.</param>
            <param name="endPoint2">Right or bottom edge of the transform.</param>
            <param name="horizontalTransform">Specifies if the transform will be horizontal or
vertical.</param>
            <param name="transformMode">Specifies the interpolation used with this transform.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.LineSliceTransform.AddToChain(System.Int32,System.Int32)">
            <summary>Adds this transform to the transforms chain.</summary>
            <param name="width">The width of the image to process.</param>
            <param name="height">The height of the image to process.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.LineSliceTransform.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies LineSliceTransform using the current settings to the
source image.</summary>
            <returns>A new
AtalaImage
containing the processed image. null
(Nothing in VB) if cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.LineSliceTransform.EndPoint1">
            <summary>Gets or sets the left or top edge of the transform.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.LineSliceTransform.EndPoint2">
            <summary>Gets or sets the right or bottom edge of the
transform.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.LineSliceTransform.HorizontalTransform">
            <summary>Gets or sets the value specifing if the transform will be
horizontal or vertical.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.LineSliceTransform.TransformMode">
            <summary>Gets or sets the

InterpolationMode used for this transform.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform">
            <summary>This transform creates a marbled, wavy, glassy, rippled
effect.</summary>
            <remarks>This method requires a continuous tone image. If the source
image is not continuous, it will attempt to convert the image into
one.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform._ctor">
            <summary>Creates a new instance of the MarbleTransform object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform._ctor">
            <summary>Creates a new instance of MarbleTransform.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform._ctor(System.Double,System.Drawing.Size)">
            <summary>Creates a new instance of MarbleTransform specifying
smoothness and scale.</summary>
            <param name="smoothness">Controls smoothness of the effect. Try between 0.5 and 1.5 to
start.</param>
            <param name="scale">The size of the perlin noise.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform._ctor(System.Double,System.Drawing.Size,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary>Creates a new instance of MarbleTransform specifying
smoothness, scale and transformMode.</summary>
            <param name="smoothness">Controls smoothness of the effect. Try between 0.5 and 1.5 to
start.</param>
            <param name="scale">The size of the perlin noise.</param>
            <param name="transformMode">The

InterpolationMode used for this transform.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform._ctor(System.Double,System.Drawing.Size,Atalasoft.Imaging.ImageProcessing.InterpolationMode,System.Drawing.Color)">
            <summary>Creates a new instance of MarbleTransform specifying
smoothness, scale, transformMode and backColor.</summary>
            <param name="smoothness">Controls smoothness of the effect. Try between 0.5 and 1.5 to
start.</param>
            <param name="scale">The size of the perlin noise.</param>
            <param name="transformMode">The

InterpolationMode used for this transform.</param>
            <param name="backColor">The background color to use for newly uncovered areas of the
image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform.AddToChain(System.Int32,System.Int32)">
            <summary>Adds this transform to the transforms chain.</summary>
            <param name="width">The width of the image to process.</param>
            <param name="height">The height of the image to process.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies MarbleTransform using the current settings to the
source image.</summary>
            <returns>A new
AtalaImage
containing the processed image. null
(Nothing in VB) if cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform.BackColor">
            <summary>Gets or sets the background color to use for newly uncovered
areas of the image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform.Scale">
            <summary>Gets or sets the size of the perlin noise.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform.Smoothness">
            <summary>Gets or sets the smoothness of the transform.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform.TransformMode">
            <summary>Gets or sets the

InterpolationMode used for this transform.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform">
            <summary>Moves the image on the canvas by a specified number of
pixels.</summary>
            <remarks>This method requires a continuous tone image. If the source
image is not continuous, it will attempt to convert the image into
one.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform._ctor">
            <remarks>Creates a new OffsetTransform object.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform._ctor">
            <summary>Creates a new instance of OffsetTransform.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform._ctor(System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransformMode)">
            <summary>Creates a new instance of OffsetTransform specifying offset
and offsetMode.</summary>
            <param name="offset">The new left, top position for the image.</param>
            <param name="offsetMode">Style of

OffsetTransformMode to perform.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform._ctor(System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransformMode,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary>Creates a new instance of OffsetTransform specifying offset,
offsetMode and transformMode.</summary>
            <param name="offset">The new left, top position for the image.</param>
            <param name="offsetMode">Style of

OffsetTransformMode to perform.</param>
            <param name="transformMode">    The
    
    InterpolationMode used for this transform.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform._ctor(System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransformMode,Atalasoft.Imaging.ImageProcessing.InterpolationMode,System.Drawing.Color)">
            <summary>Creates a new instance of OffsetTransform specifying offset,
offsetMode, transformMode and backColor.</summary>
            <param name="offset">The new left, top position for the image.</param>
            <param name="offsetMode">Style of

OffsetTransformMode to perform.</param>
            <param name="transformMode">    The
    
    InterpolationMode used for this transform.</param>
            <param name="backColor">The background color to use on newly uncovered areas of the
image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform.AddToChain(System.Int32,System.Int32)">
            <summary>Adds this transform to the transforms chain.</summary>
            <returns>Null</returns>
            <param name="width">The width of the image to process.</param>
            <param name="height">The height of the image to process.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies OffsetTransform using the current settings to the
source image.</summary>
            <returns>A new
AtalaImage
containing the processed image. null
(Nothing in VB) if cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform.BackColor">
            <summary>Gets or sets the background color to use on newly uncovered
areas of the image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform.Offset">
            <summary>Gets or set the new left, top position for the image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform.OffsetMode">
            <summary>Gets or sets the style of

OffsetTransformMode to perform.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform.TransformMode">
            <summary>Gets or sets the

InterpolationMode of this transform.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.PerlinTransform">
            <summary>    This effect is similar to the marble transform, but the
    image tends to break up less.</summary>
            <remarks>This method requires a continuous tone image. If the source
image is not continuous, it will attempt to convert the image into
one.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PerlinTransform._ctor">
            <summary>Creates a new instance of the PerlinTransform object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PerlinTransform._ctor">
            <summary>Creates a new instance of PerlinTransform.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PerlinTransform._ctor(System.Double,System.Drawing.Size)">
            <summary>Creates a new instance of PerlinTransform specifying the
smoothness and scale.</summary>
            <param name="smoothness">The smoothness of this effect.</param>
            <param name="scale">The size of the perlin noise.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PerlinTransform._ctor(System.Double,System.Drawing.Size,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary>Creates a new instance of PerlinTransform specifying
smoothness, scale and transform mode.</summary>
            <param name="smoothness">The smoothness of this effect.</param>
            <param name="scale">The size of the perlin noise.</param>
            <param name="transformMode">The InterpolationMode of this transform.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PerlinTransform.AddToChain(System.Int32,System.Int32)">
            <summary>Adds this transform to the transforms chain.</summary>
            <param name="width">The width of the image to process.</param>
            <param name="height">The height of the image to process.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PerlinTransform.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies PerlinTransform using the current settings to the
source image.</summary>
            <returns>A new
AtalaImage
containing the processed image. null
(Nothing in VB) if cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PerlinTransform.Scale">
            <summary>Gets or sets the size of the perlin noise.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PerlinTransform.Smoothness">
            <summary>Gets or sets the smoothness of this effect.</summary>
            <remarks>Try values between 0.5 and 1.5 to start.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PerlinTransform.TransformMode">
            <summary>Gets or sets the

InterpolationMode of this transform.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform">
            <summary>    This transform attracts pixels towards the center of the
    image.</summary>
            <remarks>This method requires a continuous tone image. If the source
image is not continuous, it will attempt to convert the image into
one.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform._ctor">
            <summary>Creates a new instance of the PinchTransform object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform._ctor">
            <summary>Creates a new instance of PinchTransform.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform._ctor(System.Double,System.Double,System.Drawing.Point)">
            <summary>Creates a new instance of PinchTransform specifying
maxRadius, amount and offset.</summary>
            <param name="maxRadius">Maximum distance from the center for this effect.</param>
            <param name="amount">The number of pixels to pinch.</param>
            <param name="offset">The offset position from the center of the image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform._ctor(System.Double,System.Double,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary>Creates a new instance of PinchTransform specifying
maxRadius, amount, offset and transformMode.</summary>
            <param name="maxRadius">Maximum distance from the center for this effect.</param>
            <param name="amount">The number of pixels to pinch.</param>
            <param name="offset">The offset position from the center of the image.</param>
            <param name="transformMode">The

InterpolationMode of this transform.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform._ctor(System.Double,System.Double,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.InterpolationMode,System.Drawing.Color)">
            <summary>Creates a new instance of PinchTransform specifying
maxRadius, amount, offset, transformMode and backColor.</summary>
            <param name="maxRadius">Maximum distance from the center for this effect.</param>
            <param name="amount">The number of pixels to pinch.</param>
            <param name="offset">The offset position from the center of the image.</param>
            <param name="transformMode">The

InterpolationMode of this transform.</param>
            <param name="backColor">The background color used for newly uncovered areas of the
image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform.AddToChain(System.Int32,System.Int32)">
            <summary>Adds this transform to the transforms chain.</summary>
            <param name="width">The width of the image to process.</param>
            <param name="height">The height of the image to process.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies PinchTransform using the current settings to the
source image.</summary>
            <returns>A new
AtalaImage
containing the processed image. null
(Nothing in VB) if cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform.Amount">
            <summary>Gets or sets the number of pixels to pinch.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform.BackColor">
            <summary>Gets or sets the background color used for newly uncovered
areas of the image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform.MaxRadius">
            <summary>Gets or sets the maximum distance from the center for this
effect.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform.Offset">
            <summary>Gets or set the offset position from the center of the
image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform.TransformMode">
            <summary>Gets or sets the

InterpolationMode of this transform.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform">
            <summary>    This transform resizes image rows (or columns) to fit
    inside the specified polygon. This polygon must be convex. If
    it is concave, the largest convex polygon that can be formed
    from the points will be used.</summary>
            <remarks>This method requires a continuous tone image. If the source
image is not continuous, it will attempt to convert the image into
one.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform._ctor">
            <summary>Creates a new PolygonTransform object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform._ctor">
            <summary>Creates a new instance of PolygonTransform.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform._ctor(System.Drawing.Point[],Atalasoft.Imaging.ImageProcessing.Transforms.CompressTransformMode)">
            <summary>Creates a new instance of

PolygonTransform specifying points, and mode.</summary>
            <param name="points">Array of points for the polygon.</param>
            <param name="mode">The compress method to use on this transform.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform._ctor(System.Drawing.Point[],Atalasoft.Imaging.ImageProcessing.Transforms.CompressTransformMode,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary>Creates a new instance of

PolygonTransform specifying points, mode and
transformMode.</summary>
            <param name="points">Array of points for the polygon.</param>
            <param name="mode">The compress method to use on this transform.</param>
            <param name="transformMode">Specifies the interpolation used with this transform.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform._ctor(System.Drawing.Point[],Atalasoft.Imaging.ImageProcessing.Transforms.CompressTransformMode,Atalasoft.Imaging.ImageProcessing.InterpolationMode,System.Drawing.Color)">
            <summary>Creates a new instance of

PolygonTransform specifying points, mode, transformMode and
backColor.</summary>
            <param name="points">Array of points for the polygon.</param>
            <param name="mode">The compress method to use on this transform.</param>
            <param name="transformMode">Specifies the interpolation used with this transform.</param>
            <param name="backColor">The background color to use for newly uncovered areas of the
image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform.AddToChain(System.Int32,System.Int32)">
            <summary>Adds this transform to the transforms chain.</summary>
            <param name="width">The width of the image to process.</param>
            <param name="height">The height of the image to process.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies PolygonTransform using the current settings to the
source image.</summary>
            <returns>A new
AtalaImage
containing the processed image. null
(Nothing in VB) if cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform.GetPoints">
            <summary>Gets the points used in the polygon.</summary>
            <returns>An array of Point.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform.SetPoints(System.Drawing.Point[])">
            <summary>Sets the points used in the polygon.</summary>
            <returns>Null</returns>
            <param name="points">An array of Point to use for the polygon.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform.BackColor">
            <summary>Gets or sets the background color to use for newly uncovered
areas of the image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform.Mode">
            <summary>Gets or sets the

CompressTransformMode to use on this transform.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform.TransformMode">
            <summary>Gets or sets the

InterpolationMode of this transform.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.PushCommand">
            <summary>Perform a point to point warp of an image, creating a smear
effect.</summary>
            <remarks>This method requires a continuous tone image. If the source
image is not continuous, it will attempt to convert the image into
one.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PushCommand._ctor">
            <summary>Creates a new instance of PushCommand
specifying fromPixel, and toPixel.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PushCommand._ctor">
            <summary>Creates a new instance of PushCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PushCommand._ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>Creates a new instance of PushCommand specifying the from and
to positions.</summary>
            <param name="fromPixel">The position on the image to push from.</param>
            <param name="toPixel">The position on the image to move the pixels to.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PushCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies PushCommandCommand using the current settings to the
source image.</summary>
            <returns>A new
AtalaImage
containing the processed image. null (Nothing in VB)
if cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PushCommand.FromPixel">
            <summary>Gets or sets the position on the image to push from.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PushCommand.ToPixel">
            <summary>Gets or sets the position on the image to move the pixels
to.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand">
            <summary>    Similar to the
    
    PolygonTransform, this transform additionally lets you
    specify a source polygon to allow further control over the
    warping of the image.</summary>
            <remarks>This method requires a continuous tone image. If the source
image is not continuous, it will raise the
ChangePixelFormat event and convert the image to a
continuous tone format, which can be 8-bit grayscale, RGB, or
RGBA.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand._ctor">
            <summary>Creates a new instance of the QuarilateralWarpCommand
object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand._ctor">
            <summary>Creates a new instance of QuadrilateralWarpCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand._ctor(System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.InterpolationMode,System.Drawing.Color)">
            <summary>Creates a new instance of

QuadrilateralWarpCommand specifying destination points that
will yeild a perspective transform.</summary>
            <param name="destBottomLeft">The bottom left point of the destination image in
pixels.</param>
            <param name="destTopLeft">The top left point of the destination image in pixels.</param>
            <param name="destTopRight">The top right point of the destination image in
pixels.</param>
            <param name="destBottomRight">The bottom right point of the destination image in
pixels.</param>
            <param name="interpolation">The interpolation method to use.</param>
            <param name="backgroundColor">The background color used for newly uncovered areas of the
image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand._ctor(System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.InterpolationMode,System.Drawing.Color)">
            <summary>Creates a new instance of

QuadrilateralWarpCommand specifying sourceBottomLeft,
sourceTopLeft, sourceTopRight, sourceBottomRight, destBottomLeft,
destTopLeft, destTopRight, destBottomRight, and
interpolation.</summary>
            <param name="sourceBottomLeft">The bottom left point of the source image in pixels.</param>
            <param name="sourceTopLeft">The top left point of the source image in pixels.</param>
            <param name="sourceTopRight">The top right point of the source image in pixels.</param>
            <param name="sourceBottomRight">The bottom right point of the source image in pixels.</param>
            <param name="destBottomLeft">The bottom left point of the destination image in
pixels.</param>
            <param name="destTopLeft">The top left point of the destination image in pixels.</param>
            <param name="destTopRight">The top right point of the destination image in
pixels.</param>
            <param name="destBottomRight">The bottom right point of the destination image in
pixels.</param>
            <param name="interpolation">The interpolation method to use.</param>
            <param name="backgroundColor">The background color used for newly uncovered areas of the
image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies the QuadrilateralWarpCommand Filters using the
current settings to the source image.</summary>
            <returns>A new
AtalaImage
containing the processed image. null (Nothing in VB)
if cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.BackgroundColor">
            <summary>Gets or sets the value of backgroundColor</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.DestBottomLeft">
            <summary>Gets or sets the bottom left point of the destination image
in pixels.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.DestBottomRight">
            <summary>Gets or sets the bottom right point of the destination image
in pixels.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.DestTopLeft">
            <summary>Gets or sets the top left point of the destination image in
pixels.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.DestTopRight">
            <summary>Gets or sets the top right point of the destination image in
pixels.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.Interpolation">
            <summary>Gets or sets the

InterpolationMode of this transform.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.SourceBottomLeft">
            <summary>Gets or sets the bottom left point of the source image in
pixels.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.SourceBottomRight">
            <summary>Gets or sets the bottom right point of the source image in
pixels.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.SourceTopLeft">
            <summary>Gets or sets the top left point of the source image in
pixels.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.SourceTopRight">
            <summary>Gets or sets the top right point of the source image in
pixels.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.RandomTransform">
            <summary>    This transform randomly modifies the pixels of an
    image.</summary>
            <remarks>This method requires a continuous tone image. If the source
image is not continuous, it will attempt to convert the image into
one.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RandomTransform._ctor">
            <summary>Creates a new instance of the RandomTransform object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RandomTransform._ctor">
            <summary>Creates a new instance of RandomTransform.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RandomTransform._ctor(System.Double)">
            <summary>Creates a new instance of

RandomTransform specifying amount.</summary>
            <param name="amount">Amount to offset the pixels.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RandomTransform._ctor(System.Double,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary>Creates a new instance of

RandomTransform specifying amount and transformMode.</summary>
            <param name="amount">Amount to offset the pixels.</param>
            <param name="transformMode">Specifies the interpolation used with this transform.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RandomTransform.AddToChain(System.Int32,System.Int32)">
            <summary>Adds this transform to the transforms chain.</summary>
            <param name="width">The width of the image to process.</param>
            <param name="height">The height of the image to process.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RandomTransform.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies RandomTransform using the current settings to the
source image.</summary>
            <returns>A new
AtalaImage
containing the processed image. null
(Nothing in VB) if cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.RandomTransform.Amount">
            <summary>Gets or sets the amount of offset to apply to the
pixels.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.RandomTransform.TransformMode">
            <summary>Gets or sets the

InterpolationMode of this transform.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand">
            <summary>Overlays the current image onto a specified position on a new
image of the specified background color.</summary>
            <remarks>    This command can be used for adding a border to an
    image.
    This method requires a continuous tone image. If the
    source image is not continuous, it will raise the
    ChangePixelFormat event and convert the image
    to a continuous tone format, which can be 8-bit grayscale, RGB,
    or RGBA.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand._ctor">
            <summary>Creates a new instance of the ResizeCanvasCommand
object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand._ctor">
            <summary>Creates a new instance of ResizeCanvasCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand._ctor(System.Drawing.Size,System.Drawing.Point,System.Drawing.Color)">
            <summary>Creates a new instance of

ResizeCanvasCommand specifying canvasSize, position,
canvasColor, and canvasPaletteIndex.</summary>
            <param name="canvasSize">The size of the new canvas.</param>
            <param name="position">The position of the image on the new canvas.</param>
            <param name="canvasColor">The background color of the canvas</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand._ctor(System.Drawing.Size,System.Drawing.Point,System.Int32)">
            <summary>Creates a new instance of

ResizeCanvasCommand specifying canvasSize, position,
canvasColor, and canvasPaletteIndex.</summary>
            <param name="canvasSize">The size of the new canvas.</param>
            <param name="position">The position of the image on the new canvas.</param>
            <param name="canvasPaletteIndex">The palette index of the canvas</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies the ResizeCanvasCommand Transforms using the current
settings to the source image.</summary>
            <returns>A new
AtalaImage
containing the processed image. null (Nothing in VB)
if cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand.CanvasColor">
            <summary>Gets or sets the background color of the canvas.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand.CanvasPaletteIndex">
            <summary>Gets or sets the palette index of the canvas.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand.CanvasSize">
            <summary>Gets or sets the size of the new canvas.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand.Position">
            <summary>Gets or sets the position of the image on the new
canvas.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform">
            <summary>Creates a water ripple effect on the image.</summary>
            <remarks>This method requires a continuous tone image. If the source
image is not continuous, it will attempt to convert the image into
one.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform._ctor">
            <summary>Creates a new instance of the RippleTransform object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform._ctor">
            <summary>Creates a new instance of RippleTransform.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform._ctor(System.Double,System.Double,System.Double,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransformMode)">
            <summary>Creates a new instance of RippleTransform specifying
maxRadius, intensity, periods, offset and mode.</summary>
            <param name="maxRadius">Maximum distance from the center for this effect.</param>
            <param name="intensity">Amount of intensity. (1 = no effect)</param>
            <param name="periods">Number of periods in the distance wave.</param>
            <param name="offset">The offset position from the center of the image.</param>
            <param name="mode">The

RippleTransformMode to use.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform._ctor(System.Double,System.Double,System.Double,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransformMode,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary>Creates a new instance of RippleTransform specifying
maxRadius, intensity, periods, offset, mode and
transformMode.</summary>
            <param name="maxRadius">Maximum distance from the center for this effect.</param>
            <param name="intensity">Amount of intensity. (1 = no effect)</param>
            <param name="periods">Number of periods in the distance wave.</param>
            <param name="offset">The offset position from the center of the image.</param>
            <param name="mode">The

RippleTransformMode to use.</param>
            <param name="transformMode">The

InterpolationMode of this transform.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform.AddToChain(System.Int32,System.Int32)">
            <summary>Adds this transform to the transforms chain.</summary>
            <param name="width">The width of the image to process.</param>
            <param name="height">The height of the image to process.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies RippleTransform using the current settings to the
source image.</summary>
            <returns>A new
AtalaImage
containing the processed image. null
(Nothing in VB) if cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform.Intensity">
            <summary>Gets or sets the amount of intensity.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform.MaxRadius">
            <summary>Gets or sets the maximum distance from the center for this
effect.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform.Mode">
            <summary>Gets or sets the

RippleTransformMode to use.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform.Offset">
            <summary>Gets or set the offset position from the center of the
image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform.Periods">
            <summary>Gets or sets the number of periods in the distance
wave.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform.TransformMode">
            <summary>Gets or sets the

InterpolationMode of this transform.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand">
            <summary>    This will rotate an image by the specified number of
    degrees.</summary>
            <remarks>This command will work with all
pixel
formats except Pixel4bppIndexed. If a
Pixel4bppIndexed image is passed to this command, it will attempt
to convert the image to Pixel8bppIndexed image
before rotating it.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand._ctor">
            <remarks>Creates a new instance of the RotateCommand object.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand._ctor">
            <summary>Creates a new instance of RotateCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand._ctor(System.Double)">
            <summary>Creates a new instance of

RotateCommand specifying the angle.</summary>
            <param name="angle">The angle of rotation in degrees.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand._ctor(System.Double,System.Drawing.Color)">
            <summary>Creates a new instance of

RotateCommand specifying angle and backgroundColor.</summary>
            <param name="angle">The angle of rotation in degrees.</param>
            <param name="backgroundColor">The color of the background when angle is not a multiple of
90 degrees.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand._ctor(System.Double,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary>Creates a new instance of

RotateCommand specifying angle, and interpolation.</summary>
            <param name="angle">The angle of rotation in degrees.</param>
            <param name="interpolation">The interpolation used for rotation.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand._ctor(System.Double,Atalasoft.Imaging.ImageProcessing.InterpolationMode,System.Drawing.Color)">
            <summary>Creates a new instance of

RotateCommand specifying angle, interpolation, and
backgroundColor.</summary>
            <param name="angle">The angle of rotation in degrees.</param>
            <param name="interpolation">The interpolation used for rotation.</param>
            <param name="backgroundColor">The color of the background when angle is not a multiple of
90 degrees.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies the RotateCommand Transforms using the current
settings to the source image.</summary>
            <returns>A new
AtalaImage
containing the processed image. null (Nothing in VB)
if cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand.Angle">
            <summary>Gets or sets the angle of rotation in degrees.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand.BackgroundColor">
            <summary>Gets or sets the color of the background when angle is not a
multiple of 90 degrees.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand.Interpolation">
            <summary>Gets or sets the

InterpolationMode of this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand">
            <summary>    Using this command you can shift the top, bottom, left or
    right side of an image independently.</summary>
            <remarks>This command does not work with
Pixel1bppIndexed or
Pixel4bppIndexed
pixel
formats. If an image with one of these formats is passed into
this command, it will attempt to convert it to
Pixel8bppGrayscale or
Pixel8bppIndexed respectively.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand._ctor">
            <summary>Creates a new instance of the SkewCommand object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand._ctor">
            <summary>Creates a new instance of SkewCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand._ctor(Atalasoft.Imaging.ImageProcessing.Transforms.SkewDirection,System.Int32)">
            <summary>Creates a new instance of

SkewCommand specifying direction and offset.</summary>
            <param name="direction">Determines whether the skew is horizontal or vertical.</param>
            <param name="offset">The number of pixels to skew.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand._ctor(Atalasoft.Imaging.ImageProcessing.Transforms.SkewDirection,System.Int32,System.Drawing.Color)">
            <summary>Creates a new instance of

SkewCommand specifying direction, offset and backColor.</summary>
            <param name="direction">Determines whether the skew is horizontal or vertical.</param>
            <param name="offset">The number of pixels to skew.</param>
            <param name="backColor">A color to used in newly exposed areas.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand._ctor(Atalasoft.Imaging.ImageProcessing.Transforms.SkewDirection,System.Int32,System.Drawing.Color,System.Boolean)">
            <summary>Creates a new instance of

SkewCommand specifying direction, offset, backColor, and
fastSkew.</summary>
            <param name="direction">Determines whether the skew is horizontal or vertical.</param>
            <param name="offset">The number of pixels to skew.</param>
            <param name="backColor">A color to used in newly exposed areas.</param>
            <param name="fastSkew">Provides a faster but less accurate skew.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies the SkewCommand Transforms using the current settings
to the source image.</summary>
            <returns>A new
AtalaImage
containing the processed image. null (Nothing in VB)
if cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand.BackColor">
            <summary>Gets or sets a color to used in newly exposed areas.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand.Direction">
            <summary>Gets or sets a value to determine whether the skew is
horizontal or vertical.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand.FastSkew">
            <summary>Gets or sets a value indicating if speed is more important
then quality.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand.Offset">
            <summary>Gets or sets the number of pixels to skew.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform">
            <summary>    This transform will rotate the image about the center
    with a constant angular distance.</summary>
            <remarks>This method requires a continuous tone image. If the source
image is not continuous, it will attempt to convert the image into
one.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform._ctor">
            <summary>Creates a new instance of the SpinTransform object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform._ctor">
            <summary>Creates a new instance of SpinTransform.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform._ctor(System.Double,System.Double,System.Drawing.Point,System.Drawing.Color)">
            <summary>Creates a new instance of SpinTransform specifying maxRadius,
maxAngleOffset, offset and backColor.</summary>
            <param name="maxRadius">Maximum distance from the center for this effect.</param>
            <param name="maxAngleOffset">Angular distance to spin pixels. (degrees)</param>
            <param name="offset">The offset position from the center of the image.</param>
            <param name="backColor">The background color to use for newly uncovered areas of the
image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform._ctor(System.Double,System.Double,System.Drawing.Point,System.Drawing.Color,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary>Creates a new instance of SpinTransform specifying maxRadius,
maxAngleOffset, offset, backColor and transformMode.</summary>
            <param name="maxRadius">Maximum distance from the center for this effect.</param>
            <param name="maxAngleOffset">Angular distance to spin pixels. (degrees)</param>
            <param name="offset">The offset position from the center of the image.</param>
            <param name="backColor">The background color to use for newly uncovered areas of the
image.</param>
            <param name="transformMode">The

InterpolationMode of this transform.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform.AddToChain(System.Int32,System.Int32)">
            <summary>Adds this transform to the transforms chain.</summary>
            <param name="width">The width of the image to process.</param>
            <param name="height">The height of the image to process.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies SpinTransform using the current settings to the
source image.</summary>
            <returns>A new
AtalaImage
containing the processed image. null
(Nothing in VB) if cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform.BackColor">
            <summary>Gets or sets the background color to use for newly uncovered
areas of the image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform.MaxAngleOffset">
            <summary>Gets or sets the angular distance to spin pixels.
(degrees)</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform.MaxRadius">
            <summary>Gets or sets the maximum distance from the center for this
effect.</summary>
            <remarks>Pixels outside of this radius will not be affected.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform.Offset">
            <summary>Gets or set the offset position from the center of the
image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform.TransformMode">
            <summary>Gets or sets the

InterpolationMode of this transform.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform">
            <summary>    A SpinWaveTransform rotates the image about the center
    with a variable angular distance. The distance varies in a sine
    wave pattern.</summary>
            <remarks>This method requires a continuous tone image. If the source
image is not continuous, it will attempt to convert the image into
one.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform._ctor">
            <remarks>Creates a new instance of the SpinWaveTransform
object.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform._ctor">
            <summary>Creates a new instance of SpinWaveTransform.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform._ctor(System.Double,System.Double,System.Double,System.Drawing.Point)">
            <summary>Creates a new instance of SpinWaveTransform specifying
maxRadius, maxAngleOffset, periods and offset.</summary>
            <param name="maxRadius">Maximum distance from the center for this effect.</param>
            <param name="maxAngleOffset">Angular distance to spin pixels (degrees).</param>
            <param name="periods">Number of periods in the distance wave.</param>
            <param name="offset">The offset position from the center of the image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform._ctor(System.Double,System.Double,System.Double,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary>Creates a new instance of SpinWaveTransform specifying
maxRadius, maxAngleOffset, periods, offset and
transformMode.</summary>
            <param name="maxRadius">Maximum distance from the center for this effect.</param>
            <param name="maxAngleOffset">Angular distance to spin pixels (degrees).</param>
            <param name="periods">Number of periods in the distance wave.</param>
            <param name="offset">The offset position from the center of the image.</param>
            <param name="transformMode">The

InterpolationMode of this transform.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform._ctor(System.Double,System.Double,System.Double,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.InterpolationMode,System.Drawing.Color)">
            <summary>Creates a new instance of SpinWaveTransform specifying
maxRadius, maxAngleOffset, periods, offset, transformMode and
backColor.</summary>
            <param name="maxRadius">Maximum distance from the center for this effect.</param>
            <param name="maxAngleOffset">Angular distance to spin pixels (degrees).</param>
            <param name="periods">Number of periods in the distance wave.</param>
            <param name="offset">The offset position from the center of the image.</param>
            <param name="transformMode">The

InterpolationMode of this transform.</param>
            <param name="backColor">The background color of newly uncovered areas of the
image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform.AddToChain(System.Int32,System.Int32)">
            <param name="width">The width of the image to be processed.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform.AddToChain(System.Int32,System.Int32)">
            <param name="height">The height of the image to be processed.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies SpinWaveTransform using the current settings to the
source image.</summary>
            <returns>A new
AtalaImage
containing the processed image. null (Nothing in VB)
if cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform.BackColor">
            <summary>Gets or sets the background color of newly uncovered areas of
the image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform.MaxAngleOffset">
            <summary>Gets or sets the angular distance to spin pixels
(degrees).</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform.MaxRadius">
            <summary>Gets or sets the maximum distance from the center for this
effect.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform.Offset">
            <summary>Gets or set the offset position from the center of the
image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform.Periods">
            <summary>Gets or sets the number of periods in the distance
wave.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform.TransformMode">
            <summary>Gets or sets the

InterpolationMode of this transform.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.Transform">
            <summary>A base class that is used for transforms.</summary>
            <remarks>A transform uses an algorithm to translate pixels from one
position to another. Transforms can be chained together such that
they can all be applied at once to the same image in one
pass.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.Transform.AddToChain(System.Int32,System.Int32)">
            <summary>Adds this transform to the transforms chain.</summary>
            <param name="width">The width of the image to process.</param>
            <param name="height">The height of the image to process.</param>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand">
            <summary>    This command allows you to combine multiple transforms
    into a single command call.</summary>
            <remarks>This method requires a continuous tone image. If the source
image is not continuous, it will attempt to convert the image into
one.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand._ctor">
            <summary>Creates a new instance of the TransformChainCommand
object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand._ctor">
            <summary>Create a new instance of the TransformChainCommand.</summary>
            <remarks>You must add a least one transform to the collection before
using this command.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand._ctor(System.Drawing.Color)">
            <summary>Creates a new instance of TransformChainCommand specifying
the background color of the resulting image.</summary>
            <remarks>Creates a new instance of TransformChainCommand specifying
the backColor.</remarks>
            <param name="backColor">The background color to used for newly uncovered areas of the
image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand._ctor(System.Drawing.Color,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary>Creates a new instance of TransformChainCommand specifying
the background color and transform mode.</summary>
            <remarks>Creates a new instance of the TransformChainCommand
specifying backColor and transformMode.</remarks>
            <param name="backColor">The background color to used for newly uncovered areas of the
image.</param>
            <param name="transformMode">The interpolation mode to use for this transform.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand._ctor(System.Drawing.Color,Atalasoft.Imaging.ImageProcessing.InterpolationMode,Atalasoft.Imaging.ImageProcessing.Transforms.Transform[])">
            <summary>Creates a new instance of TransformChainCommand specifying
the background color, transform mode and a collection of transforms
to apply.</summary>
            <remarks>Creates a new instance of the TransformChainCommand
specifying backColor, transformMode and transforms.</remarks>
            <param name="backColor">The background color to used for newly uncovered areas of the
image.</param>
            <param name="transformMode">The interpolation mode to use for this transform.</param>
            <param name="transforms">The transforms to add to this command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand._ctor(Atalasoft.Imaging.ImageProcessing.Transforms.Transform[])">
            <summary>Creates a new instance of TransformChainCommand specifying
the transforms.</summary>
            <param name="transforms">The transforms to add to this command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.Add(Atalasoft.Imaging.ImageProcessing.Transforms.Transform)">
            <summary>Adds a transform to the collection.</summary>
            <param name="transform">The transform to add.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies TransformChainCommand using the current settings to
the source image.</summary>
            <returns>A new
AtalaImage
containing the processed image. null (Nothing in VB)
if cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.Clear">
            <summary>Removes all of the transforms from the collection.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.CopyTo">
            <summary>Copies transfoms from the internal collection to an
array.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.CopyTo(System.Array,System.Int32)">
            <summary>Copies transfoms from the internal collection to an
array.</summary>
            <param name="array">An array to copy the transforms into.</param>
            <param name="arrayIndex">The index to start copying transforms into.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.CopyTo(Atalasoft.Imaging.ImageProcessing.Transforms.Transform[],System.Int32)">
            <summary>Copies transfoms from the internal collection to an
array.</summary>
            <param name="array">An array to copy the transforms into.</param>
            <param name="arrayIndex">The index to start copying transforms into.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.GetEnumerator">
            <summary>This allows the use of foreach statements on the transforms
collection.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.BackColor">
            <summary>Gets or sets the background color to use on newly uncovered
areas of the image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.Count">
            <summary>Returns the number of transforms in the collection.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.IsSynchronized">
            <summary>Gets a value indicating whether access to the transforms
collection is synchronized.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.SyncRoot">
            <summary>Gets an object that can be used to synchronize access to the
transforms collection.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.TransformMode">
            <summary>Gets or sets the

InterpolationMode of this transform.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransform">
            <summary>    This allows you to write your own transform methods and
    add them to the transform chain, just like the built-in
    transforms. To do this, you must supply a
    
    UserTransformCallback.</summary>
            <remarks>    This method will be called once for
    each pixel in the output image. You need to set the
    FromPixel parameter to the pixels (may be
    fractional) that the input X and Y values will be pulled from.
    Again, you tell the transform processor where to pull the
    source pixel from.
    Your callback method should be able
    to handle any kind of input range; inputs may be outside the
    image rectangle, if you are chaining tranforms. Likewise, your
    function can output values that are outside the image
    rectangle. If your function is the last in the chain, values
    outside the image rect will be set to the background
    color.
    This method requires a continuous tone image. If the
    source image is not continuous, it will attempt to convert the
    image into one.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransform._ctor">
            <summary>Creates a new instance of the UserTransform object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransform._ctor(Atalasoft.Imaging.ImageProcessing.Transforms.UserTransformCallback)">
            <summary>Creates a new instance of the UserTransform class specifying
the use transform callback.</summary>
            <param name="callback">Delegate which will be called for each pixel processed in the
output image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransform._ctor(Atalasoft.Imaging.ImageProcessing.Transforms.UserTransformCallback,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary>Creates a new instance of the UserTransform class specifying
the use transform callback and interpolation mode.</summary>
            <param name="callback">Delegate which will be called for each pixel processed in the
output image.</param>
            <param name="transformMode">Specifies the interpolation used with this transform.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransform._ctor(Atalasoft.Imaging.ImageProcessing.Transforms.UserTransformCallback,Atalasoft.Imaging.ImageProcessing.InterpolationMode,System.Drawing.Color)">
            <summary>Creates a new instance of the UserTransform class specifying
the use transform callback, interpolation mode, and background
color.</summary>
            <param name="callback">Delegate which will be called for each pixel processed in the
output image.</param>
            <param name="transformMode">Specifies the interpolation used with this transform.</param>
            <param name="backColor">The background color to use for newly uncovered areas of the
image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransform.AddToChain(System.Int32,System.Int32)">
            <summary>Adds this transform to the transforms chain.</summary>
            <param name="width">The width of the image to process.</param>
            <param name="height">The height of the image to process.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransform.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies UserTransform using the current settings to the
source image.</summary>
            <returns>A new
AtalaImage
containing the processed image. null
(Nothing in VB) if cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransform.BackColor">
            <summary>Gets or sets the background color used when a transform
uncovers part of the image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransform.Callback">
            <summary>Gets or sets the UserTransformCallback delegate which will be
called for each pixel processed in the output image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransform.TransformMode">
            <summary>Gets or sets the

InterpolationMode of this transform.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransformData">
            <summary>This class is used in the UserTransformCallback to indicate
the pixel locations of the transform.</summary>
            <remarks>See UserTransform.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransformData._ctor">
            <summary>Initializes a new instance of UserTransformData.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransformData._ctor">
            <summary>Initializes a new instance of UserTransformData.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransformData._ctor(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>Initializes a new instance of UserTransformData specifying
the to and from points.</summary>
            <param name="currentPixel">The current pixel to transform.</param>
            <param name="fromPixel">The value which the pixel which should move to the current
pixel.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransformData.CurrentPixel">
            <summary>Gets the current pixel to transform.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransformData.FromPixel">
            <summary>Gets or sets the value which the pixel which should move to
the current pixel.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform">
            <summary>    This transform moves across the image with a sine wave
    pattern.</summary>
            <remarks>This method requires a continuous tone image. If the source
image is not continuous, it will attempt to convert the image into
one.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform._ctor">
            <remarks>Creates a new instance of the WaveTransform object.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform._ctor">
            <summary>Creates a new instance of WaveTransform.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform._ctor(System.Double,System.Double,Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransformMode)">
            <summary>Creates a new instance of

WaveTransform specifying maxOffsetPercent, periods and
mode.</summary>
            <param name="maxOffsetPercent">Maximum offset percent for the wave.</param>
            <param name="periods">Number of periods in the wave.</param>
            <param name="mode">The style of wave transform to create.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform._ctor(System.Double,System.Double,Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransformMode,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary>Creates a new instance of

WaveTransform specifying maxOffsetPercent, periods, mode and
transformMode.</summary>
            <param name="maxOffsetPercent">Maximum offset percent for the wave.</param>
            <param name="periods">Number of periods in the wave.</param>
            <param name="mode">The style of wave transform to create.</param>
            <param name="transformMode">Specifies the interpolation used with this transform.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform.AddToChain(System.Int32,System.Int32)">
            <summary>Adds this transform to the transforms chain.</summary>
            <param name="width">The width of the image to process.</param>
            <param name="height">The height of the image to process.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies WaveTransform using the current settings to the
source image.</summary>
            <returns>A new
AtalaImage
containing the processed image. null
(Nothing in VB) if cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform.MaxOffsetPercent">
            <summary>Gets or sets the maximum offset percent for the wave.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform.Mode">
            <summary>Gets or sets the style of wave transform to create.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform.Periods">
            <summary>Gets or sets the number of periods in the wave.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform.TransformMode">
            <summary>Gets or sets the

InterpolationMode of this transform.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.WowTransform">
            <summary>    This transform creates an effect which is a bit like
    looking at the image though a clear sphere. If you set
    
    BigWow to true, the result looks as if you're inside the
    sphere.</summary>
            <remarks>This method requires a continuous tone image. If the source
image is not continuous, it will attempt to convert the image into
one.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.WowTransform._ctor">
            <summary>Creates a new instance of the WowTransform object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.WowTransform._ctor">
            <summary>Creates a new instance of WowTransform.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.WowTransform._ctor(System.Double,System.Boolean)">
            <summary>Creates a new instance of

WowTransform specifying maxRadius, and bigWow.</summary>
            <param name="maxRadius">Maximum distance from the center for this effect.</param>
            <param name="bigWow">Makes it appear as if you are inside a clear sphere.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.WowTransform._ctor(System.Double,System.Boolean,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary>Creates a new instance of

WowTransform specifying maxRadius, bigWow and
transformMode.</summary>
            <param name="maxRadius">Maximum distance from the center for this effect.</param>
            <param name="bigWow">Makes it appear as if you are inside a clear sphere.</param>
            <param name="transformMode">Specifies the interpolation used with this transform.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.WowTransform.AddToChain(System.Int32,System.Int32)">
            <summary>Adds this transform to the transforms chain.</summary>
            <param name="width">The width of the image to process.</param>
            <param name="height">The height of the image to process.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.WowTransform.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies WowTransform using the current settings to the source
image.</summary>
            <returns>A new
AtalaImage
containing the processed image. null
(Nothing in VB) if cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.WowTransform.BigWow">
            <summary>Gets or sets a valid indicating if you the effect to appear
inside the sphere.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.WowTransform.MaxRadius">
            <summary>Gets or sets the maximum distance from the center for this
effect.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.WowTransform.TransformMode">
            <summary>Gets or sets the

InterpolationMode of this transform.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.ZigZagTransform">
            <summary>    This transform moves across the images in a triangle wave
    pattern.</summary>
            <remarks>This method requires a continuous tone image. If the source
image is not continuous, it will attempt to convert the image into
one.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ZigZagTransform._ctor">
            <summary>Creates a new instance of the ZigZagTransform.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ZigZagTransform._ctor">
            <summary>Creates a new instance of ZigZagTransform.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ZigZagTransform._ctor(System.Double,System.Int32,System.Boolean)">
            <summary>Creates a new instance of

ZigZagTransform specifying maxOffsetPercent, periods, and
topToBottom.</summary>
            <param name="maxOffsetPercent">Maximum offset percent for the wave.</param>
            <param name="periods">Number of periods in the wave.</param>
            <param name="topToBottom">The wave moves from top to bottom instead of left to
right.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ZigZagTransform._ctor(System.Double,System.Int32,System.Boolean,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary>Creates a new instance of

ZigZagTransform specifying maxOffsetPercent, periods,
topToBottom and transformMode.</summary>
            <param name="maxOffsetPercent">Maximum offset percent for the wave.</param>
            <param name="periods">Number of periods in the wave.</param>
            <param name="topToBottom">The wave moves from top to bottom instead of left to
right.</param>
            <param name="transformMode">Specifies the interpolation used with this transform.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ZigZagTransform.AddToChain(System.Int32,System.Int32)">
            <summary>Adds this transform to the transforms chain.</summary>
            <param name="width">The width of the image to process.</param>
            <param name="height">The height of the image to process.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ZigZagTransform.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies ZigZagTransform using the current settings to the
source image.</summary>
            <returns>A new
AtalaImage
containing the processed image. null
(Nothing in VB) if cancelled.</returns>
            <param name="sourceImage">The source
AtalaImage
which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.ZigZagTransform.MaxOffsetPercent">
            <summary>Gets or sets the maximum offset percent for the wave.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.ZigZagTransform.Periods">
            <summary>Gets or sets the number of periods in the wave.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.ZigZagTransform.TopToBottom">
            <summary>Gets or sets a value indicating if the wave moves from top to
bottom instead of left to right.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.ZigZagTransform.TransformMode">
            <summary>Gets or sets the

InterpolationMode of this transform.</summary>
        </member>
        <member name="M:__Delegates.UserTransformCallback(Atalasoft.Imaging.ImageProcessing.Transforms.UserTransformData)">
            <summary>Callback method for the UserTransform object.</summary>
            <param name="callbackData">Contains the information used in the transform.</param>
        </member>
        <member name="N:Atalasoft.Imaging.Metadata">
            <summary>Contains classes for accessing and manipulating metadata that
is stored in an image. Image metadata is any information stored in
the image that isn't the pixel or palette data itself.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.ExifTagID">
            <summary>Contains an enumeration of standard Exif tag ID's that are
known.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.ExifTagIfds">
            <summary>Contains an enumeration of standard Exif Ifd's.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagIfds.Main">
            <summary>Primary image data information.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagIfds.Exif">
            <summary>Exif camera information.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagIfds.Interoperability">
            <summary>Exif interoperabliity information.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagIfds.Thumbnail">
            <summary>A thumbnail stored with the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagIfds.Gps">
            <summary>GPS Satellite information.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagIfds.MakerNote">
            <summary>Camera make specific information.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.JpegMarkerCopyFlags">
            <summary>Flag enumeration used with CopyJpegWithNewMarkers.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerCopyFlags.CopyCom">
            <summary>Indicates whether the COM metadata should be copied.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerCopyFlags.CopyApp">
            <summary>Indicates whether the APP markers should be copied.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerCopyFlags.PlaceAfterSofn">
            <summary>Indicates whether the metadata should be placed after the SOF
tag.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.JpegMarkerTypes">
            <summary>Defines the types of Jpeg Markers that can be saved as a data
chunk inside a Jpeg image.</summary>
            <remarks>These markers contain binary information such as Exif and
Iptc Data.</remarks>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerTypes.MarkerApp1">
            <summary>The APP1 JPEG Marker commonly associated with EXIF
data</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerTypes.MarkerApp2">
            <summary>The APP2 JPEG Marker.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerTypes.MarkerApp3">
            <summary>The APP3 JPEG Marker.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerTypes.MarkerApp4">
            <summary>The APP4 JPEG Marker.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerTypes.MarkerApp5">
            <summary>The APP5 JPEG Marker.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerTypes.MarkerApp6">
            <summary>The APP6 JPEG Marker.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerTypes.MarkerApp7">
            <summary>The APP7 JPEG Marker.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerTypes.MarkerApp8">
            <summary>The APP8 JPEG Marker.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerTypes.MarkerApp9">
            <summary>The APP9 JPEG Marker.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerTypes.MarkerApp10">
            <summary>The APP10 JPEG Marker.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerTypes.MarkerApp11">
            <summary>The APP11 JPEG Marker.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerTypes.MarkerApp12">
            <summary>The APP12 JPEG Marker.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerTypes.MarkerApp13">
            <summary>The APP13 JPEG Marker commonly associated with IPTC
data.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerTypes.MarkerApp14">
            <summary>The APP14 JPEG Marker.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerTypes.AllMarkers">
            <summary>All markers OR'd together.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.MetadataTypes">
            <summary>Specifies a type of metadata.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.MetadataTypes.Exif">
            <summary>An

ExifCollection metatadata type.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.MetadataTypes.Iptc">
            <summary>An

IptcCollection metatadata type.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.MetadataTypes.JpegMarker">
            <summary>A

JpegMarkerCollection metatadata type.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.MetadataTypes.ComText">
            <summary>A ComTextCollection metatadata type.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.MetadataTypes.TiffTags">
            <summary>A

TiffTagCollection metatadata type.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.TiffTagID">
            <summary>Standard Tiff Tags that can be read from a TIFF file.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.Orientation">
            <summary>    TIFFTAG_ORIENTATION (274) UInt16
    1 = ORIENTATION_TOPLEFT
    2 = ORIENTATION_TOPRIGHT
    3 = ORIENTATION_BOTRIGHT
    4 = ORIENTATION_BOTLEFT
    5 = ORIENTATION_LEFTTOP
    6 = ORIENTATION_RIGHTTOP
    7 = ORIENTATION_RIGHTBOT
    8 = ORIENTATION_LEFTBOT</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.Imagewidth">
            <summary>TIFFTAG_IMAGEWIDTH (256) UInt32</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.Imagelength">
            <summary>TIFFTAG_IMAGELENGTHUInt32 (257) UInt32</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.Bitspersample">
            <summary>TIFFTAG_BITSPERSAMPLE (258) UInt16</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.Compression">
            <summary>    TIFFTAG_COMPRESSION (259) UInt16
    1 = COMPRESSION_NONE
    2 = COMPRESSION_CCITTRLE
    3 = COMPRESSION_CCITTFAX3
    4 = COMPRESSION_CCITTFAX4
    5 = COMPRESSION_LZW
    6 = COMPRESSION_OJPEG
    7 = COMPRESSION_JPEG
    32766 = COMPRESSION_NEXT (NeXT 2-bit RLE)
    32771 = COMPRESSION_CCITTRLEW (#1 w/ word alignment)
    32773 = COMPRESSION_PACKBITS (Macintosh RLE)
    32809 = COMPRESSION_THUNDERSCAN (ThunderScan RLE)</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.Photometric">
            <summary>    TIFFTAG_PHOTOMETRIC (262) UInt16
    0 = PHOTOMETRIC_MINISWHITE (min value is white)
    1 = PHOTOMETRIC_MINISBLACK (min value is black)
    2 = PHOTOMETRIC_RGB (RGB color model)
    3 = PHOTOMETRIC_PALETTE (color map indexed)
    4 = PHOTOMETRIC_MASK ($holdout mask)
    5 = PHOTOMETRIC_SEPARATED (!color separations)
    6 = PHOTOMETRIC_YCBCR (!CCIR 601)
    7 = PHOTOMETRIC_CIELAB (!1976 CIE L*a*b*)
    8 = PHOTOMETRIC_ICCLAB (ICC L*a*b* [Adobe TIFF Technote
    4])
    9 = PHOTOMETRIC_ITULAB (ITU L*a*b*)
    32844 = PHOTOMETRIC_LOGL (CIE Log2(L))
    32845 = PHOTOMETRIC_LOGLUV (CIE Log2(L) (u',v'))</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.ResolutionUnit">
            <summary>    TIFFTAG_RESOLUTIONUNIT (296) UInt16
    1 = RESUNIT_NONE
    2 = RESUNIT_INCH
    3 = RESUNIT_CENTIMETER</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.XResolution">
            <summary>TIFFTAG_XRESOLUTION (282) Int32</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.YResolution">
            <summary>TIFFTAG_YRESOLUTION (283) Int32</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.NumberOfInks">
            <summary>TIFFTAG_NUMBEROFINKS (334) UInt16</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.DocumentName">
            <summary>TIFFTAG_DOCUMENTNAME (269) String</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.ImageDescription">
            <summary>TIFFTAG_IMAGEDESCRIPTION (270) String</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.Make">
            <summary>TIFFTAG_MAKE (271) String</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.Model">
            <summary>TIFFTAG_MODEL (272) String</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.PageName">
            <summary>TIFFTAG_PAGENAME (285) String</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.Software">
            <summary>TIFFTAG_SOFTWARE (305) String</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.DateTime">
            <summary>TIFFTAG_DATETIME (306) String</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.Artist">
            <summary>TIFFTAG_ARTIST (315) String</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.HostComputer">
            <summary>TIFFTAG_HOSTCOMPUTER (316) String</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.InkNames">
            <summary>TIFFTAG_INKNAMES (333) String</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.TargetPrinter">
            <summary>TIFFTAG_TARGETPRINTER (337) String</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.TileWidth">
            <summary>TIFFTAG_TILEWIDTH (322) UInt32</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.TileLength">
            <summary>TIFFTAG_TILELENGTH (323) UInt32</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.InkSet">
            <summary>    TIFFTAG_INKSET (332) UInt32
    1 = INKSET_CMYK (cyan-magenta-yellow-black color)
    2 = INKSET_MULTIINK (multi-ink or hi-fi color)</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.ExtraSamples">
            <summary>    TIFFTAG_EXTRASAMPLES (338)
    0 = EXTRASAMPLE_UNSPECIFIED (unspecified data)
    1 = EXTRASAMPLE_ASSOCALPHA (associated alpha data)
    2 = EXTRASAMPLE_UNASSALPHA (unassociated alpha data)</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.Dotrange">
            <summary>TIFFTAG_DOTRANGE (335)</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.XmpData">
            <summary>TIFFTAG_XMLPACKET (700)</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.WangAnnotationData">
            <summary>TIFFTAG_ANNOTATIONS (32932)</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.RichTiffIptc">
            <summary>TIFFTAG_RICHTIFFIPTC (33723)</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.Photoshop">
            <summary>TIFFTAG_PHOTOSHOP (34377)</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.IccProfile">
            <summary>TIFFTAG_ICCPROFILE (34750)</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.ComTextCollection">
            <summary>    Contains a collection of COM text tags and methods to
    access COM Text data from an image.</summary>
            <remarks>See the

ParseFromImage method of the

ComTextParser class to generate data from a JPEG or PNG
image.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ComTextCollection._ctor">
            <summary>    Initialize a new instance of this COM Text tag. 
    Initialize a new instance of
    ComTextCollection.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ComTextCollection._ctor">
            <summary>    Initialize a new instance of
    ComTextCollection.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ComTextCollection._ctor(System.IO.Stream)">
            <summary>Obsolete</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ComTextCollection._ctor(System.String)">
            <summary>Obsolete</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ComTextCollection.Add(Atalasoft.Imaging.Metadata.ComTextTag)">
            <summary>Add a new COM Text marker to this collection.</summary>
            <param name="tag">The ComTextTag to add.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ComTextCollection.CopyTo(Atalasoft.Imaging.Metadata.ComTextTag[],System.Int32)">
            <summary>Copies items from this collection into an array.</summary>
            <param name="comText">An array of ComTextTag objects that will
hold the items.</param>
            <param name="index">An index in the array where the data will be copied.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ComTextCollection.Remove(Atalasoft.Imaging.Metadata.ComTextTag)">
            <summary>Remove a specified COM Text tag from this collection.</summary>
            <param name="tag">The ComTextTag to remove.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.ComTextCollection.Item(System.Int32)">
            <summary>Returns the ComTextTag by index in the
collection and allows the COM Text tags to be enumerated.</summary>
            <param name="index">The index of the item to retrieve.</param>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.ComTextParser">
            <summary>Parses COM Markers from a JPEG or PNG image into a collection
of COM Text tags.</summary>
            <remarks>    PNG and JPEG images support a type of metadata called COM
    Text. This is simple textual information that can be stored
    into an image. Atalasoft dotImage supports reading and writing
    this information to an image.
    For more information see COM Text and
    metadataoverview.html.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ComTextParser._ctor">
            <summary>Initializes a new instance of
ComTextParser.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ComTextParser.ParseFromImage">
            <summary>Parses COM Text data from an image file or stream.</summary>
            <returns>Returns a ComTextCollection containing all
COM Text data.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ComTextParser.ParseFromImage(System.IO.Stream)">
            <summary>Parses COM Text data from an image file stream.</summary>
            <returns>A ComTextCollection containing all COM Text
tags.</returns>
            <param name="imageStream">The image file stream to parse data from.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ComTextParser.ParseFromImage(System.String)">
            <summary>Parses COM Text data from an image file.</summary>
            <param name="imageFile">The image file to parse data from.</param>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.ComTextTag">
            <summary>Contains the data for a specified COM Text tag including the
key and text.</summary>
            <remarks>The Key value in a COM Text tag is only valid for PNG images.
Ignored in JPEG images.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ComTextTag._ctor">
            <summary>Initialize a new instance of this COM Text tag.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ComTextTag._ctor">
            <summary>Initialize a new instance of this COM Text tag.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ComTextTag._ctor(System.String)">
            <summary>Initialize a new instance of this COM Text tag specifying the
text.</summary>
            <param name="text">The text contained in this COM Text Tag.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ComTextTag._ctor(System.String,System.String)">
            <summary>Initialize a new instance of this COM Text tag specifying the
key and text.</summary>
            <param name="text">The text contained in this COM Text Tag.</param>
            <param name="key">A unique indentifier of the COM Tag for use in PNG
images.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ComTextTag.ToString">
            <summary>Returns a text description of the tag.</summary>
            <returns>A text description of the tag.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.ComTextTag.Key">
            <summary>Gets or sets a unique indentifier of the COM Tag for use in
PNG images.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.ComTextTag.Text">
            <summary>Gets or sets the text contained in this COM Text Tag.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.ExifCollection">
            <summary>Contains a collection of EXIF tags.</summary>
            <remarks>See

ParseFromImage of

ExifParser to populate an ExifCollection with
EXIF data from an image.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifCollection._ctor">
            <summary>Creates a new instance of the ExifCollection class. Create a
new instance of

ExifCollection.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifCollection._ctor">
            <summary>Create a new instance of

ExifCollection.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifCollection._ctor(System.IO.Stream)">
            <summary>Obsolete</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifCollection._ctor(System.IO.Stream,System.Int32)">
            <summary>Obsolete</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifCollection._ctor(System.IO.Stream,System.Int32,Atalasoft.Imaging.ImageFileIOEventHandler)">
            <summary>Obsolete</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifCollection._ctor(System.String)">
            <summary>Obsolete</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifCollection._ctor(System.String,System.Int32)">
            <summary>Obsolete</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifCollection._ctor(System.String,System.Int32,Atalasoft.Imaging.ImageFileIOEventHandler)">
            <summary>Obsolete</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifCollection.Add(Atalasoft.Imaging.Metadata.ExifTag)">
            <summary>Adds a new ExifTag to this
collection.</summary>
            <param name="tag">The EXIF tag to add.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifCollection.ConvertExifDate(System.String)">
            <summary>Convert an Exif Date to a recognizable system date</summary>
            <returns>The converted System.DateTime.</returns>
            <param name="exifDate">A date string returned from an unformatted Exif tag.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifCollection.CopyTo(Atalasoft.Imaging.Metadata.ExifTag[],System.Int32)">
            <summary>Copies items from this collection into an array.</summary>
            <param name="tags">An array of ExifTags to hold the items.</param>
            <param name="index">An index in the array where the data will be copied.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifCollection.IndexOf(Atalasoft.Imaging.Metadata.ExifTag)">
            <summary>Returns the index value of an ExifTag found in the
collection.</summary>
            <returns>Returns -1 if the tag was not found.</returns>
            <param name="tag">The specific tag to search for.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifCollection.LookupTag">
            <summary>Returns an ExifTag based on a description or Exif ID and
IFD.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifCollection.LookupTag(Atalasoft.Imaging.Metadata.ExifTagID,Atalasoft.Imaging.Metadata.ExifTagIfds)">
            <summary>Returns an ExifTag based on an Exif ID and IFD.</summary>
            <param name="id">The ID of the EXIF tag to lookup.</param>
            <param name="ifd">The IFD to search through.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifCollection.LookupTag(System.String)">
            <summary>Returns an ExifTag based on a tag description.</summary>
            <param name="description">A textual description of the ExifTag (for example,
"DataTime").</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifCollection.Remove(Atalasoft.Imaging.Metadata.ExifTag)">
            <summary>Remove a specified ExifTag from the collection.</summary>
            <param name="tag">The tag to remove</param>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.ExifCollection.FormatTags">
            <summary>Obsolete</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.ExifCollection.Item(System.Int32)">
            <summary>Returns the ExifTag by index in the collection and allows the
Exif tags to be enumerated.</summary>
            <param name="index">The zero based index in the collection.</param>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.ExifParser">
            <summary>Parses EXIF data from JPEG or TIFF images into a collection
of EXIF tags.</summary>
            <remarks>    EXIF (Exchangeable Image File Format) is a standard for
    storing interchange information in image files, in particular
    JPEG images. This metadata is commonly used in digital camera
    images to store information specific to digital photography
    such as shutter speed, date taken, aperture, GPS information,
    and other information depending on the make of the
    camera.
    EXIF data cannot be modified, only viewed or copied into
    new images.
    For a more detailed explanation of EXIF and Metadata in
    general, see EXIF Metadata and
    Metadata.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifParser._ctor">
            <summary>Initializes a new instance of
ExifParser.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifParser.ConvertExifDate(System.String)">
            <summary>Convert an Exif Date to a recognizable system date.</summary>
            <returns>The converted System.DateTime.</returns>
            <param name="exifDate">A date string returned from an unformatted Exif tag.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifParser.ParseFromByteArray(System.Byte[])">
            <summary>Parses a byte array of Exif data.</summary>
            <returns>An

ExifCollection holding a list of all the Exif values that were
read. This list will be empty if no values were read.</returns>
            <remarks>Use this method for dealing with raw image data. For reading
Exif from an image, use

ParseFromImage.</remarks>
            <param name="exifData">An array containing the entire Exif string to parse.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifParser.ParseFromImage">
            <summary>Parses EXIF data from a JPEG or TIFF image file or
stream.</summary>
            <returns>An ExifCollection containing all EXIF
information.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifParser.ParseFromImage(System.IO.Stream)">
            <summary>Parses EXIF data from a JPEG or TIFF image file
stream.</summary>
            <param name="imageStream">The image file stream to parse data from.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifParser.ParseFromImage(System.IO.Stream,System.Int32)">
            <summary>Parses EXIF data from an image file stream, specifying the
frame index of a multipage TIFF.</summary>
            <param name="imageStream">The image file stream to parse data from.</param>
            <param name="frameIndex">The zero based frame index of a multipage TIFF image to load
EXIF data from.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifParser.ParseFromImage(System.String)">
            <summary>Parses EXIF data from a JPEG or TIFF image file.</summary>
            <param name="imageFile">The image filename to parse data from.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifParser.ParseFromImage(System.String,System.Int32)">
            <summary>Parses EXIF data from an image file, specifying the frame
index of a multipage TIFF.</summary>
            <param name="imageFile">The image filename to parse data from.</param>
            <param name="frameIndex">The zero based frame index of a multipage TIFF image to load
EXIF data from.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.ExifParser.FormatTags">
            <summary>Gers or sets the a value indicating if the EXIF tags are
formatted to english strings.</summary>
            <remarks>This property defaults to true and will convert all dates to
valid DateTime objects, as well as calculate real values from EXIF
values.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.ExifParser.ThumbnailCallback">
            <summary>Gets or sets the callback used to load a thumbnail when
parsing EXIF data.</summary>
            <remarks>Set the ThumbnailCallback, and point the
callback to a method so the AtalaImage
representing the EXIF thumbnail can be loaded.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.ExifTag">
            <summary>Contains the data of this Exif tag including ID, IFD, value,
and description.</summary>
            <remarks>See the

ExifParser class to retreive ExifTags from images.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifTag._ctor">
            <summary>Creates a new instance of

ExifTag specifying the id, ifd, data, and decription.
Initializes a new instance of ExifTag.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifTag._ctor(Atalasoft.Imaging.Metadata.ExifTagID,Atalasoft.Imaging.Metadata.ExifTagIfds,System.Object,System.String)">
            <summary>Initializes a new instance of
ExifTag.</summary>
            <param name="id">The ExifID</param>
            <param name="ifd">The ExifIfd</param>
            <param name="data">The object data</param>
            <param name="description">A description of the object data</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifTag._ctor(System.Int32,Atalasoft.Imaging.Metadata.ExifTagIfds,System.Object)">
            <summary>Initializes a new instance of
ExifTag.</summary>
            <param name="id">The ExifID</param>
            <param name="ifd">The ExifIdf</param>
            <param name="data">The object data</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifTag._ctor(System.Int32,Atalasoft.Imaging.Metadata.ExifTagIfds,System.Object,System.String)">
            <summary>Initializes a new instance of
ExifTag.</summary>
            <param name="id">The ExifId</param>
            <param name="ifd">The ExifIdf</param>
            <param name="data">The object data</param>
            <param name="description">A description of the object data</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifTag.LookupExifTagID">
            <summary>Use this method to return the ExifTagID enumeration
associated with this tag.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifTag.ToString">
            <summary>Returns a text description of the tag.</summary>
            <returns>A text description of the tag.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.ExifTag.Data">
            <summary>Gets the value of this Exif tag.</summary>
            <remarks>The returned value is a variant object. However it is almost
always represented as a String. To retreive the string data of the
tag, call the .ToString() method of the returned
object.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.ExifTag.Description">
            <summary>A textual description of this Exif Tag.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.ExifTag.ID">
            <summary>Gets or sets the ID of this

ExifTag.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.ExifTag.Ifd">
            <summary>Gets the IFD of this

ExifTag.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.ImageMetadataException">
            <summary>This exception is thrown when an error with image metadata is
detected</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ImageMetadataException._ctor">
            <summary>Creates a new instance of ImageMetadataException.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ImageMetadataException._ctor(System.String)">
            <summary>Creates a new instance of ImageMetadataException specifying
the exception message.</summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ImageMetadataException._ctor(System.String,System.Exception)">
            <summary>Creates a new instance of ImageMetadataException specifying
the exception message and inner exception.</summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception for this error.</param>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.IptcCollection">
            <summary>Contains a collection of IPTC tags.</summary>
            <remarks>See

ParseFromImage of the

IptcParser class to populate an IptcCollection
with data from an image.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcCollection._ctor">
            <summary>Creates a new instance of the IptcCollection class.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcCollection._ctor">
            <summary>Creates a new instance of the IPTCCollection class
initialized with no data.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcCollection._ctor(System.IO.Stream)">
            <summary>Creates a new instance of the IptcCollection class specifying
the file stream to read the iptc metadata from.</summary>
            <param name="stream">File to retreive iptc data from.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcCollection._ctor(System.IO.Stream,System.Int32)">
            <summary>Creates a new instance of the IptcCollection class specifying
the file stream and page index (in a multipage TIFF) to read the
iptc metadata from.</summary>
            <param name="stream">File to retreive iptc data from.</param>
            <param name="frameIndex">The zero based page in a multipage TIFF.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcCollection._ctor(System.String)">
            <summary>Creates a new instance of the IptcCollection class specifying
the file to read the iptc metadata from.</summary>
            <param name="fileName">File to retreive iptc data from.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcCollection._ctor(System.String,System.Int32)">
            <summary>Creates a new instance of the IptcCollection class specifying
the file and page index (in a multipage TIFF) to read the iptc
metadata from.</summary>
            <param name="fileName">File to retreive iptc data from.</param>
            <param name="frameIndex">The zero based page in a multipage TIFF.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcCollection.Add(Atalasoft.Imaging.Metadata.IptcTag)">
            <summary>Adds a new IptcTag to the collection.</summary>
            <param name="tag">The IptcTag to add.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcCollection.CopyTo(Atalasoft.Imaging.Metadata.IptcTag[],System.Int32)">
            <summary>Copies items from the collection into an array.</summary>
            <param name="tags">An array of IptcTag object that will hold the collection
items.</param>
            <param name="index">An index in the array where the data will be copied.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcCollection.CreateIptcDataBlock">
            <summary>Generate an IPTC data block.</summary>
            <returns>The data block generated by this function can be used in
IS3AddJPGOutputMarker to add an IPTC data block to a JPG
image.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcCollection.GetTagDescription(System.Int32)">
            <summary>Returns a textual description based on an IptcID.</summary>
            <param name="id">The ID of the tag.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcCollection.IndexOf(Atalasoft.Imaging.Metadata.IptcTag)">
            <summary>Returns the index value of an IptcTag.</summary>
            <returns>The index of the item or -1 if the item is not in the
collection.</returns>
            <param name="tag">The IptcTag to search for.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcCollection.LookupTag">
            <summary>Returns an IptcTag based on an IPTC ID and index.</summary>
            <returns>An IptcTag containing the ID and index specified or null
(Nothing in Visual Basic) if a match is not found.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcCollection.LookupTag(System.Int32,System.Int32)">
            <param name="id">The ID of the tag to look up.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcCollection.LookupTag(System.Int32,System.Int32)">
            <param name="index">The index of the tag to look up.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcCollection.Remove(Atalasoft.Imaging.Metadata.IptcTag)">
            <summary>Remove a specified IptcTag from the collection.</summary>
            <param name="tag">The IptcTag to remove.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.IptcCollection.Item(System.Int32)">
            <summary>Returns the IptcTag by index in the collection and allows the
Iptc tags to be enumerated.</summary>
            <param name="index">The zero based index in the collection.</param>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.IptcParser">
            <summary>Parses IPTC data from JPEG or TIFF images into a collection
of IPTC tags.</summary>
            <remarks>    The Newspaper Association of America (NAA) and the
    International Press Telecommunications Council (IPTC) have
    worked jointly to design a model to store all sorts of data in
    an image. This metadata is commonly known as IPTC. Adobe
    Photoshop uses IPTC to store information in images as well as
    much of the newspaper and press industry. Atalasoft dotImage
    can read and write IPTC information to a JPEG image and read
    IPTC information from a TIFF image.
    IPTC data can be modified and saved back in a JPEG or
    TIFF image.
    For more information on IPTC and Metadata in general see
    iptc.html and metadataoverview.html.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcParser._ctor">
            <summary>Initializes a new instance of
IptcParser.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcParser.ParseFromByteArray(System.Byte[])">
            <summary>Parses IPTC data from a byte array.</summary>
            <returns>An IptcCollection containing the parsed data.</returns>
            <remarks>This is useful if the image format stores the IPTC in a
different location within the file. For instance, IPTC may be
stored in the TIFFTAG_RICHTIFFIPTC (ID 33723) instead of the Adobe
Photoshop tag.</remarks>
            <param name="iptcData">A byte array containing the IPTC data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcParser.ParseFromImage">
            <summary>Parses IPTC data from a JPEG or TIFF image file or
stream.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcParser.ParseFromImage(System.IO.Stream)">
            <summary>Parses IPTC data from a JPEG or TIFF image file
stream.</summary>
            <param name="imageStream">The image file stream to parse data from.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcParser.ParseFromImage(System.IO.Stream,System.Int32)">
            <summary>Parses IPTC data from a specific frame in a multipage TIFF
image file stream.</summary>
            <param name="imageStream">The image file stream to parse data from.</param>
            <param name="frameIndex">The zero based frame index of a multipage TIFF image to load
data from.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcParser.ParseFromImage(System.String)">
            <summary>Parses IPTC data from a JPEG or TIFF image file.</summary>
            <param name="imageFile">The image file to parse data from.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcParser.ParseFromImage(System.String,System.Int32)">
            <summary>Parses IPTC data from a specific frame in a multipage TIFF
image file.</summary>
            <param name="imageFile">The image file to parse data from.</param>
            <param name="frameIndex">The zero based frame index of a multipage TIFF image to load
data from.</param>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.IptcTag">
            <summary>Contains the data of this IPTC tag including ID, index,
section, and value.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcTag._ctor(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>Creates a new instance of

ExifTag specifying the id, section, index, and data.</summary>
            <param name="section">The section for this IPTC tag. Normally 2.</param>
            <param name="id">The ID of this IPTC tag.</param>
            <param name="index">The index of this IPTC tag.</param>
            <param name="data">The value of this IptcTag.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcTag.ToString">
            <summary>Returns a text description of the IptcTag.</summary>
            <returns>A text description of the IptcTag.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.IptcTag.Data">
            <summary>Gets or sets the value of this IptcTag.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.IptcTag.ID">
            <summary>Gets or sets the ID of this IPTC tag.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.IptcTag.Index">
            <summary>Sets or returns the index value for this IPTC tag.</summary>
            <remarks>Each IPTC item can have multiple tags. This specifies the
index for this item.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.IptcTag.Section">
            <summary>Gets or sets the section for this IPTC tag. Normally this
value is 2.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.JpegMarker">
            <summary>The JpegMarker is an object that stores information from JPEG
images</summary>
            <remarks>A Jpeg Marker is a data block stored in Jpeg images. Also
known as JPEG APPn markers. There are 14 markers that can be stored
in JPEG images. See

JpegMarkerCollection for retreiving this data from existing
JPEG images.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.JpegMarker._ctor(Atalasoft.Imaging.Metadata.JpegMarkerTypes,System.Byte[])">
            <summary>Creates a new instance of JpegMarker.</summary>
            <remarks>Creates a new instance of JpegMarker.</remarks>
            <param name="type">The type of JpegMarker.</param>
            <param name="data">The data stored in this marker.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.JpegMarker.Dispose">
            <summary>Call this method to free the JpegMarker data from memory
without waiting for the Garbage Collector.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.JpegMarker.Data">
            <summary>Gets the binary data stored in this marker.</summary>
            <remarks>This data does not contain the first four bytes of marker
information, which specifies the data length and marker type. When
adding custom data, these four bytes should be removed so the Data
property only contains the marker content.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.JpegMarker.Length">
            <summary>Gets or sets the length of this marker in bytes.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.JpegMarker.Type">
            <summary>Gets or sets the type of JpegMarker.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.JpegMarkerCollection">
            <summary>    Contains a collection of JpegMarkers and methods to
    access JpegMarker data.</summary>
            <remarks>    Metadata such as EXIF, IPTC, and COM Markers are stored
    in as Jpeg Markers in JPEG files. This class allows Jpeg
    markers to be accessed and resaved in a new image (both lossy
    or lossless).
    The marker data returned does not contain the first four
    bytes of actual marker data. These four bytes contain the
    length of the data and the marker type.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.JpegMarkerCollection._ctor">
            <remarks>Creates a new instance of the JpegMarkerCollection
class.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.JpegMarkerCollection._ctor">
            <summary>Creates a new instance of JpegMarkerCollection.</summary>
            <remarks>Creates a new instance of the JpegMarkerCollection
class.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.JpegMarkerCollection._ctor(System.IO.Stream)">
            <summary>Creates a new instance of JpegMarkerCollection specifying a
stream containing the Jpeg file.</summary>
            <remarks>Creates a new instance of the JpegMarkerCollection class
specifying the file stream to read the markers from.</remarks>
            <param name="stream">File to retreive Jpeg markers from.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.JpegMarkerCollection._ctor(System.String)">
            <summary>Creates a new instance of JpegMarkerCollection specifying the
filename of the image.</summary>
            <remarks>Creates a new instance of the JpegMarkerCollection class
specifying the file to read the markers from.</remarks>
            <param name="fileName">File to retreive Jpeg markers from.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.JpegMarkerCollection.Add(Atalasoft.Imaging.Metadata.JpegMarker)">
            <summary>Adds a new JpegMarker to the
collection.</summary>
            <param name="marker">The marker to add.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.JpegMarkerCollection.CopyTo(Atalasoft.Imaging.Metadata.JpegMarker[],System.Int32)">
            <summary>Copies data from the collection into an array.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.JpegMarkerCollection.Insert(System.Int32,Atalasoft.Imaging.Metadata.JpegMarker)">
            <summary>Insert a new JpegMarker into the collection
at the specified index.</summary>
            <param name="index">The index in the collection.</param>
            <param name="marker">The marker to insert.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.JpegMarkerCollection.LookupMarker(Atalasoft.Imaging.Metadata.JpegMarkerTypes)">
            <summary>Returns a JpegMarker in the collection based on the marker
type.</summary>
            <returns>The JpegMarker or null (Nothing in Visual Basic) if the item
is not found.</returns>
            <param name="type">The type of marker to lookup.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.JpegMarkerCollection.Remove(Atalasoft.Imaging.Metadata.JpegMarker)">
            <summary>Removes a specified JpegMarker from the
collection.</summary>
            <param name="marker">The marker to remove.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.JpegMarkerCollection.Item(System.Int32)">
            <summary>Allows the Jpeg markers to be enumerated.</summary>
            <param name="index">The zero based index in the collection.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.JpegMarkerCollection.MarkersToSave">
            <summary>Obsolete</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.PhotoshopResource">
            <summary>Contains the data of this Photoshop Resource including ID,
Data, and Description.</summary>
            <remarks>The Data object always contains a byte array.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResource._ctor(System.Int32,System.Object,System.String)">
            <summary>Initializes a new instance of
PhotoshopResource.</summary>
            <param name="id">The resource ID.</param>
            <param name="data">The resource data (typically a string value or byte
array).</param>
            <param name="description">A description of the resource (optional).</param>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.PhotoshopResource.Data">
            <summary>Gets or sets the data of this resource.</summary>
            <remarks>The object is always a byte array.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.PhotoshopResource.Description">
            <summary>Gets or sets a textual description of the resource.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.PhotoshopResource.ID">
            <summary>Gets or sets the ID of this resource.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.PhotoshopResourceCollection">
            <summary>Contains a collection of Photoshop Resources.</summary>
            <remarks>See

ParseFromImage of the

PhotoshopResourceParser class to populate a
PhotoshopResourceCollection with data from an
image.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResourceCollection._ctor">
            <summary>Initializes a new instance of
PhotoshopResourceCollection.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResourceCollection.Add(Atalasoft.Imaging.Metadata.PhotoshopResource)">
            <summary>Add a new PhotoshopResource to the
collection.</summary>
            <param name="resource">The PhotoshopResource to add.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResourceCollection.CopyTo(Atalasoft.Imaging.Metadata.PhotoshopResource[],System.Int32)">
            <summary>Copies the collection into an Array of
PhotoshopResources.</summary>
            <param name="resources">The array of resources.</param>
            <param name="index">the index of the array to start copying into.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResourceCollection.IndexOf(Atalasoft.Imaging.Metadata.PhotoshopResource)">
            <summary>Returns the zero based index of a specified
PhotoshopResource if located in the
collection.</summary>
            <returns>Returns -1 if not found, the index in the collection if
found.</returns>
            <param name="resource">The PhotoshopResource to search for.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResourceCollection.LookupResource(System.Int32)">
            <summary>Gets a PhotoshopResource from an ID.</summary>
            <remarks>Returns null (Nothing in VB) if a resource of the specified
ID doesn't exist.</remarks>
            <returns>A PhotoshopResource that matches the specified ID.</returns>
            <param name="id">The PhotoshopResource ID to look for.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResourceCollection.Remove(Atalasoft.Imaging.Metadata.PhotoshopResource)">
            <summary>Removes a specified PhotoshopResource from
the collection.</summary>
            <param name="resource">The PhotoshopResource to remove.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.PhotoshopResourceCollection.Item(System.Int32)">
            <summary>Gets an item index of the
PhotoshopResourceCollection.</summary>
            <param name="index">The zero based item index.</param>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.PhotoshopResourceParser">
            <summary>Parses Photoshop resources from JPEG, TIFF, and PSD images
into a collection of photoshop resources.</summary>
            <remarks>The Format Specification for Photoshop Resources is available
to purchase from Adobe. This document contains information for each
resource ID. The data in each

PhotoshopResource is stored as a byte array. The developer must
know the format of each ID, available in the specification, to
parse to the respective value (string, integer, raw bytes,
etc).</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResourceParser._ctor">
            <summary>Initializes a new instance of
PhotoshopResourceParser.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResourceParser.ParseFromImage">
            <summary>Parses Photoshop Resource data from a JPEG, TIFF, or PSD
image file or stream.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResourceParser.ParseFromImage(System.IO.Stream)">
            <summary>Parses Photoshop Resource data from a JPEG, TIFF, or PSD
image file stream.</summary>
            <param name="imageStream">The image file stream to parse data from.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResourceParser.ParseFromImage(System.IO.Stream,System.Int32)">
            <summary>Parses Photoshop Resource data from a JPEG, TIFF, or PSD
image file stream specifying the frame index.</summary>
            <param name="imageStream">The image file stream to parse data from.</param>
            <param name="frameIndex">The zero based frame index of a multipage TIFF image to load
data from.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResourceParser.ParseFromImage(System.String)">
            <summary>Parses Photoshop Resource data from a JPEG, TIFF, or PSD
image file.</summary>
            <param name="imageFile">The image file to parse data from.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResourceParser.ParseFromImage(System.String,System.Int32)">
            <summary>Parses Photoshop Resource data from a JPEG, TIFF, or PSD
image file specifying the frame index.</summary>
            <param name="imageFile">The image file to parse data from.</param>
            <param name="frameIndex">The zero based frame index of a multipage TIFF image to load
data from.</param>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.TiffTag">
            <summary>Holds the data of a single TIFF Tag.</summary>
            <remarks>TIFF Tags are returned when obtaining tags with the

GetTIFFTag method in

TiffDecoder, and set with the

TiffTags property in the

TiffEncoder.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTag._ctor">
            <summary>Initializes a new instance of the TiffTag class.Creates an
new instance of TiffTag.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTag._ctor(System.Int32,System.Object,Atalasoft.Imaging.Metadata.TiffTagDataType)">
            <summary>Creates a new instance of TiffTag with the
tag ID, object data, and data type.</summary>
            <param name="id">The TIFF Tag ID</param>
            <param name="data">The data of the TIFF Tag</param>
            <param name="type">The data type of the TIFF Tag</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTag._ctor(Atalasoft.Imaging.Metadata.TiffTagID,System.Object)">
            <summary>Creates a new instance of TiffTag with the
tag ID enumeration and object data automatically determine the data
type.</summary>
            <param name="id">The TIFF Tag ID</param>
            <param name="data">The data of the TIFF Tag</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTag.ToString">
            <summary>A text description of the TiffTag.</summary>
            <returns>A text description of the TiffTag object.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.TiffTag.Data">
            <summary>Gets the data of a specific TIFF tag.</summary>
            <remarks>Typically, the information stored in the object is string
data. A .ToString() method call can be used to view this
ASCII data.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.TiffTag.ID">
            <summary>Gets the ID of this TIFF tag.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.TiffTag.Type">
            <summary>Gets the TIFF DataType for this TIFF Tag.</summary>
            <remarks>Each TIFF Tag has a specific data type. When the TIFF Tag is
created with the TiffTagID enumeration parameter, this value is
automatically determined based on the standard TIFF Tag ID.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.TiffTagCollection">
            <summary>    Contains a collection of TIFF tags, used tor writing TIFF
    Tags to an image when saving.</summary>
            <remarks>    All TIFF images contain metadata explaining the size,
    colordepth, strip size, and other detailed information of the
    image. A TIFF tag is identified by an ID. Atalasoft dotImage
    can read this information from a TIFF file as a string.
    For more information, see Tiff Tags and Metadata
    Overview.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection._ctor">
            <summary>Creates a new instance of the TiffTagCollection class.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection._ctor">
            <summary>Creates a new instance of the TiffTagCollection class.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection._ctor(System.IO.Stream)">
            <summary>Initializes a new instance of the TiffTagCollection class
specifying the file stream to read the Tiff tags from.</summary>
            <param name="fileStream">File to retreive tiff tags from.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection._ctor(System.IO.Stream,System.Int32)">
            <summary>Initializes a new instance of the TiffTagCollection class
specifying the file stream and page index (in a multipage TIFF) to
read the Tiff tags from.</summary>
            <param name="fileStream">File to retreive tiff tags from.</param>
            <param name="frameIndex">The zero based page in a multipage TIFF.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection._ctor(System.String)">
            <summary>Initializes a new instance of the TiffTagCollection class
specifying the file to read the Tiff tags from.</summary>
            <param name="fileName">File to retreive tiff tags from.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection._ctor(System.String,System.Int32)">
            <summary>Initializes a new instance of the TiffTagCollection class
specifying the file and page index (in a multipage TIFF) to read
the Tiff tags from.</summary>
            <param name="fileName">File to retreive tiff tags from.</param>
            <param name="frameIndex">The zero based page in a multipage TIFF.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.Add(Atalasoft.Imaging.Metadata.TiffTag)">
            <summary>Adds a new TIFF Tag to the collection.</summary>
            <param name="tag">The TIFF Tag to add.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.CopyTo(Atalasoft.Imaging.Metadata.TiffTag[],System.Int32)">
            <summary>Copies items from the collection into an array.</summary>
            <param name="tags">An array of TiffTag where the data will be stored.</param>
            <param name="index">An index in the array where the data will be stored.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.GetSingleTag">
            <summary>Returns a single TIFF Tag from a TIFF image.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.GetSingleTag(System.Int32,System.IO.Stream,System.Int32)">
            <summary>Returns a TiffTag from a TIFF image specifying the tag ID,
image stream and frame index.</summary>
            <returns>A object containing the TIFF tag data.</returns>
            <param name="tagID">The TIFF tag ID to return.</param>
            <param name="source">A stream containing the image data.</param>
            <param name="frameIndex">The frame index from a multipage TIFF containing the tag
data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.GetSingleTag(System.Int32,System.String,System.Int32)">
            <summary>Returns the TIFF tag data from a file.</summary>
            <param name="tagID">The TIFF Tag ID to retrieve.</param>
            <param name="filename">The filename of the TIFF image.</param>
            <param name="frameIndex">The zero based page index of a multipaged TIFF.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.GetSingleTag(Atalasoft.Imaging.Metadata.TiffTagID,System.IO.Stream)">
            <summary>Returns a single TIFF Tag from a TIFF image specifying the
TIFF Tag ID and file stream.</summary>
            <param name="tag">The TIFF Tag ID to retrieve.</param>
            <param name="source">The stream containing the encoded TIFF image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.GetSingleTag(Atalasoft.Imaging.Metadata.TiffTagID,System.IO.Stream,System.Int32)">
            <summary>Returns a single TIFF Tag from a TIFF image specifying the
TIFF Tag ID, file stream and zero based page index.</summary>
            <param name="tag">The TIFF Tag ID to retrieve.</param>
            <param name="source">The stream containing the encoded TIFF image.</param>
            <param name="frameIndex">The zero based page index of a multipaged TIFF.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.GetSingleTag(Atalasoft.Imaging.Metadata.TiffTagID,System.String)">
            <summary>Returns a single TIFF Tag from a TIFF image specifying the
TIFF Tag ID and file.</summary>
            <param name="tag">The TIFF Tag ID to retrieve.</param>
            <param name="filename">The file containing the encoded TIFF image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.GetSingleTag(Atalasoft.Imaging.Metadata.TiffTagID,System.String,System.Int32)">
            <summary>Returns a single TIFF Tag from a TIFF image specifying the
TIFF Tag ID, file and zero based page index.</summary>
            <param name="tag">The TIFF Tag ID to retrieve.</param>
            <param name="filename">The file containing the encoded TIFF image.</param>
            <param name="frameIndex">The zero based page index of a multipaged TIFF.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.Insert(System.Int32,Atalasoft.Imaging.Metadata.TiffTag)">
            <summary>Insert a TIFF Tag into the collection at the specified
index.</summary>
            <param name="index">The index to insert into.</param>
            <param name="tag">The tag to insert.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.LookupTag(Atalasoft.Imaging.Metadata.TiffTagID)">
            <summary>Returns a TiffTag based on a TiffID.</summary>
            <param name="id">The TIFF tag ID to look up.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.Remove(Atalasoft.Imaging.Metadata.TiffTag)">
            <summary>Remove a specified tag from the collection.</summary>
            <param name="tag">The TIFF Tag to remove.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.TiffTagCollection.Item(System.Int32)">
            <summary>Returns the TiffTag by index in the collection and allows the
Tiff tags to be enumerated.</summary>
            <param name="index">The zero based index in the collection.</param>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.XmpParser">
            <summary>The XmpParser class can extract XMP Binary
data from an image, and parse it into XML content.</summary>
            <remarks>    There are two important methods in this class.
    
    BytesFromImage returns a byte array of the raw XMP data. It
    is used in DotAnnotate, our Annotations Toolkit, to load XMP
    annotations data.
    
    ParseFromImage returns an XmlDocument that can be easily
    parsed using features in the .NET XML namespace.
    For more information on XMP including the specification,
    visit
    http://www.adobe.com/products/xmp/.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.XmpParser._ctor">
            <summary>Initializes a new instance of
XmpParser.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.XmpParser.BytesFromImage">
            <summary>Returns a byte array containing XMP data from an image file
or stream.</summary>
            <remarks>Currently supports reading XMP from JPEG, TIFF, and PDF
images.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.XmpParser.BytesFromImage(System.IO.Stream)">
            <summary>Returns a byte array containing XMP data from an image
stream.</summary>
            <param name="imageStream">The image stream to retrieve data from.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.XmpParser.BytesFromImage(System.IO.Stream,System.Int32)">
            <summary>Returns a byte array containing XMP data from an image stream
specifying the frame index.</summary>
            <param name="imageStream">The image stream to retrieve data from.</param>
            <param name="frameIndex">The zero based frame index of the image to retrieve data
from</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.XmpParser.BytesFromImage(System.String)">
            <summary>Returns a byte array containing XMP data from an image
file.</summary>
            <param name="imageFile">The image filename to retreive data from.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.XmpParser.BytesFromImage(System.String,System.Int32)">
            <summary>Returns a byte array containing XMP data from an image file
specifying the frame index.</summary>
            <param name="imageFile">The image filename to retreive data from</param>
            <param name="frameIndex">The zero based frame index of the image to retrieve data
from</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.XmpParser.ParseFromImage">
            <summary>Returns an XmlDocument containing XMP data
from an image file or stream.</summary>
            <returns>A System.Xml.XmlDocument containing XMP
information.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.XmpParser.ParseFromImage(System.IO.Stream)">
            <summary>Returns an XmlDocument containing XMP data
from an image file stream.</summary>
            <param name="imageStream">The image file stream containing XMP data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.XmpParser.ParseFromImage(System.IO.Stream,System.Int32)">
            <summary>Returns an XmlDocument containing XMP data
from an image file stream and zero based frame index.</summary>
            <param name="imageStream">The image file stream containing XMP data.</param>
            <param name="frameIndex">The zero based frame index of a multi-page image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.XmpParser.ParseFromImage(System.String)">
            <summary>Returns an XmlDocument containing XMP data
from an image file.</summary>
            <param name="imageFile">The image file containing XMP data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.XmpParser.ParseFromImage(System.String,System.Int32)">
            <summary>Returns an XmlDocument containing XMP data
from an image file and zero based frame index.</summary>
            <param name="imageFile">The image file containing XMP data.</param>
            <param name="frameIndex">The zero based frame index of a multi-page image.</param>
        </member>
    </members>
</doc>

