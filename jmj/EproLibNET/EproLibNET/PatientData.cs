//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace EproLibNET {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class PatientData : DataSet {
        
        private PatientDataTable tablePatient;
        
        public PatientData() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected PatientData(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Patient"] != null)) {
                    this.Tables.Add(new PatientDataTable(ds.Tables["Patient"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PatientDataTable Patient {
            get {
                return this.tablePatient;
            }
        }
        
        public override DataSet Clone() {
            PatientData cln = ((PatientData)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Patient"] != null)) {
                this.Tables.Add(new PatientDataTable(ds.Tables["Patient"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tablePatient = ((PatientDataTable)(this.Tables["Patient"]));
            if ((this.tablePatient != null)) {
                this.tablePatient.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "PatientData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/PatientData.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tablePatient = new PatientDataTable();
            this.Tables.Add(this.tablePatient);
        }
        
        private bool ShouldSerializePatient() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void PatientRowChangeEventHandler(object sender, PatientRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PatientDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnCprID;
            
            private DataColumn columnFirstName;
            
            private DataColumn columnLastName;
            
            private DataColumn columnMiddleName;
            
            private DataColumn columnBirthDate;
            
            private DataColumn columnHeight;
            
            private DataColumn columnWeight;
            
            private DataColumn columnSex;
            
            private DataColumn columnRace;
            
            private DataColumn columnTechnician;
            
            private DataColumn columnPhysician;
            
            private DataColumn columnSmoke;
            
            private DataColumn columnSmokePerDay;
            
            private DataColumn columnSmokeDuration;
            
            private DataColumn columnSmokeQuit;
            
            private DataColumn columnSmokeQuitTime;
            
            internal PatientDataTable() : 
                    base("Patient") {
                this.InitClass();
            }
            
            internal PatientDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn CprIDColumn {
                get {
                    return this.columnCprID;
                }
            }
            
            internal DataColumn FirstNameColumn {
                get {
                    return this.columnFirstName;
                }
            }
            
            internal DataColumn LastNameColumn {
                get {
                    return this.columnLastName;
                }
            }
            
            internal DataColumn MiddleNameColumn {
                get {
                    return this.columnMiddleName;
                }
            }
            
            internal DataColumn BirthDateColumn {
                get {
                    return this.columnBirthDate;
                }
            }
            
            internal DataColumn HeightColumn {
                get {
                    return this.columnHeight;
                }
            }
            
            internal DataColumn WeightColumn {
                get {
                    return this.columnWeight;
                }
            }
            
            internal DataColumn SexColumn {
                get {
                    return this.columnSex;
                }
            }
            
            internal DataColumn RaceColumn {
                get {
                    return this.columnRace;
                }
            }
            
            internal DataColumn TechnicianColumn {
                get {
                    return this.columnTechnician;
                }
            }
            
            internal DataColumn PhysicianColumn {
                get {
                    return this.columnPhysician;
                }
            }
            
            internal DataColumn SmokeColumn {
                get {
                    return this.columnSmoke;
                }
            }
            
            internal DataColumn SmokePerDayColumn {
                get {
                    return this.columnSmokePerDay;
                }
            }
            
            internal DataColumn SmokeDurationColumn {
                get {
                    return this.columnSmokeDuration;
                }
            }
            
            internal DataColumn SmokeQuitColumn {
                get {
                    return this.columnSmokeQuit;
                }
            }
            
            internal DataColumn SmokeQuitTimeColumn {
                get {
                    return this.columnSmokeQuitTime;
                }
            }
            
            public PatientRow this[int index] {
                get {
                    return ((PatientRow)(this.Rows[index]));
                }
            }
            
            public event PatientRowChangeEventHandler PatientRowChanged;
            
            public event PatientRowChangeEventHandler PatientRowChanging;
            
            public event PatientRowChangeEventHandler PatientRowDeleted;
            
            public event PatientRowChangeEventHandler PatientRowDeleting;
            
            public void AddPatientRow(PatientRow row) {
                this.Rows.Add(row);
            }
            
            public PatientRow AddPatientRow(
                        string CprID, 
                        string FirstName, 
                        string LastName, 
                        string MiddleName, 
                        System.DateTime BirthDate, 
                        System.Double Height, 
                        System.Double Weight, 
                        int Sex, 
                        int Race, 
                        string Technician, 
                        string Physician, 
                        bool Smoke, 
                        int SmokePerDay, 
                        int SmokeDuration, 
                        bool SmokeQuit, 
                        int SmokeQuitTime) {
                PatientRow rowPatientRow = ((PatientRow)(this.NewRow()));
                rowPatientRow.ItemArray = new object[] {
                        CprID,
                        FirstName,
                        LastName,
                        MiddleName,
                        BirthDate,
                        Height,
                        Weight,
                        Sex,
                        Race,
                        Technician,
                        Physician,
                        Smoke,
                        SmokePerDay,
                        SmokeDuration,
                        SmokeQuit,
                        SmokeQuitTime};
                this.Rows.Add(rowPatientRow);
                return rowPatientRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                PatientDataTable cln = ((PatientDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new PatientDataTable();
            }
            
            internal void InitVars() {
                this.columnCprID = this.Columns["CprID"];
                this.columnFirstName = this.Columns["FirstName"];
                this.columnLastName = this.Columns["LastName"];
                this.columnMiddleName = this.Columns["MiddleName"];
                this.columnBirthDate = this.Columns["BirthDate"];
                this.columnHeight = this.Columns["Height"];
                this.columnWeight = this.Columns["Weight"];
                this.columnSex = this.Columns["Sex"];
                this.columnRace = this.Columns["Race"];
                this.columnTechnician = this.Columns["Technician"];
                this.columnPhysician = this.Columns["Physician"];
                this.columnSmoke = this.Columns["Smoke"];
                this.columnSmokePerDay = this.Columns["SmokePerDay"];
                this.columnSmokeDuration = this.Columns["SmokeDuration"];
                this.columnSmokeQuit = this.Columns["SmokeQuit"];
                this.columnSmokeQuitTime = this.Columns["SmokeQuitTime"];
            }
            
            private void InitClass() {
                this.columnCprID = new DataColumn("CprID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCprID);
                this.columnFirstName = new DataColumn("FirstName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFirstName);
                this.columnLastName = new DataColumn("LastName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastName);
                this.columnMiddleName = new DataColumn("MiddleName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMiddleName);
                this.columnBirthDate = new DataColumn("BirthDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBirthDate);
                this.columnHeight = new DataColumn("Height", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHeight);
                this.columnWeight = new DataColumn("Weight", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnWeight);
                this.columnSex = new DataColumn("Sex", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSex);
                this.columnRace = new DataColumn("Race", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRace);
                this.columnTechnician = new DataColumn("Technician", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTechnician);
                this.columnPhysician = new DataColumn("Physician", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPhysician);
                this.columnSmoke = new DataColumn("Smoke", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSmoke);
                this.columnSmokePerDay = new DataColumn("SmokePerDay", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSmokePerDay);
                this.columnSmokeDuration = new DataColumn("SmokeDuration", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSmokeDuration);
                this.columnSmokeQuit = new DataColumn("SmokeQuit", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSmokeQuit);
                this.columnSmokeQuitTime = new DataColumn("SmokeQuitTime", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSmokeQuitTime);
                this.columnCprID.DefaultValue = "0";
                this.columnFirstName.DefaultValue = "";
                this.columnLastName.DefaultValue = "";
                this.columnMiddleName.DefaultValue = "";
                this.columnHeight.DefaultValue = 0;
                this.columnWeight.DefaultValue = 0;
                this.columnSex.DefaultValue = 0;
                this.columnRace.DefaultValue = 0;
                this.columnTechnician.DefaultValue = "";
                this.columnPhysician.DefaultValue = "";
                this.columnSmoke.DefaultValue = false;
                this.columnSmokePerDay.DefaultValue = 0;
                this.columnSmokeDuration.DefaultValue = 0;
                this.columnSmokeQuit.DefaultValue = false;
                this.columnSmokeQuitTime.DefaultValue = 0;
            }
            
            public PatientRow NewPatientRow() {
                return ((PatientRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new PatientRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(PatientRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PatientRowChanged != null)) {
                    this.PatientRowChanged(this, new PatientRowChangeEvent(((PatientRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PatientRowChanging != null)) {
                    this.PatientRowChanging(this, new PatientRowChangeEvent(((PatientRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PatientRowDeleted != null)) {
                    this.PatientRowDeleted(this, new PatientRowChangeEvent(((PatientRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PatientRowDeleting != null)) {
                    this.PatientRowDeleting(this, new PatientRowChangeEvent(((PatientRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovePatientRow(PatientRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PatientRow : DataRow {
            
            private PatientDataTable tablePatient;
            
            internal PatientRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablePatient = ((PatientDataTable)(this.Table));
            }
            
            public string CprID {
                get {
                    try {
                        return ((string)(this[this.tablePatient.CprIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatient.CprIDColumn] = value;
                }
            }
            
            public string FirstName {
                get {
                    try {
                        return ((string)(this[this.tablePatient.FirstNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatient.FirstNameColumn] = value;
                }
            }
            
            public string LastName {
                get {
                    try {
                        return ((string)(this[this.tablePatient.LastNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatient.LastNameColumn] = value;
                }
            }
            
            public string MiddleName {
                get {
                    try {
                        return ((string)(this[this.tablePatient.MiddleNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatient.MiddleNameColumn] = value;
                }
            }
            
            public System.DateTime BirthDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablePatient.BirthDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatient.BirthDateColumn] = value;
                }
            }
            
            public System.Double Height {
                get {
                    try {
                        return ((System.Double)(this[this.tablePatient.HeightColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatient.HeightColumn] = value;
                }
            }
            
            public System.Double Weight {
                get {
                    try {
                        return ((System.Double)(this[this.tablePatient.WeightColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatient.WeightColumn] = value;
                }
            }
            
            public int Sex {
                get {
                    try {
                        return ((int)(this[this.tablePatient.SexColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatient.SexColumn] = value;
                }
            }
            
            public int Race {
                get {
                    try {
                        return ((int)(this[this.tablePatient.RaceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatient.RaceColumn] = value;
                }
            }
            
            public string Technician {
                get {
                    try {
                        return ((string)(this[this.tablePatient.TechnicianColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatient.TechnicianColumn] = value;
                }
            }
            
            public string Physician {
                get {
                    try {
                        return ((string)(this[this.tablePatient.PhysicianColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatient.PhysicianColumn] = value;
                }
            }
            
            public bool Smoke {
                get {
                    try {
                        return ((bool)(this[this.tablePatient.SmokeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatient.SmokeColumn] = value;
                }
            }
            
            public int SmokePerDay {
                get {
                    try {
                        return ((int)(this[this.tablePatient.SmokePerDayColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatient.SmokePerDayColumn] = value;
                }
            }
            
            public int SmokeDuration {
                get {
                    try {
                        return ((int)(this[this.tablePatient.SmokeDurationColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatient.SmokeDurationColumn] = value;
                }
            }
            
            public bool SmokeQuit {
                get {
                    try {
                        return ((bool)(this[this.tablePatient.SmokeQuitColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatient.SmokeQuitColumn] = value;
                }
            }
            
            public int SmokeQuitTime {
                get {
                    try {
                        return ((int)(this[this.tablePatient.SmokeQuitTimeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatient.SmokeQuitTimeColumn] = value;
                }
            }
            
            public bool IsCprIDNull() {
                return this.IsNull(this.tablePatient.CprIDColumn);
            }
            
            public void SetCprIDNull() {
                this[this.tablePatient.CprIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsFirstNameNull() {
                return this.IsNull(this.tablePatient.FirstNameColumn);
            }
            
            public void SetFirstNameNull() {
                this[this.tablePatient.FirstNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsLastNameNull() {
                return this.IsNull(this.tablePatient.LastNameColumn);
            }
            
            public void SetLastNameNull() {
                this[this.tablePatient.LastNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsMiddleNameNull() {
                return this.IsNull(this.tablePatient.MiddleNameColumn);
            }
            
            public void SetMiddleNameNull() {
                this[this.tablePatient.MiddleNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsBirthDateNull() {
                return this.IsNull(this.tablePatient.BirthDateColumn);
            }
            
            public void SetBirthDateNull() {
                this[this.tablePatient.BirthDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsHeightNull() {
                return this.IsNull(this.tablePatient.HeightColumn);
            }
            
            public void SetHeightNull() {
                this[this.tablePatient.HeightColumn] = System.Convert.DBNull;
            }
            
            public bool IsWeightNull() {
                return this.IsNull(this.tablePatient.WeightColumn);
            }
            
            public void SetWeightNull() {
                this[this.tablePatient.WeightColumn] = System.Convert.DBNull;
            }
            
            public bool IsSexNull() {
                return this.IsNull(this.tablePatient.SexColumn);
            }
            
            public void SetSexNull() {
                this[this.tablePatient.SexColumn] = System.Convert.DBNull;
            }
            
            public bool IsRaceNull() {
                return this.IsNull(this.tablePatient.RaceColumn);
            }
            
            public void SetRaceNull() {
                this[this.tablePatient.RaceColumn] = System.Convert.DBNull;
            }
            
            public bool IsTechnicianNull() {
                return this.IsNull(this.tablePatient.TechnicianColumn);
            }
            
            public void SetTechnicianNull() {
                this[this.tablePatient.TechnicianColumn] = System.Convert.DBNull;
            }
            
            public bool IsPhysicianNull() {
                return this.IsNull(this.tablePatient.PhysicianColumn);
            }
            
            public void SetPhysicianNull() {
                this[this.tablePatient.PhysicianColumn] = System.Convert.DBNull;
            }
            
            public bool IsSmokeNull() {
                return this.IsNull(this.tablePatient.SmokeColumn);
            }
            
            public void SetSmokeNull() {
                this[this.tablePatient.SmokeColumn] = System.Convert.DBNull;
            }
            
            public bool IsSmokePerDayNull() {
                return this.IsNull(this.tablePatient.SmokePerDayColumn);
            }
            
            public void SetSmokePerDayNull() {
                this[this.tablePatient.SmokePerDayColumn] = System.Convert.DBNull;
            }
            
            public bool IsSmokeDurationNull() {
                return this.IsNull(this.tablePatient.SmokeDurationColumn);
            }
            
            public void SetSmokeDurationNull() {
                this[this.tablePatient.SmokeDurationColumn] = System.Convert.DBNull;
            }
            
            public bool IsSmokeQuitNull() {
                return this.IsNull(this.tablePatient.SmokeQuitColumn);
            }
            
            public void SetSmokeQuitNull() {
                this[this.tablePatient.SmokeQuitColumn] = System.Convert.DBNull;
            }
            
            public bool IsSmokeQuitTimeNull() {
                return this.IsNull(this.tablePatient.SmokeQuitTimeColumn);
            }
            
            public void SetSmokeQuitTimeNull() {
                this[this.tablePatient.SmokeQuitTimeColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PatientRowChangeEvent : EventArgs {
            
            private PatientRow eventRow;
            
            private DataRowAction eventAction;
            
            public PatientRowChangeEvent(PatientRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public PatientRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
